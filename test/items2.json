[{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"c-advent-calendar-2018\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c-advent-calendar-2018\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++ Advent Calendar 2018\u003c/h1\u003e\n\n\u003cp\u003eこの記事は\u003ca href=\"https://qiita.com/advent-calendar/2018/cpp\"\u003eC++ Advent Calendar 2018\u003c/a\u003e 15日目の記事です。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e14日目: \u003ca href=\"https://qiita.com/shohirose/items/dd2bdc4201644455e3a8\" id=\"reference-02cc121b1c73cc16d417\"\u003eVTKライブラリ\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e16日目: \u003ca href=\"https://qiita.com/kazatsuyu/items/2e1aa96f1c103a91fd00\" id=\"reference-e1ebb78ef09626148530\"\u003eC++のエラー処理との付き合い方\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e当初見積もりよりも大幅に長い記事となり、投稿したのは12/22で1週間遅刻です。すみません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"お知らせ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eお知らせ\u003c/h1\u003e\n\n\u003cp\u003ecpprefjpに\u003ccode\u003echar8_t\u003c/code\u003e型追加について解説を書きました。ぎゅぎゅっとコンパクトに、また査読を受けて中立的な表現で書いていますので、よければどうぞ。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://cpprefjp.github.io/lang/cpp20/char8_t.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUTF-8エンコーディングされた文字の型として\u003ccode\u003echar8_t\u003c/code\u003eを追加 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"caution\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#caution\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCaution\u003c/h1\u003e\n\n\u003cp\u003eこの文章には以下の要素が含まれます。苦手な方はご注意くださいね～。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e西欧人への偏見\u003c/li\u003e\n\u003cli\u003eC++の始祖への反論\u003c/li\u003e\n\u003cli\u003e日本語に偏った文章\u003c/li\u003e\n\u003cli\u003eアジア圏に偏った文章\u003c/li\u003e\n\u003cli\u003e常体と敬体の入り乱れた文章\u003c/li\u003e\n\u003cli\u003e溢れ出た強烈な感情が\u003cdel\u003e打ち消し線\u003c/del\u003eで表されている\u003c/li\u003e\n\u003cli\u003e要出典\u003c/li\u003e\n\u003cli\u003e独自研究\u003c/li\u003e\n\u003cli\u003e不十分な/誤りのある英語→日本語翻訳\u003c/li\u003e\n\u003cli\u003eUnicode策定に関わった人たちへのdisり\u003c/li\u003e\n\u003cli\u003e絵文字に関わった人たちへのdisり\u003c/li\u003e\n\u003cli\u003eにこにこ(く)\u003c/li\u003e\n\u003cli\u003e江添亮氏のブログからの引用\u003c/li\u003e\n\u003cli\u003eauに偏った絵文字観\u003c/li\u003e\n\u003cli\u003eEUC軽視\u003c/li\u003e\n\u003cli\u003eチベット語話者軽視\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"unicodeとか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%A8%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeとか\u003c/h1\u003e\n\n\u003cp\u003e今回の\u003ccode\u003echar8_t\u003c/code\u003e型を語る前にまずUnicodeについて話さねばならん。ここがすべての原点だからだ。\u003c/p\u003e\n\n\u003cp\u003eとはいえ探せば優れた記事が存在し、というか私は実のところさほど詳しくない。\u003c/p\u003e\n\n\u003cp\u003eでも書いちゃう。文字コードに散々苦しめられながら生活してきた人間として。\u003c/p\u003e\n\n\u003cp\u003eしかし感情が高ぶるあまり事実誤認している可能性が高い。このセクションはさーっと読み流しつつ詳しく知りたいなら参考資料のリンクを張っておくので通読されることを勧める。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"そもそもunicodeとはなにか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82unicode%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそもそもUnicodeとはなにか\u003c/h2\u003e\n\n\u003cp\u003eUnicode前夜、コンピュータで文字を扱うには各地域ごとの文字セットがあり、必要の応じてこれを切り替えて文字を扱っていた。\u003c/p\u003e\n\n\u003cp\u003eしかしソフトウェアを世界的に発売するようになるとローカライズの作業時にこれでは不都合があり、全部の文字を扱える文字セットが必要だろうという声が上がった。\u003c/p\u003e\n\n\u003cp\u003eそういった文字セットを作るべく、大きく2つの団体が舞台となりさながら戦争のような争いを経て現代に至る。ISOの文字コード規格委員会 (ISO/TC 97/SC2) とユニコードコンソーシアムである。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"unicodeにおけるエンコードとコードポイントとグリフとフォント\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%A8%E3%82%B0%E3%83%AA%E3%83%95%E3%81%A8%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeにおけるエンコードとコードポイントとグリフとフォント\u003c/h2\u003e\n\n\u003cp\u003e極めて混同しやすいので、きっちり分離して理解する必要がある。\u003c/p\u003e\n\n\u003cp\u003eまずグリフ(字体)がある。これは、ある文字がどういう特徴をもったものなのかを規定する。\u003c/p\u003e\n\n\u003cp\u003eフォント(書体)はグリフの要求を満たしつつ、デザイン性を加味したものだ。\u003c/p\u003e\n\n\u003cp\u003eコードポイントとはUnicodeで文字を扱うのに、グリフに背番号を付けたようなものだ。\u003c/p\u003e\n\n\u003cp\u003eそしてエンコードとはコードポイントをコンピューターで扱うに際してどのようなbinary列にするかを定めるものである。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003cbr\u003e\nグリフについては議論の余地があったようだ\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://naruse.hateblo.jp/entry/2018/12/24/013446\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar8_tによせて - なるせにっき\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://d.hatena.ne.jp/NAOI/20070427/1177670797\" rel=\"nofollow noopener\" target=\"_blank\"\u003eグリフ（glyph）という言葉の定義をめぐって\u003c/a\u003eでも触れられていますが、「グリフ」という言葉が「字体」を指すのか「字形」を指すのかってのは議論がありますね。文字コードの文脈では普通「字形」の意味だとして話を進めることが多いように思います。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"火種は何処に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%81%AB%E7%A8%AE%E3%81%AF%E4%BD%95%E5%87%A6%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e火種は何処に\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"メモリー消費との戦い\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E6%B6%88%E8%B2%BB%E3%81%A8%E3%81%AE%E6%88%A6%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメモリー消費との戦い\u003c/h3\u003e\n\n\u003cp\u003eそもそもコンピュータはプログラムの実行に必要なデータがメモリー上に展開されていなければ実行できない。\u003c/p\u003e\n\n\u003cp\u003e2018年の今だからこそ文字くらいでメモリー消費を気にすることなどないが、時代は1980年台である。メモリーとは命に等しいのであった\u003csup\u003e[要出典]\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eしたがって少しでもメモリー消費を減らすことがすべての場所で要求された。文字もその例外ではない。\u003c/p\u003e\n\n\u003cp\u003eメモリーの無駄遣いはそれだけで即刻Rejectされる世界だったのだろう。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"asciiしか解さない愚か者たち\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ascii%E3%81%97%E3%81%8B%E8%A7%A3%E3%81%95%E3%81%AA%E3%81%84%E6%84%9A%E3%81%8B%E8%80%85%E3%81%9F%E3%81%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eASCIIしか解さない愚か者たち\u003c/h3\u003e\n\n\u003cp\u003eそもそもヨーロッパ圏においては中国や日本みたいに8bitには到底収まりきらない程の文字が日常にある世界など想像できないのである。\u003csup\u003e[要出典]\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eというかASCII以外の文字は2級市民だという勢いの人すら存在する。例えば後述するBoost.Locale事件である。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"すべての文字が16bitに収まると考える愚か者たち\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%96%87%E5%AD%97%E3%81%8C16bit%E3%81%AB%E5%8F%8E%E3%81%BE%E3%82%8B%E3%81%A8%E8%80%83%E3%81%88%E3%82%8B%E6%84%9A%E3%81%8B%E8%80%85%E3%81%9F%E3%81%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eすべての文字が16bitに収まると考える愚か者たち\u003c/h3\u003e\n\n\u003cp\u003eASCIIしか解さない愚か者たちの中にも流石にすべての文字が8bitに収まらないという現実は受け入れられ始めていた\u003csup\u003e[要出典]\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eしかしやはり同じ理由からなのかメモリー消費との戦いからなのかはたまた宗教的な争いからか16bitで収まると考える愚か者が現れた。ユニコードコンソーシアムである。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eMS さんは比較的初期から Unicode コンソーシアムにいて、 16bit のほうが都合がいいからと、半ば決まりかけていた DIS10646 の卓袱台返しに加担した側なので、同情の余地はないですね。 \u003ca href=\"https://t.co/QpraL9VwfC\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/QpraL9VwfC\u003c/a\u003e\u003c/p\u003e— AoiMoe a.k.aしお兄P (@AoiMoe) \u003ca href=\"https://twitter.com/AoiMoe/status/1133017363719249920?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2019年5月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"cjkの漢字が同一であると考える愚か者たち\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cjk%E3%81%AE%E6%BC%A2%E5%AD%97%E3%81%8C%E5%90%8C%E4%B8%80%E3%81%A7%E3%81%82%E3%82%8B%E3%81%A8%E8%80%83%E3%81%88%E3%82%8B%E6%84%9A%E3%81%8B%E8%80%85%E3%81%9F%E3%81%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCJKの漢字が同一であると考える愚か者たち\u003c/h3\u003e\n\n\u003cp\u003eちょっとでも詳しい人ならCJK統合漢字というものをご存知かもしれない。すべての文字が16bitに収まると考える愚か者たちにそそのかされた結果、中国(C)、日本(J)、韓国(K)、ついでにベトナム(V)の漢字を無理やり悪魔合体して同じ漢字だと自らを洗脳することで、漢字の統合を行ってしまった。\u003c/p\u003e\n\n\u003cp\u003e・・・ところでこれを主導したのが誰だったか追加調査すると\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://www.unicode.org/history/earlyyears.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eEarly Years of Unicode\u003c/a\u003e\u003cbr\u003e\nOur investigations, headed by Lee Collins, showed that we could get past these technical issues.\u003c/p\u003e\n\n\u003cp\u003eAs far as the text size, when we tested the percentage of memory or disk space actually occupied by character data in typical use, we found that it was rather small. Small not in absolute terms, but small compared to the amount of overhead in data structures and formatting information. Nowadays, of course, with video and sound data taking so much space, the percentage is even smaller.\u003c/p\u003e\n\n\u003cp\u003eConcerning unification, when we looked at the unification of CJK ideographs, we had the successful example of the Research Libraries Group's East Asian Character (EACC) bibliographic code to show the way. We could see that by using the very same unification rules that the Japanese used for JIS, we could unify characters across the three languages.\u003c/p\u003e\n\n\u003cp\u003eAnd, in terms of character count, when we counted up the upper bounds for the modern characters in common use, we came in well under 16 bits.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLee Collinsという人だったと調べ直してわかったのですが、どっかでCJK統合できるか調べてShift-JISとかとか見たけど統合できそうやで！みたいな論文、それもスキャンされた画像だったと思うんですが、見た記憶があるんですが、一体どこにあったんだかさっぱり辿れない。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"固定長に文字が収まるという夢を見た愚か者たち\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%9B%BA%E5%AE%9A%E9%95%B7%E3%81%AB%E6%96%87%E5%AD%97%E3%81%8C%E5%8F%8E%E3%81%BE%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E5%A4%A2%E3%82%92%E8%A6%8B%E3%81%9F%E6%84%9A%E3%81%8B%E8%80%85%E3%81%9F%E3%81%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e固定長に文字が収まるという夢を見た愚か者たち\u003c/h3\u003e\n\n\u003cp\u003eプログラム的に、もし文字を固定長に表すことができれば非常に処理がやりやすい。その利便性から固定長に文字が収まるという幻想の郷に誘われてしまった愚か者たちがいた。\u003cdel\u003e当時の関係各位概ね全てである。\u003csup\u003e[要出典]\u003c/sup\u003e\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e追記:\u003cbr\u003e\nと思いきや、そこまで愚かではなかった。むしろ現代の我々のほうが愚かである気がする。\u003c/p\u003e\n\n\u003cp\u003eまあこの辺については未だに理解が進んでおらず2017年の\u003ca href=\"https://adventar.org/calendars/2282\" rel=\"nofollow noopener\" target=\"_blank\"\u003e自作OS Advent Calendar 2017\u003c/a\u003eでは\u003ca href=\"/tenpoku1000\" class=\"user-mention js-hovercard\" title=\"tenpoku1000\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"tenpoku1000\"\u003e@tenpoku1000\u003c/a\u003eさんが\u003cbr\u003e\n\u003ca href=\"https://gist.github.com/tenpoku1000/d60efa587b185ab34e36c70622934892\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUTF-32 でも固定長で処理出来るわけではない\u003c/a\u003e\u003cbr\u003e\nを執筆されていたりしたようだ。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"宗教文化という普遍的な火種\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%97%E6%95%99%E6%96%87%E5%8C%96%E3%81%A8%E3%81%84%E3%81%86%E6%99%AE%E9%81%8D%E7%9A%84%E3%81%AA%E7%81%AB%E7%A8%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e宗教・文化という普遍的な火種\u003c/h3\u003e\n\n\u003cp\u003e人類の歴史を振り返るに、おおよそ戦争というものの多くは宗教・文化という普遍的な火種が関わっている。多様な価値観を認めるとかそういう行為はエントロピーが高かったりするんだろうか。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"その他\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその他\u003c/h3\u003e\n\n\u003cp\u003eまあ金とか名誉とかそのへんのありきたりな火種も当然ある。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"結果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結果\u003c/h2\u003e\n\n\u003cp\u003e無視できない負債が現代もなおプログラマーを、ひいてはソフトウェアを利用する罪のない一般市民を巻き込んでいる。地雷原の撤去は終わっていないのだ。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"無視できない負債たち\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%84%A1%E8%A6%96%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E8%B2%A0%E5%82%B5%E3%81%9F%E3%81%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e無視できない負債たち\u003c/h2\u003e\n\n\u003cp\u003e細かく上げれば鈍器になるレベルかも知れないので2つだけ。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"utf-16\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#utf-16\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUTF-16\u003c/h3\u003e\n\n\u003cp\u003eMicrosoftなどが国際化プログラミングとか称して時代はUnicodeだよねっ！と言い出した。まあそこまでは良かった。問題はそこからだ。\u003c/p\u003e\n\n\u003cp\u003eMicrosoftがUnicodeといえば、もれなくUTF-16を指す。\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eワイド文字という概念が生産されたのだが、\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e追記:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://naruse.hateblo.jp/entry/2018/12/24/013446\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar8_tによせて - なるせにっき\u003c/a\u003e\u003cbr\u003e\nそもそもワイド文字という概念はUnicode以前からあって、元々はDEC漢字のような日本語UNIX環境の開発から生まれ、日本語UNIX環境がAT\u0026amp;Tの本家UNIXに取り込まれることで世界に紹介され、C89にwchar_tが取り込まれ、C++にも採用されるといった順序になっています。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnicodeより前からあったのか・・・。\u003c/p\u003e\n\n\u003cp\u003eまあいずれにせよ、ユニコードコンソーシアム側の不用意な宣伝の結果誤用され、これはマルチバイト文字との対比の文脈で用いられた。言うまでもなく大問題で、なぜならUTF-16は文字を固定長で扱うことができないからである。サロゲートペアであるとか結合文字列なんかの問題がある。しかし多くのプログラマーはワイド文字なら固定長で扱えると考えてしまった。\u003cbr\u003e\n日本人がまんまとユニコードコンソーシアム側の周回遅れの情報に騙されてしまった背景には2001年、Unicode 3.1で、ISO/IEC 10646-2として、拡張漢字B集合42,711字が、U+20000-U+2A6FFのブロックに追加されるまでサロゲートペアも結合文字列も扱う機会がなかったためと思われる。\u003cbr\u003e\n結果膨大な数のバグを生み出す地雷として今なお猛威を振るっている。\u003c/p\u003e\n\n\u003cp\u003eじゃあUTF-16を使うのをやめればいいじゃないと思うかもしれないが、巨大なシェアを持つWindowsを始め、そこかしこで使われてしまったがために、バイナリ互換を捨てないために維持されている。\u003cbr\u003e\n\u003cdel\u003eおい、だれか平行世界に転生してユニコードコンソーシアムの連中をひたすら論破し続ける小説を書いてくれないか。\u003c/del\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"cjk統合漢字\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cjk%E7%B5%B1%E5%90%88%E6%BC%A2%E5%AD%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCJK統合漢字\u003c/h3\u003e\n\n\u003cp\u003eCJKの漢字が同一であると考える愚か者たちによって悪魔合体させられてしまった文字たちだが、当然問題になった。悪魔合体したとはいえ字形が同じであるはずもないし、用いられる文脈も違う別の文字だったはずのものである。\u003c/p\u003e\n\n\u003cp\u003e解決策として異体字セレクターというものができた。つまりCJK統合漢字を表す既存のCodepointの後ろに異体字セレクター用に割り当てられた別のcodepointを並べることで一つの文字として扱い、字形を区別できるようにするというものである。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003cbr\u003e\n\u003c/p\u003e\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e（ \u003ca href=\"https://t.co/Vgyz7LH9Z1\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003c/a\u003e\u003ca href=\"https://t.co/Vgyz7LH9Z1\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/Vgyz7LH9Z1\u003c/a\u003e ここでの異体字セレクターに関する下りは明らかな事実誤認かな。仮に CJKV でのソースの差を区別していたとしても、漢字の字体や文脈の問題は解決しなかったかより悪くなっていただろうし、IVS も（少なくとも現状）同一ソース内での形の差異を区別するものでしかない）\u003c/p\u003e— MORIOKA Tomohiko (@CHISE_ja) \u003ca href=\"https://twitter.com/CHISE_ja/status/1077041620179009536?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2018年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e完璧に事実誤認だったようなので忘れてください。\u003c/p\u003e\n\n\u003cp\u003eただ多くのソフトウェアでこれの対応を忘れてしまい、例えばvscodeなんかもその手の問題を当初抱えていた。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://naruse.hateblo.jp/entry/2018/12/24/013446\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar8_tによせて - なるせにっき\u003c/a\u003e\u003cbr\u003e\nだってさぁ、アルファベットは元から統合されてるんだし。\u003c/p\u003e\n\n\u003cp\u003eまぁ、トルコ語のアルファベットは分離しておいた方がよかったと思います。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eあーうん、確かにそう言われてみれば・・・。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"絵文字\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%B5%E6%96%87%E5%AD%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e絵文字\u003c/h2\u003e\n\n\u003cp\u003eこれもUnicodeを語るのに欠かせない要素なので触れておく。\u003c/p\u003e\n\n\u003cp\u003e世紀末の日本、1999年2月のこと、ドコモがi-モードを提供し始めた。このとき絵文字を収録した。21世紀に入る前に今のau、今のSoftbankも同様のサービスを提供し始めた。\u003c/p\u003e\n\n\u003cp\u003eちなみにi-モードの絵文字をほぼ一人で作った人は今ニコニコ動画でおなじみドワンゴ取締役の（く）りたしげたか改・・・じゃなかった、栗田 穣崇さんだったりします。大炎上したにこにこ(く)の収拾にあたり陣頭にたった方ですね。\u003c/p\u003e\n\n\u003cp\u003eで、この絵文字、即座に問題になって、つまりキャリア間でメールを投げるときに絵文字を使うと化けるという問題でした。\u003c/p\u003e\n\n\u003cp\u003e元になっている文字コードはShift-JISというやつで2年前の1997年に正式に規定したときに禁止された範囲に絵文字を各社てんでんばらばらに割り当ててしまったもんだからさあ大変。\u003c/p\u003e\n\n\u003cp\u003eこのとき3社の間で標準化する、もしくはデファクトスタンダードを作ってくれていればもうすこし現代社会をプログラマーは生きやすくなっただろうと思うのですが、それは後世からみた評価であって、致し方なかったのでしょうか。\u003c/p\u003e\n\n\u003cp\u003e2006年、3者はそれぞれ他の2社との相互運用性向上のために、E-mailに関して、メールの送信経路で中間者攻撃を仕掛け、送り先に合わせた絵文字に変換するサービスを開始しました。そう、最悪の結果となったのです。\u003cdel\u003e当時の関係各位は十分に反省して欲しい。\u003c/del\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"絵文字とgmailとiphoneとunicode\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%B5%E6%96%87%E5%AD%97%E3%81%A8gmail%E3%81%A8iphone%E3%81%A8unicode\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e絵文字とGmailとiPhoneとUnicode\u003c/h2\u003e\n\n\u003cp\u003eASCIIしか解さない愚か者たちにぐーで殴りかかったものがある。絵文字だ。\u003c/p\u003e\n\n\u003cp\u003e最終的に絵文字が世界に流通するきっかけとなったのはiPhoneだと思われる。\u003c/p\u003e\n\n\u003cp\u003eしかし流通可能なまでに最悪の状態を整理した功績の多くはGoogleのGmail、その日本チームにある。\u003c/p\u003e\n\n\u003cp\u003eGmailが絵文字に対応したのは2008年1月のことだが、2007年6月には概ね整理を終えていたらしい。\u003c/p\u003e\n\n\u003cp\u003e2009年の11月、iOS 2.2で日本語に設定したときのみ絵文字が使えるようになった。\u003c/p\u003e\n\n\u003cp\u003eUnicodeに絵文字を入れる議論が始まり、日本に偏っていたことやその他国際化にあたって多くの障害を乗り越え、本が何冊かないと書ききれない経緯を経て2010年、Unicode 6.0に絵文字が入った。\u003c/p\u003e\n\n\u003cp\u003eこうして世界に絵文字が広がった。その後も絵文字に改善が入っている。\u003c/p\u003e\n\n\u003cp\u003e結果ASCIIしか解さない愚か者たちに何が襲いかかったか。結合文字列である。ついに固定長に文字が収まるという幻想が破られるときが来てしまったのである。\u003c/p\u003e\n\n\u003cp\u003eと同時にそれはついに真面目にUnicodeに向き合わなければならない時代の到来を告げたのだった。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"unicodeにおける4つの文字の定義\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B4%E3%81%A4%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E5%AE%9A%E7%BE%A9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeにおける4つの文字の定義\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://unicode.org/faq/char_combmark.html#7\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://unicode.org/faq/char_combmark.html#7\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにて4通りの定義が示されています。それに習って\u003ccode\u003eU+0061, U+0928, U+093F, U+4E9C, U+10083\u003c/code\u003e(aनि亜𐂃)という文字列の長さを4通りで数えれば4つの定義がわかることでしょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a16de0293c34df4330143a6aadb3559d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a16de0293c34df4330143a6aadb3559d\" alt=\"img\" data-canonical-src=\"https://unicode.org/faq/char_combmark_ex1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=10c41a838f929b8d8a20df5b39bdd0c9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"byte\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#byte\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ebyte\u003c/h3\u003e\n\n\u003cp\u003e何byteか、という数え方です。Unicodeには今の所\u003ccode\u003eUTF-8\u003c/code\u003e/\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eというエンコード方式が存在するのでそれぞれ数えてみましょう。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eエンコード\u003c/th\u003e\n\u003cth\u003ebyte数\u003c/th\u003e\n\u003cth\u003ebyte列\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-8\u003c/td\u003e\n\u003ctd\u003e14\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e61 E0 A4 A8 E0 A4 BF E4 BA 9C F0 90 82 83\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-16BE\u003c/td\u003e\n\u003ctd\u003e12\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e00 61 09 28 09 3F 4E 9C D8 00 DC 83\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-32BE\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e00 00 00 61 00 00 09 28 00 00 09 3F 00 00 4E 9C 00 01 00 83\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e用途としては、メモリー確保するときの大きさとかそんなでしょうか。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"code-units\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#code-units\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ecode units\u003c/h3\u003e\n\n\u003cp\u003e何単位か、という数え方です。やはり\u003ccode\u003eUTF-8\u003c/code\u003e/\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eについてどうなるか見てみましょう。\u003c/p\u003e\n\n\u003cp\u003eところでcode unitsは一般に単位と訳されるのですが、Code Unit Sequenceはどう訳せばいいんでしょうか？単位列、だとなんか違和感があります。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eエンコード\u003c/th\u003e\n\u003cth\u003eCode Unit数\u003c/th\u003e\n\u003cth\u003eCode Unit列\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-8\u003c/td\u003e\n\u003ctd\u003e14\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e61 E0 A4 A8 E0 A4 BF E4 BA 9C F0 90 82 83\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-16\u003c/td\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e0061 0928 093F 4E9C D800 DC83\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUTF-32\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e00000061 00000928 0000093F 00004E9C 00010083\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eJavascriptとかいう変態は置いておいて少なくともC++でstringのlengthといったらこれですね。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"code-points\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#code-points\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ecode points\u003c/h3\u003e\n\n\u003cp\u003e何コードポイントか、という数え方です。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eU+0061, U+0928, U+093F, U+4E9C, U+10083\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eというのは5コードポイントですね。\u003c/p\u003e\n\n\u003cp\u003eちなみにUTF-32のときのCode Unit数と同一です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"grapheme-cluster\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#grapheme-cluster\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003egrapheme cluster\u003c/h3\u003e\n\n\u003cp\u003e何書記素クラスタか、という数え方です。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a16de0293c34df4330143a6aadb3559d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=a16de0293c34df4330143a6aadb3559d\" alt=\"img\" data-canonical-src=\"https://unicode.org/faq/char_combmark_ex1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Funicode.org%2Ffaq%2Fchar_combmark_ex1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=10c41a838f929b8d8a20df5b39bdd0c9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(aनि亜𐂃)\u003c/p\u003e\n\n\u003cp\u003e人間が見たときに一文字と解釈するかという考え方です。\u003c/p\u003e\n\n\u003cp\u003e例えばनिはコードポイントで見ると\u003ccode\u003eU+0928\u003c/code\u003e(न), \u003ccode\u003eU+093F\u003c/code\u003e(ि)という2コードポイントで表されます。しかしこれを別々の文字とは人間は解釈せず、一文字と認識します。\u003c/p\u003e\n\n\u003cp\u003e他の例も見てみましょう。\u003cbr\u003e\nप,ू,र,ी,त,ि\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F5dfb67a3-243f-bfef-ccb0-6fa0d79cf473.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6b4cc0a02a514f134fc689535c3b4617\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F5dfb67a3-243f-bfef-ccb0-6fa0d79cf473.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6b4cc0a02a514f134fc689535c3b4617\" alt=\"index.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/5dfb67a3-243f-bfef-ccb0-6fa0d79cf473.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F5dfb67a3-243f-bfef-ccb0-6fa0d79cf473.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=a93348968b43c3d4252eddb7fe9239dd 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n👩‍❤️‍💋‍👨\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.unicode.org/emoji/charts/full-emoji-list.html#1f469_200d_2764_fe0f_200d_1f48b_200d_1f468\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003ekiss: woman, man\u003c/code\u003eとして登録されている\u003c/a\u003eのですが、コードポイントで表すと\u003ccode\u003eU+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468\u003c/code\u003eとなります。長い！\u003c/p\u003e\n\n\u003cp\u003eさらに見ていきましょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dc1fca3c4a61e4a7da0cc8d5b2c75d11\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dc1fca3c4a61e4a7da0cc8d5b2c75d11\" alt=\"無題6.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/03115c92-3b5d-19a8-d1cc-f273fce35ec6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6fcfa440b138be0b02233b2ffdfb60f2 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पूरीति)\u003c/p\u003e\n\n\u003cp\u003eこれはcodepintでいうと\u003ccode\u003eU+092A U+0942 U+0930 U+0940 U+0924 U+093F\u003c/code\u003eという並びなのですが、見た目上の部品の並びとまったく一致しません。適当な文字入力手段がなかったのでWikipediaの\u003cbr\u003e\n\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%83%B4%E3%82%A1%E3%83%8A%E3%83%BC%E3%82%AC%E3%83%AA%E3%83%BC\" rel=\"nofollow noopener\" target=\"_blank\"\u003eデーヴァナーガリー - Wikipedia\u003c/a\u003e\u003cbr\u003e\nにある表から一つづつコピペして作りました。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F15652d0d-4b60-b2b9-6c1f-39b77ea853f9.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cc7c4dbdd4b356542eddd1d616ba65fc\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F15652d0d-4b60-b2b9-6c1f-39b77ea853f9.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cc7c4dbdd4b356542eddd1d616ba65fc\" alt=\"無題.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/15652d0d-4b60-b2b9-6c1f-39b77ea853f9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F15652d0d-4b60-b2b9-6c1f-39b77ea853f9.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ad09e6634e6e6796fb6a01650a69c17d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(प)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F334b0b12-176f-b979-e720-13c72254daf6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=822d80ec00448f738580d3303686cfe3\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F334b0b12-176f-b979-e720-13c72254daf6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=822d80ec00448f738580d3303686cfe3\" alt=\"無題2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/334b0b12-176f-b979-e720-13c72254daf6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F334b0b12-176f-b979-e720-13c72254daf6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=868c1a055cb42322d3674541aa0a2f3c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पू)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe855ca40-ef28-e193-815e-94200e31afa3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=08e2ed810117ebdb178edbbc31c59a05\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe855ca40-ef28-e193-815e-94200e31afa3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=08e2ed810117ebdb178edbbc31c59a05\" alt=\"無題3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/e855ca40-ef28-e193-815e-94200e31afa3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe855ca40-ef28-e193-815e-94200e31afa3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=261d226c560d8dbcc2ffddf3928168b8 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पूर)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff61af41f-6879-82a4-c679-ff1a7bc30c58.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9b4e060d09f31fdc51e23e316abec2e9\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff61af41f-6879-82a4-c679-ff1a7bc30c58.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9b4e060d09f31fdc51e23e316abec2e9\" alt=\"無題4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/f61af41f-6879-82a4-c679-ff1a7bc30c58.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff61af41f-6879-82a4-c679-ff1a7bc30c58.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6f0901f77e2fc199cf150ff5d073f5f8 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पूरी)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffcc3cf14-885f-586f-e116-61e6ec03678b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=93e27004a8147c53374c797d0f7fbc8d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffcc3cf14-885f-586f-e116-61e6ec03678b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=93e27004a8147c53374c797d0f7fbc8d\" alt=\"無題5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/fcc3cf14-885f-586f-e116-61e6ec03678b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffcc3cf14-885f-586f-e116-61e6ec03678b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=1915263c9fa4a5e43cbbf86ec23d479c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पूरीत)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dc1fca3c4a61e4a7da0cc8d5b2c75d11\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=dc1fca3c4a61e4a7da0cc8d5b2c75d11\" alt=\"無題6.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/03115c92-3b5d-19a8-d1cc-f273fce35ec6.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F03115c92-3b5d-19a8-d1cc-f273fce35ec6.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6fcfa440b138be0b02233b2ffdfb60f2 1x\" loading=\"lazy\"\u003e\u003c/a\u003e(पूरीति)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eいわゆる結合文字列の類はこのように認識上の一文字とコードポイント数が一致しません。\u003cbr\u003e\nあゝ、世界の文字のなんと多様なることか！\u003c/p\u003e\n\n\u003cp\u003eそうです、\u003cstrong\u003eコードポイントによって文字が固定長に表せるという考えすら幻想入りしたのです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eここに文字を固定長で表そうとする試みは完全敗北したのでした。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://yanok.net/2012/08/post-226.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字数制限 - yanok.net\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e本当に「人が見て認識する1文字」単位にするには、結合文字の扱いを考慮する必要があるわけです。なお、チベット文字の「1文字」がチベット語話者の立場から通常どのようにとらえられているのかは私には分かりません。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eちなみに、書記素の切れ目がどこに入るのか、は厳密に定義されているのでそこはご安心を。ただしUnicodeのバージョンが上がるごとに変わっていきます。うへぇ。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/ufcpp\" class=\"user-mention js-hovercard\" title=\"ufcpp\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"ufcpp\"\u003e@ufcpp\u003c/a\u003e 氏によるC#で書かれたUnicode 10.0相当の判定コードがこちらです。\u003cbr\u003e\n\u003ca href=\"https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeSplitter/Character.GetGraphemeBreakPropertyV10.cs\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeSplitter/Character.GetGraphemeBreakPropertyV10.cs\u003c/a\u003e\u003cbr\u003e\n2920行あります。これでも前は2万行近い switch ステートメントだったんだから短くなったほう。\u003cbr\u003e\nこのようにcodepointごとに種類判定(CR LF Control Extend SpacingMark Regional_Indicator L V T LV LVT Any)を行い、さらにそれに基づいて結合するかの判定を行うことになるようです。\u003cbr\u003e\n絶対自分で書きたくない。\u003c/p\u003e\n\n\u003cp\u003eなので普通は\u003ca href=\"http://site.icu-project.org/home\" rel=\"nofollow noopener\" target=\"_blank\"\u003eicu\u003c/a\u003eを使う(ところでWebassemblyで使おうと思ってコンパイルしようとしたらコンパイルできないの私だけ？)。\u003c/p\u003e\n\n\u003cp\u003eで、用途としてはマウスで選択するときとかbackspace/deleteキーで文字を消すときだとかにこれに基づいてやると最も自然だよね、ということになっています。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"突っ込まれる前に補足\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%AA%81%E3%81%A3%E8%BE%BC%E3%81%BE%E3%82%8C%E3%82%8B%E5%89%8D%E3%81%AB%E8%A3%9C%E8%B6%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e突っ込まれる前に補足\u003c/h2\u003e\n\n\u003cp\u003eべつにCJKを始めとする多くの技術者たちがこの問題を放置してきたわけではなく、日本もUnicodeには多大なる貢献をしています。\u003c/p\u003e\n\n\u003cp\u003eドコモをはじめ3社のことも悪く書いていますが彼らだって怠惰だったわけではない。とくにドコモについてはWebで見える範囲でも痕跡が見られます。auだってGoogleとの提携の中でなにかやっていたらしい話が聞こえている。SoftbankがAppleに乗り込んでいってiOSの絵文字の実装に関わったのも知ってる。\u003c/p\u003e\n\n\u003cp\u003eわかってる、わかってる。けどそれでもこの現状なんだよ、どうなっとるんじゃい、と思わずにはいられないんですよ。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"unicodeとucs\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%A8ucs\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeとUCS\u003c/h2\u003e\n\n\u003cp\u003eUnicodeというのがもともと業界団体が作ったものだったのに対してUCSはISOという国際標準を取り扱うところに起源を持ちます。\u003c/p\u003e\n\n\u003cp\u003eなのでISO的にはISO/IEC 10646は、Information technology — Universal Coded Character Set (UCS)というのが正しいです。\u003c/p\u003e\n\n\u003cp\u003eしかし実質的にUnicodeとUCSは同一であり、Unicodeで決めたものを再度ISO側で段階を経てISOから発行するという手順を踏んでいたりします。\u003c/p\u003e\n\n\u003cp\u003e面倒なので以下Unicodeと呼ぶことにします。UCSって言われてもなにそれって感じですしお寿司。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"参考資料\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考資料\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20389042/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第1回--日本の携帯電話キャリアが選んだ道 - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20389453/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第2回--Googleの開けてしまった箱の中味 - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20390204/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第3回--Unicode提案の限界とメリット - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20394318/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第4回--絵文字が引き起こしたUnicode-MLの“祭り” - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20398174/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第5回--絵文字と日本マンガの親密な関係 - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20407674/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第6回--Google・Apple提案とそのシナリオ - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20407951/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまった「パンドラの箱」第7回--そして舞台はダブリンから東京へ - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.slideshare.net/ogwata_1959/ss-7132351\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字が開いてしまったパンドラの箱\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20409186/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eグーグルが絵文字を世界標準に提案した理由--国際化エンジニアに聞くプロジェクトの舞台裏（前編） - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://japan.cnet.com/article/20409222/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eグーグルが絵文字を世界標準に提案した理由--国際化エンジニアに聞くプロジェクトの舞台裏（後編） - CNET Japan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.jstage.jst.go.jp/article/johokanri/50/2/50_2_67/_article/-char/ja/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e安岡 孝一, ケータイの絵文字と文字コード, 情報管理, 2007, 50 巻, 2 号, p. 67-73, 公開日 2007/05/01, Online ISSN 1347-1597, Print ISSN 0021-7298\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/googlei18n/emoji4unicode/issues/142\" rel=\"nofollow noopener\" target=\"_blank\"\u003eSuggestions for text fallback · Issue #142 · googlei18n/emoji4unicode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://groups.google.com/forum/#!topic/emoji4unicode/OCXIUjHBgc0\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDOCOMO's comment - Google グループ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sites.google.com/site/unicodesymbols/Home/emoji-symbols/proposal-text\" rel=\"nofollow noopener\" target=\"_blank\"\u003eProposal for Encoding Emoji Symbols - Unicode Symbols\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://moroshigeki.hateblo.jp/entry/20090208/p1\" rel=\"nofollow noopener\" target=\"_blank\"\u003e携帯電話の絵文字のUnicode登録をめぐる議論の動向 - moroshigeki's blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://moroshigeki.hateblo.jp/entry/20090426/p1\" rel=\"nofollow noopener\" target=\"_blank\"\u003eEmojiに対するアイルランド、ドイツからの修正案 - moroshigeki's blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://turingcomplete.fm/12\" rel=\"nofollow noopener\" target=\"_blank\"\u003e12. Unicode、絵文字、Androidのテキスト関連のハンドリング、無数の文字トリビア (のな)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hydrocul.github.io/wiki/blog/2015/1025-unicode-grapheme-clusters.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUnicodeのgrapheme cluster (書記素クラスタ) | hydroculのメモ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ufcpp.net/blog/2017/10/graphemesplitter/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e絵文字の連結と、書記素クラスター判定 | ++C++; // 未確認飛行 C ブログ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e提案文章へのリンクは割愛しています。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"参考資料2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%992\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考資料2\u003c/h2\u003e\n\n\u003cp\u003eこの記事の執筆のさいに参照はしていませんが、昔見ていいなと思っていた解説のうちひろい出せたものだけと、はてぶで紹介いただいたものなど。\u003c/p\u003e\n\n\u003cp\u003eほら貝：文字コード\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/code1.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字コード問題早わかり １ カタカナ篇\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/code2.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字コード問題早わかり ２ 漢字篇\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/code3.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字コード問題早わかり ３ 続・漢字篇\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/int/tojo.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字は無制限に増やすべきか？──棟上昭男情報規格調査会会長に聞く\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/show.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e小は大をかねるか？\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.horagai.com/www/moji/annai.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字コード案内──どこから読むか？\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e安岡 孝一, 日本における最新文字コード事情\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2001-04-15: \u003ca href=\"https://www.jstage.jst.go.jp/article/isciesci/45/9/45_KJ00001013064/_pdf/-char/ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003e安岡 孝一, 日本における最新文字コード事情(前編), システム／制御／情報, 2001, 45 巻, 9 号, p. 528-535, 公開日 2017/04/15, Online ISSN 2424-1806, Print ISSN 0916-1600\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2001-12-15: \u003ca href=\"https://www.jstage.jst.go.jp/article/isciesci/45/12/45_KJ00001012904/_pdf/-char/ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003e安岡 孝一, 日本における最新文字コード事情(後編), システム／制御／情報, 2001, 45 巻, 12 号, p. 687-694, 公開日 2017/04/15, Online ISSN 2424-1806, Print ISSN 0916-1600\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e【ネット時代の大きな課題、文字コード・進化の過程】シリーズ\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2005-08-16: \u003ca href=\"http://web.archive.org/web/20060221044421/http://news.searchina.ne.jp/disp.cgi?y=2005\u0026amp;d=0816\u0026amp;f=column_0816_001.shtml\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「漢字の国」にみる、電子機器の文字問題（１）\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-09-01: \u003ca href=\"http://web.archive.org/web/20060115172043/http://news.searchina.ne.jp:80/disp.cgi?y=2005\u0026amp;d=0901\u0026amp;f=column_0901_003.shtml\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「漢字の国」にみる、電子機器の文字問題（２）\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-09-14: \u003ca href=\"http://web.archive.org/web/20051214122423/http://news.searchina.ne.jp:80/disp.cgi?y=2005\u0026amp;d=0914\u0026amp;f=column_0914_004.shtml\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「漢字の国」にみる、電子機器の文字問題（３）\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePDF　千夜一夜 PDFなんでも情報ブログ by アンテナハウス株式会社 より\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2005-12-12: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/12/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（1) – 言語と文字\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-13: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/13/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（2) – 言語と文字　続き\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-14: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/14/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（3) – 言語と文字 その3\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-15: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/15/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（4) – 文字の取り扱い\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-17: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/17/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（5) – テキストを構成する文字\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-18: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/18/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（6) – 地域別文字規格\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-20: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/20/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（7) – JISの文字規格\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-22: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/22/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（8) – JIS X0212, X 0213\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-23: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/23/#000095\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（9) – 中国の文字規格\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-24: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/pdf10_unicode.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（10) – Unicodeの誕生\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-25: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/25/#000097\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（11) – UnicodeとISO 10646\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005-12-26: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2005/12/26/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（12) – Unicode仕様の文字\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-02: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/02/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（13) – Unicode文字の検討\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-03: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/03/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（14) – CJK漢字統合問題\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-04: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/04/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（15) – CJK統合漢字拡張\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-05: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/05/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（16) –漢字統合の破綻\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-06: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/06/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（17) – 統合漢字の理論\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-07: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/07/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e漢字統合の3次元モデルについてKen Lundeの誤り\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-09: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/09/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（18) –Unicodeの漢字関連ブロック\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-10: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/10/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（19） – 漢字統合問題再検討\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-11: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/11/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（20) – 字体と字形\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-12: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/12/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（21) – 大文字セット\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-13: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/13/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（22) – グリフとグリフセット\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-15: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/15/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (23) – Adobe-Japan1\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-16: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/16/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (24) – Adobe-GB1, Adobe-CNS1, Adobe-Korea1\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-17: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/17/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (25) – CMapで文字コードからCIDへ変換\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-18: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/18/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字（26) – ハングルの扱い\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-19: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/19/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (27) – アラビア文字の扱い\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-20: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/20/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (28) – アラビア文字のプログラム処理\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-21: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/21/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (29) – アラビア文字表示形\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-22: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/22/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (30) – アラビア文字Harakatの結合処理\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-23: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/23/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (31) – リガチャ\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-24: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/24/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (32) – 文字コードと情報交換を考える\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-26: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/26/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (33) – ラテンアルファベット\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-27: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/27/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (34) – Unicodeの結合文字\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-28: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/28/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (35) – 文字の合成方法\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-29: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/29/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (36) – 文字の合成方法（続き）\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-01-30: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/01/30/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (37) – 結合文字列の正規合成\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-01: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/01/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (38) – Unicode標準形NFCの実装\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-02: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/02/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (39) – Windowsへ表示とPDF作成の相違\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-03: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/03/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (40) – Unicode標準形式NFCの問題点\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-07: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/07/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (41) – Unicode標準形式NFCの問題点（続き)\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-09: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/09/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (42) – ハングル音節文字の合成\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006-02-11: \u003ca href=\"https://blog.antenna.co.jp/PDFTool/archives/2006/02/11/\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePDFと文字 (43) – ラテンアルファベットのリガチャ\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eその他\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2012-08-16: \u003ca href=\"http://yanok.net/2012/08/post-226.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e文字数制限 - yanok.net\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2016-11-07: \u003ca href=\"https://www.buildinsider.net/language/csharpunicode/01\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUnicodeとは？ その歴史と進化、開発者向け基礎知識 - Build Insider\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2016-11-14: \u003ca href=\"https://www.buildinsider.net/language/csharpunicode/02\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUnicodeと、C#での文字列の扱い - Build Insider\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2017-11-14: \u003ca href=\"https://qiita.com/nonanona/items/b148c212ba7c24942e93\" id=\"reference-29ae64c9e97966ccbe37\"\u003e絵文字を支える技術の紹介\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2018-04-28: \u003ca href=\"https://heppoko.hatenadiary.jp/entry/2018/04/28/184559\" rel=\"nofollow noopener\" target=\"_blank\"\u003eㇹ゚ン゚'ㇳ̃ヴ゙ニ゙コ゚ヮヰ文̂字̠コ゚−ト゚ノ゙ㇵナ゚ㇱ(現在に至るまでの文字コードの軌跡と簡単な使い方について) - へっぽこびんぼう野郎のnewbie日記\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cとunicode\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E3%81%A8unicode\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++とUnicode\u003c/h1\u003e\n\n\u003cp\u003eいやぁ長かったですがここまでがまえがきです(えっ\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ccにおける標準化以前の文字の扱い\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cc%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%A8%99%E6%BA%96%E5%8C%96%E4%BB%A5%E5%89%8D%E3%81%AE%E6%96%87%E5%AD%97%E3%81%AE%E6%89%B1%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC/C++における標準化以前の文字の扱い\u003c/h2\u003e\n\n\u003cp\u003eそもそもC/C++には組み込み型としてとくに文字を表すための型があるわけではありません。じゃあ\u003ccode\u003echar\u003c/code\u003eはどうなんだということですが、あれは断じて文字を表すための型ではありません。\u003c/p\u003e\n\n\u003cp\u003eだいたいC標準では文字を受け取る引数は\u003ccode\u003eint\u003c/code\u003e型だったりしますし、一方C++では\u003ccode\u003echar\u003c/code\u003eだったり極めて乱暴でいい加減な取り扱いです。\u003cdel\u003eCを作り上げた連中の脳みそを解剖してみたい\u003c/del\u003e。\u003c/p\u003e\n\n\u003cp\u003eなぜか？ASCIIこそが文字なのであってそれ以外は2流市民だからです。平家にあらずんば人にあらず(正確にはこの一門にあらざらん者は、みな人非人たるべし)ってやつです。つまり文字とは8bitで表されるという認識なのです。\u003c/p\u003e\n\n\u003cp\u003eC++標準化委員会のメンバーの認識も概ねそこから揺らぎません。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"日本のcへの影響力の低下\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%97%A5%E6%9C%AC%E3%81%AEc%E3%81%B8%E3%81%AE%E5%BD%B1%E9%9F%BF%E5%8A%9B%E3%81%AE%E4%BD%8E%E4%B8%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e日本のC++への影響力の低下\u003c/h2\u003e\n\n\u003cp\u003eC++の規格書はC++標準化委員会(WG21)で議論されて規格化、ISOから発行されます。\u003c/p\u003e\n\n\u003cp\u003eさて、ISOの標準化プロセスには国を代表して標準化委員会の議論に関わる各国の支部があり、National Body(NB)コメントを受け付けるフェーズがあるのだそうです。\u003c/p\u003e\n\n\u003cp\u003e日本にも支部があり、C++03の頃までは規格書の翻訳をしてJISとして発行する作業が行われたのだそうですが、C++11以降そういう作業は行われていないのだそうです。\u003c/p\u003e\n\n\u003cp\u003e江添亮氏の古いブログを引っ張ってくると\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2013/10/c.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 日本語のC++参考書の行く末\u003c/a\u003e\u003cbr\u003e\n2013-10-28\u003c/p\u003e\n\n\u003cp\u003eそもそも、英語で書かれているC++の標準規格はどうなのか。金はどこから出るのか。C++の標準規格は、C++標準化委員会で議論され、検証され、文面案を書き、投票されて、ドラフトに入り、最終的に規格として制定される。どこから金が出ているのか。C++標準化委員会のメンバーは、個人で参加している者もいるが、大半はスポンサーがいる。スポンサーがC++の規格や、教育や、コンパイラーやライブラリの実装などに長けた人間に金を出して、C++の標準規格の作業に従事させているのだ。そうすることによって、スポンサーは、C++の規格を、スポンサーにとって都合がいいように、影響を与えることができる。\u003c/p\u003e\n\n\u003cp\u003e日本では、今、このスポンサーが存在しない。かつては存在したのだ。\u003c/p\u003e\n\n\u003cp\u003eC++標準化員会は、私もいまいち仕組みがよく分かっていないのだが、私としては、C++ Working Groupという単位の印象が強い。C++WGは、主要な各国に支部があり、日本にも支部がある。私もそこに、スポンサーなしの個人として籍をおいている。\u003c/p\u003e\n\n\u003cp\u003e最初のC++の正式な規格、C++98は、1998年に制定された。当時、日本では、C++の標準規格の日本語訳がほしいと考えるスポンサーがたくさんいた。そのため、スポンサーに雇われたC++WGのメンバー達は、作業を分担してC++の標準規格の全文を翻訳し、同等のJIS規格として制定した。\u003c/p\u003e\n\n\u003cp\u003eしかし、いまC++11の規格書の日本語訳は存在しない。一体どうなっているのか。C++標準化委員会は何をしているのか。これは、スポンサーがいないためである。\u003c/p\u003e\n\n\u003cp\u003eこれは私の誤解と偏見で語るのだが、どうもC++WGの日本支部というのは、その前身が、EC++団体の人間だったらしいのだ。 \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e先程の絵文字は多くの日本人や日本向けにサービスを行うに当たり十分に理解している人たちの支援があったわけですが、C++に関しては日本からのNBコメントは期待できない状況にあり、他国に任せっきり、という状態です。中国/韓国/ベトナムにC++Working Groupってあるのかな・・・？\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"c98とucs\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c98%E3%81%A8ucs\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++98とUCS\u003c/h2\u003e\n\n\u003cp\u003eこの頃はまだUnicodeがどうなっていくのか誰もわからない状況。しかも固定長に文字が収まるという夢をみんな見ていた。\u003c/p\u003e\n\n\u003cp\u003e何れにせよどうなるかわからない以上実装依存とするより他になく、\u003ccode\u003ewchar_t\u003c/code\u003e型が導入されたものの、特にどのようなエンコードを利用するかは規定せず、\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ewchar_t型のひとつのオブジェクトは、実装がサポートするロケールの文字セットの任意の一文字を表現できる。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eということにした。これが幻想であったことに気がつくのはもう少し後の話である。\u003c/p\u003e\n\n\u003cp\u003eこのように\u003ccode\u003ewchar_t\u003c/code\u003eは実装依存のエンコードが用いられる。じつのところUnicodeのいずれかのエンコードであるとすら定まっていない。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e__STDC_ISO_10646__\u003c/code\u003eマクロが定義されているときのみ、\u003ccode\u003ewchar_t\u003c/code\u003eはUnicodeのいずれかのエンコードを用いていることが保証される。\u003c/p\u003e\n\n\u003cp\u003eそしてC++はISO/IEC 10646-1:1993を参照している。ちなみにこの頃は\u003ccode\u003eUTF-8\u003c/code\u003e/\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eというものはなく\u003ccode\u003eUCS-2\u003c/code\u003e/\u003ccode\u003eUCS-4\u003c/code\u003eとか呼んでいた。\u003c/p\u003e\n\n\u003cp\u003eなお恐ろしいことに規格書的にはC++17が出ている今なお1993年のものを参照し続けている。\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0417R0: ISO 10646:2014\u003c/a\u003eという2014年のを見るように変えようぜっていう提案も出たのだが、通った気配がない。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"__stdc_iso_10646__\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#__stdc_iso_10646__\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e__STDC_ISO_10646__\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eこのマクロは先に\u003ccode\u003ewchar_t\u003c/code\u003eがUnicodeのいずれかのエンコードを用いていることを保証すると同時に、実装がいつのISO/IEC 10646-1規格を参照しているかを示している。値は\u003ccode\u003eyyyymmL\u003c/code\u003e(例:199712L)のようになっている。\u003c/p\u003e\n\n\u003cp\u003eちなみに\u003ca href=\"https://wandbox.org/permlink/8i9A66SyMbgUTT7K\" rel=\"nofollow noopener\" target=\"_blank\"\u003e皆様おなじみWandboxのclang7.0.0で値を調べたところ\u003c/a\u003e、\u003ccode\u003e201505\u003c/code\u003eになった。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"劣等生の地位に置かれたwchar_t\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8A%A3%E7%AD%89%E7%94%9F%E3%81%AE%E5%9C%B0%E4%BD%8D%E3%81%AB%E7%BD%AE%E3%81%8B%E3%82%8C%E3%81%9Fwchar_t\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e劣等生の地位に置かれた\u003ccode\u003ewchar_t\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eそもそも\u003ccode\u003echar\u003c/code\u003eすらどんなエンコードであるかの保証がないにもかかわらず、そんなことは都合よく忘れ、\u003ccode\u003ewchar_t\u003c/code\u003eは実装依存でポータブルではないなどとのたまう輩やはては\u003ccode\u003ewchar_t\u003c/code\u003eはMicrosoftの独自拡張だ、などと言い出す輩が現れた。\u003c/p\u003e\n\n\u003cp\u003e標準規格上だけ見ても劣等生の位置に置かれた。\u003c/p\u003e\n\n\u003cp\u003elocaleというやつがある。役割はisspace, isprint, iscntrl, isupper, islower, isalpha, isdigit, ispunct, isxdigit, isalnum, isgraphの分類と、文字コードの変換である。表面上は\u003ccode\u003echarT\u003c/code\u003eという任意の文字型に対して扱えるように見える。しかしそれは完全な誤りであり、設計をよく見れば見るほど\u003ccode\u003echar\u003c/code\u003e以外を想定していない。\u003c/p\u003e\n\n\u003cp\u003eもちろん文字コードの変換はぶっ壊れており、その他は無駄に役に立たないロケールを見に行く分だけパフォーマンスを悪化させるゴミである。まともなC++erなら\u003ccode\u003eisdigit\u003c/code\u003eなど使うことはできないはずであることは経験則で知っているはずだ。\u003c/p\u003e\n\n\u003cp\u003e最悪なことにlocaleは文字列から数値変換を担うもっとも基底に位置する関数である\u003ccode\u003estrtol\u003c/code\u003e系関数にも影響を与える。つまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようなコードですら影響下にある。完全にぶっ壊れたゴミにもかかわらずそこかしこに顔をだすんだから始末に負えない。\u003c/p\u003e\n\n\u003cp\u003eなお極めて残念なことにC++17が出ている現在でも状況は悪化の一途をたどっている。一刻も早くdeprecatedにしなければならない。\u003c/p\u003e\n\n\u003cp\u003eその他の例を見てみよう。file I/Oではファイル名を指定する機会が多い。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efstream\u003c/span\u003e \u003cspan class=\"nf\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"path/to/file\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eしかし、このpath指定にはなんと\u003ccode\u003echar\u003c/code\u003eしか用いることができない。Unicodeに関してだけは我々の救世主であるMicrosoftが提供するC++の実装では、\u003ccode\u003ewchar_t\u003c/code\u003eも受け付けるように独自拡張がなされている。\u003c/p\u003e\n\n\u003cp\u003eC++17で追加されたfilesystemライブラリによって、ようやくどうにかUnicodeなpathを取り扱う手段が提供された。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"崩壊したwchar_t型\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%B4%A9%E5%A3%8A%E3%81%97%E3%81%9Fwchar_t%E5%9E%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e崩壊した\u003ccode\u003ewchar_t\u003c/code\u003e型\u003c/h2\u003e\n\n\u003cp\u003e先にも述べたように、\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ewchar_t型のひとつのオブジェクトは、実装がサポートするロケールの文字セットの任意の一文字を表現できる。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eという形で\u003ccode\u003ewchar_t\u003c/code\u003e型は定義された。しかし現実にはどうなったか。\u003c/p\u003e\n\n\u003cp\u003eMicrosoft Windows環境においては\u003ccode\u003ewchar_t\u003c/code\u003eはUTF-16をつかう、という事になった。これはWin32APIによるところが大きい。先に述べた\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMicrosoftがUnicodeといえば、もれなくUTF-16を指す。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eというのはそういうことだ。\u003c/p\u003e\n\n\u003cp\u003eその他のLinuxとかとかではUTF-32だ、という事が多い。これはコードポイントと一致するエンコードだからだろうか。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://naruse.hateblo.jp/entry/2018/12/24/013446\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar8_tによせて - なるせにっき\u003c/a\u003e\u003cbr\u003e\n(前略)元々そこに詰められていたのはEUCの類だったわけです。\u003c/p\u003e\n\n\u003cp\u003eという経緯が分かると、なぜC/C++標準で執拗にUnicode決めうち仕様を避けているのかが分かってくるのではないでしょうか。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eごめんよ、EUC、普通に脳内から存在を抹消していたでござる。\u003c/p\u003e\n\n\u003cp\u003eいずれにせよ結合文字列などがある以上、すでに任意の一文字を固定長で表すことはできず、ここに\u003ccode\u003ewchar_t\u003c/code\u003e型は崩壊した。\u003c/p\u003e\n\n\u003cp\u003eまた\u003ccode\u003ewchar_t\u003c/code\u003e型の大きさが規定されなかったため、portableに文字をやり取りする型として利用できなかったという事情もある。\u003c/p\u003e\n\n\u003cp\u003eそんな状況からか、mingw環境ではまともに\u003ccode\u003ewchar_t\u003c/code\u003e型が使えない状況が続いている。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"utf16_t型の提案\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#utf16_t%E5%9E%8B%E3%81%AE%E6%8F%90%E6%A1%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eutf16_t\u003c/code\u003e型の提案\u003c/h2\u003e\n\n\u003cp\u003e2001年に実はC/C++に対してUnicode側から\u003ccode\u003eutf16_t\u003c/code\u003e型を追加しようぜという提案があったことを執筆時に初めて知った。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.unicode.org/%7Easmus/stdc-utf-16.txt\" rel=\"nofollow noopener\" target=\"_blank\"\u003eProposal for a C/C++ language extension to support portable UTF-16\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれだ。提案内容をまとめると\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUTF-16を保証する型として\u003ccode\u003eutf16_t\u003c/code\u003e型を追加する\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eutf16_t\u003c/code\u003e型な文字列リテラルを作るためにprefixとして\u003ccode\u003eu\u003c/code\u003eを追加する\u003c/li\u003e\n\u003cli\u003eエンディアン(バイトオーダー)は処理系に依存する\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eというものだ。UTF16だけに絞っている理由は、メモリー効率が\u003ccode\u003eUTF-8\u003c/code\u003e/\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eを比較したときに\u003ccode\u003eUTF-16\u003c/code\u003eがもっとも良くなるからだ。未だにメモリーは貴重な時代であり、またキャッシュミスを起こしにくくするという意図もあったらしい。\u003c/p\u003e\n\n\u003cp\u003eと同時にすでに当時、WindowsやJava、データベースが\u003ccode\u003eUTF-16\u003c/code\u003eに対応しており、\u003ccode\u003eUTF-16\u003c/code\u003eを保証する型が必要やろ、という主張だった。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"boostlocale事件\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#boostlocale%E4%BA%8B%E4%BB%B6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eBoost.locale事件\u003c/h2\u003e\n\n\u003cp\u003eUnicodeに対して理解を示す人が多く現れる一方で、誤った情報に惑わされたり、旧来の英語第一主義、8bit文字主義に囚われた人も数多く存在した。ここでBoostというC++標準のSTLの実験場とも言われる場で起こったささやかな事件を紹介するとしよう。\u003c/p\u003e\n\n\u003cp\u003e2011年にBoost.localeが採択された。しかしその内容に皆さんご存知の江添亮氏が異議を唱えた。\u003c/p\u003e\n\n\u003cp\u003e問題は何だったか。Boostという場に持ち込まれるようなライブラリにもかかわらず、英語第一主義でその他の言語を2級市民扱いしていたこと、おおよそ世界に星のように存在する言語を取り扱うに適さないインターフェース、謎のUTF-16嫌悪、狂信的\u003ccode\u003echar\u003c/code\u003e型信仰など問題のかたまりであった。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estd::locale\u003c/code\u003eがぶっ壊れているのはもう諦めたがBoostよ、お前もか。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2011-04-19: \u003ca href=\"https://cpplover.blogspot.com/2011/04/boostlocale.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Boost.Localeがクソすぎる\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-04-24: \u003ca href=\"https://cpplover.blogspot.com/2011/04/boostlocale_24.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Boost.Localeが採択された\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-04-27: \u003ca href=\"https://cpplover.blogspot.com/2011/04/boostlocale_27.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Boost.localeは何の冗談だ\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-04-28: \u003ca href=\"https://cpplover.blogspot.com/2011/04/japanese-programmers-dont-know-english.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Japanese programmers don't know English\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-04-28: \u003ca href=\"https://cpplover.blogspot.com/2011/04/translation-is-impossible.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Translation is impossible\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-05-03: \u003ca href=\"https://cpplover.blogspot.com/2011/05/how-not-to-localize-your-software.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: How Not To Localize Your Software\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2011-05-18: \u003ca href=\"https://cpplover.blogspot.com/2011/05/sorting-it-all-out.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: Sorting it all Out: 英語を強制させないことだってできるさ。あるいはアホになるか。どっちでもいいけど\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"c11とunicode\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c11%E3%81%A8unicode\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++11とUnicode\u003c/h2\u003e\n\n\u003cp\u003eさて、当初C++0xと呼ばれていたC++03の次の規格は議論が長引き、0xのxは実は16進数なんだとかいう皮肉が飛び出し、しまいにはC++1xと呼ばれ、ようやくC++11が発行された。\u003c/p\u003e\n\n\u003cp\u003eその詳細はすでにご存知の人が大半だろうが、改めて見ていこう。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"char16_tchar32_t型の追加\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char16_tchar32_t%E5%9E%8B%E3%81%AE%E8%BF%BD%E5%8A%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型の追加\u003c/h3\u003e\n\n\u003cp\u003eref: \u003ca href=\"https://cpprefjp.github.io/lang/cpp11/char16_32.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar16_tとchar32_t - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e16bitと32bitの文字を表すための型として\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型が追加された。\u003c/p\u003e\n\n\u003cp\u003eここで大切なのは\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eの保証がないことである。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型な文字列リテラルを作るために文字列リテラルのprefixとして\u003ccode\u003eu\u003c/code\u003e/\u003ccode\u003eU\u003c/code\u003eが追加された。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"s\"\u003eu\"ありきたり\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//__STDC_UTF_16__が定義されていればUTF-16でさもなくば実装依存のエンコード\u003c/span\u003e\n\u003cspan class=\"s\"\u003eU\"ありきたり\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//__STDC_UTF_32__が定義されていればUTF-32でさもなくば実装依存のエンコード\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同様に文字リテラルに対してもprefixが追加された。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e__STDC_UTF_16__\u003c/code\u003e/\u003ccode\u003e__STDC_UTF_32__\u003c/code\u003eマクロが定義されているときのみ\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eの保証があり、さもなくば実装依存である。あちこちの解説が間違えまくっているのだが、常に\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eの保証があるってわけではない。\u003c/p\u003e\n\n\u003cp\u003eどうやらC/C++は同じくISOから出ているUnicodeに意地でも依存したくないらしい。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"utf-8文字列リテラル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#utf-8%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUTF-8文字列リテラル\u003c/h3\u003e\n\n\u003cp\u003eref:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUTF-8文字列リテラル - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUTF-8文字リテラル - cpprefjp C++日本語リファレンス\u003c/a\u003e(C++17)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e同じくISOから出ているUnicodeに意地でも依存したくないのかと思いきや、もう片方では手のひらを返す内容が追加された。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"s\"\u003eu8\"ありきたり\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//確実にUTF-8でエンコードされる\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eu8\u003c/code\u003eを文字列のprefixにつけると確実にUTF-8になる。嘘かと思った読者のためにわざわざC++11の規格書を引っ張ってこよう。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e§ 2.14.5 String literals [lex.string]\u003c/p\u003e\n\n\u003cp\u003e7 A string literal that begins with u8, such as u8\"asdf\", is a UTF-8 string literal and is initialized with the given characters as encoded in UTF-8.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eほーら、まじでUTF-8って明確に書いてある。何たる手のひら返し！\u003c/p\u003e\n\n\u003cp\u003eちなみに文字リテラルに対するprefix\u003ccode\u003eu8\u003c/code\u003eはC++17まで先送りされた。意味がわからない。\u003c/p\u003e\n\n\u003cp\u003eさて、ここで恐ろしい話として、\u003ccode\u003eu8\u003c/code\u003eprefixが付いた文字列リテラルの型はprefixなしに等しい。つまり\u003ccode\u003echar8_t\u003c/code\u003eではなく\u003ccode\u003echar\u003c/code\u003eなのである。これについては後述する。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"stdwstring_convertstdcodecvt_utf8stdcodecvt_utf8_utf16\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stdwstring_convertstdcodecvt_utf8stdcodecvt_utf8_utf16\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003estd::wstring_convert\u003c/code\u003e/\u003ccode\u003estd::codecvt_utf8\u003c/code\u003e/\u003ccode\u003estd::codecvt_utf8_utf16\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eref:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/locale/wstring_convert.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ewstring_convert - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ecodecvt_utf8 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ecodecvt_utf8_utf16 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e文字コードの変換も標準に追加された。先に言っておくと仕様がガバのプーさんでセキュリティ的リスクまであるという事がわかりC++17でdeprecatedになった。\u003c/p\u003e\n\n\u003cp\u003eこいつはUnicode間の変換をするもので、大きく2通りの利用の仕方が存在した。\u003c/p\u003e\n\n\u003cp\u003e１つ目は\u003ccode\u003estd::wstring_convert\u003c/code\u003eを利用した\u003ccode\u003ebasic_string\u003c/code\u003eの変換で、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewstring_convert\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecodecvt_utf8\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar32_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar32_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// UCS-4/UTF-32からUTF-8に変換\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eu32string\u003c/span\u003e \u003cspan class=\"n\"\u003eu32str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eU\"\\U0001F359\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eu8str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu32str\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// UTF-8からUCS-4/UTF-32に変換\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eu32string\u003c/span\u003e \u003cspan class=\"n\"\u003erestored\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu8str\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewstring_convert\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecodecvt_utf8_utf16\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// UTF-16からUTF-8に変換\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eu16string\u003c/span\u003e \u003cspan class=\"n\"\u003eu16str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003eu\"\\U0001F359\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eu8str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu16str\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// UTF-8からUTF-16に変換\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eu16string\u003c/span\u003e \u003cspan class=\"n\"\u003erestored\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econverter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eu8str\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように利用した。\u003c/p\u003e\n\n\u003cp\u003eもう一つはstreamに対して\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ewifstream\u003c/span\u003e \u003cspan class=\"nf\"\u003eifs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"UTF-8N.txt\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eifs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eimbue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocale\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocale\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003ecodecvt_utf8\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように渡す利用法である。ちなみにこの場合\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;fstream\u0026gt;\n#include \u0026lt;codecvt\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewifstream\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"arikitari_na_text.txt\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"error.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//Linuxではつかうcvt違うから直してくれ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eimbue\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003elocale\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003elocale\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecodecvt_utf8_utf16\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x10ffff\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econsume_header\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//なんか\u003c/span\u003e\n\u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにするとBOM skipができた。\u003c/p\u003e\n\n\u003cp\u003eref: \u003ca href=\"https://qiita.com/yumetodo/items/3744afa94ab029f4e1d5\" id=\"reference-fff415988ff07de1dcc5\"\u003eC++のstreamでbom skipする方法をまた忘れないうちに書き留める\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eただし最初に述べたようにC++17でdeprecatedになりました。\u003cbr\u003e\n\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0618R0 Deprecating \u003ccode\u003e\u0026lt;codecvt\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e理由を意訳すると\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。\u003c/li\u003e\n\u003cli\u003e試しに使おうとしたけどあまりにも複雑過ぎていっちょんわからんかった\u003c/li\u003e\n\u003cli\u003eまともに実装されてない。libstdc++は最近(注:2017年3月からみて)やっと実装したくらいだし誰も使ってねーだろ(注:MSVCもまともに実装されたのはVS2015からという印象)\u003c/li\u003e\n\u003cli\u003eUnicodeじゃないエンコード(Shift-JISとかBig5とかな)はどんどん利用されなくなっているから(そいつらは無視していいのにもかかわらずそいつらの対応を視野に入れているせいで無駄に複雑で安全ではないゴミのような)\u003ccode\u003ecodecvt\u003c/code\u003eはさっさと非推奨にしろ。このクソが歴史的負債になる前に。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eといった感じだった。\u003c/p\u003e\n\n\u003cp\u003e付け加えておくとパフォーマンス的にもクソで、\u003cbr\u003e\n\u003ca href=\"https://qiita.com/AsladaGSX/items/af50066dbbfd59991af9\" id=\"reference-b589cfed375194d26e43\"\u003eutf8 のファイルの読み込み\u003c/a\u003e\u003cbr\u003e\n見限って自力で変換を書いて\u003ccode\u003estreambuf\u003c/code\u003e化する人まで現れた。\u003c/p\u003e\n\n\u003cp\u003edeprecatedになった第一報を聞いたときは驚いたけど、\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://t.co/Zercxns9Jz\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/Zercxns9Jz\u003c/a\u003e\u003cbr\u003eP0618R0 Deprecate \u0026lt;codecvt\u0026gt;\u003cbr\u003e\u0026gt;Users should use dedicated text-processing libraries instead.\u003cbr\u003eえっ、つまりC++標準は文字コード変換を放棄した？\u003c/p\u003e— yumetodo-鳥の氷河から逃げる (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/848908997637816321?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003eApril 3, 2017\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eよくよく考えればdeprecatedになってくれてよかった。\u003c/p\u003e\n\n\u003cp\u003eそんなわけでC++17現在C++標準はUnicode同士の変換を提供していなくて、各自適当なライブラリを使えとのこと。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"参考資料-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考資料\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e2010-04-10: \u003ca href=\"https://cpplover.blogspot.com/2010/04/c0xunicodeucs.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++0x本：UnicodeとUCSについて\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2010-05-25: \u003ca href=\"https://cpplover.blogspot.com/2010/05/blog-post_25.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 最近の若い者は・・・\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2010-06-10: \u003ca href=\"https://cpplover.blogspot.com/2010/06/clocale.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++のlocaleがクソすぎる\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2013-10-20: \u003ca href=\"https://cpplover.blogspot.com/2013/10/2013-10-post-chicago-mailing.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 2013-10 post-Chicago mailingの簡易レビュー\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2013-10-28: \u003ca href=\"https://cpplover.blogspot.com/2013/10/c.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 日本語のC++参考書の行く末\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2014-03-25: \u003ca href=\"https://cpplover.blogspot.com/2014/03/2014-02-post-issaquah-n3900-3909.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 2014-02-post-Issaquahのレビュー: N3900-3909\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2016-01-20: \u003ca href=\"https://cpplover.blogspot.com/2016/01/c-p0160r0-p0172r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の文書のレビュー: P0160R0-P0172R0\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2016-09-12: \u003ca href=\"https://cpplover.blogspot.com/2016/09/c-p0411r0-p0417r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の文書: P0411R0-P0417R0\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2017-03-02: \u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0618R0 Deprecating \u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ecodecvt_utf8 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ecodecvt_utf8_utf16 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/locale/wstring_convert.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ewstring_convert - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/AsladaGSX/items/af50066dbbfd59991af9\"\u003eutf8 のファイルの読み込み\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"unicodeとcのこれから\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%A8c%E3%81%AE%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeとC++のこれから\u003c/h1\u003e\n\n\u003cp\u003eここまでUnicodeとC++が、人類がそれにどう向き合ってきたかを見てきた。\u003c/p\u003e\n\n\u003cp\u003eではUnicodeとC++のこれからについて見ていこう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"unicodeの各エンコードを保証する型がなぜ必要か\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode%E3%81%AE%E5%90%84%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E4%BF%9D%E8%A8%BC%E3%81%99%E3%82%8B%E5%9E%8B%E3%81%8C%E3%81%AA%E3%81%9C%E5%BF%85%E8%A6%81%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicodeの各エンコードを保証する型がなぜ必要か\u003c/h2\u003e\n\n\u003cp\u003eUnicodeではない文字エンコードの利用が減ってきている現代に置いて、UnicodeをC++がまともにサポートすることは極めて重要である。\u003c/p\u003e\n\n\u003cp\u003eUnicodeの普及率は凄まじい。例えばUTF-8は全Webサイトのうち90%を超える割合で利用されている。\u003c/p\u003e\n\n\u003cp\u003eもはやUnicodeは全世界のありとあらゆる文字セットの全体集合としての役割を果たしている。ローカライズの文脈でもしUnicodeではない文字エンコードを利用するとしても実装コスト的にそれはUnicodeとの変換で扱うことを検討すべき時代なのだ。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ewchar_t\u003c/code\u003eは文字が固定長で表せるという幻想のもとに設計された。今となっては時代遅れである。\u003c/p\u003e\n\n\u003cp\u003eC++11で\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型が追加された一方で\u003ccode\u003echar8_t\u003c/code\u003e型が入らなかった。\u003cbr\u003e\n明らかにその他大勢のエンコードとUTF-8は区別されるべきであるのにもかかわらず\u003ccode\u003echar\u003c/code\u003eに悪魔合体させられている。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eについても問題があり、それぞれ\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eを必ずしも保証しない。\u003c/p\u003e\n\n\u003cp\u003eしかも面白いことになぜか\u003ccode\u003eu8\u003c/code\u003eprefixの文字列リテラルだけはUTF-8が保証された。\u003c/p\u003e\n\n\u003cp\u003eUnicodeにC++がまともに向き合うには\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUTF-8を保証する\u003ccode\u003echar8_t\u003c/code\u003e型の追加\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eは\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eを保証する\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが最低限必要不可欠である。core言語側でこの対応が入りさえすればあとはlibraryが腐ってても各々作ることでデータのやり取りが可能だ。逆にこれが入らない限りユーザが勝手気ままにこれに相当する型をつくり、互換のない地獄がさらに続く。\u003c/p\u003e\n\n\u003cp\u003e標準ライブラリの中ですら、すでに弊害が出ている。\u003c/p\u003e\n\n\u003cp\u003eC++17ではfilesystemライブラリが追加された。パスを表すクラスとして\u003ccode\u003epath\u003c/code\u003eというクラスが追加された。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efilesystem\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// ネイティブナローエンコード\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003ep1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003e\"/dev/null\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// ネイティブワイドエンコード\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"/dev/null\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// UTF-16エンコード\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003ep3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003eu\"/dev/null\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// UTF-32エンコード\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003ep4\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003eU\"/dev/null\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまず面白いことに\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型は\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eの保証がないにもかかわらず、filesystem libraryの文面によれば\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eだとしている。つまり\u003ccode\u003e__STDC_UTF_16__\u003c/code\u003e/\u003ccode\u003e__STDC_UTF_32__\u003c/code\u003eマクロが定義されていない環境では壊れてしまう。\u003c/p\u003e\n\n\u003cp\u003eさらに大きな問題がある。\u003ccode\u003eu8\u003c/code\u003eprefixの付いた文字列リテラルはUTF-8でエンコードされる保証が存在するが、これを直接\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efilesystem\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// ネイティブナローエンコードとして解釈される\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003eu8\"ファイル名\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように渡すと、ネイティブナローエンコードとして解釈されるため、たまたま偶然ネイティブナローエンコードがUTF-8でない限り、壊れてしまう。\u003c/p\u003e\n\n\u003cp\u003e流石にまずいと考えたのか\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efilesystem\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// UTF-8エンコードとして解釈される\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 実装の使う文字エンコードに変換される\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eu8path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003eu8\"ファイル名\"\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように、\u003ccode\u003epath\u003c/code\u003eクラスを生成する\u003ccode\u003eu8path\u003c/code\u003e関数がある。まったく直感的ではない。もし\u003ccode\u003echar8_t\u003c/code\u003eがあれば単にコンストラクタをoverloadできたであろうに。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"char8_t型反対派の主張\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char8_t%E5%9E%8B%E5%8F%8D%E5%AF%BE%E6%B4%BE%E3%81%AE%E4%B8%BB%E5%BC%B5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar8_t\u003c/code\u003e型反対派の主張\u003c/h2\u003e\n\n\u003cp\u003eC++11以前、\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003e型が提案されていたころ、\u003ccode\u003echar8_t\u003c/code\u003e型に触れられることはなかった。最初から提案すらされていなかったのだ。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2016/09/c-p0370r1-p0379r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の文書: P0370R1-P0379R0\u003c/a\u003e\u003cbr\u003e\nC++11のときにchar8_tが必要だと訴えたら、charは古典的にバイト列を表現する型なので十分だ。char型以外の型があるのは混乱する。などと理解のないUnicodeの世界に生きていない名だたる委員達から散々に批判された。その委員達も、今では、「やっぱりchar8_tがないのは失敗だったなぁ」とぼやいている。それ見たことか。 \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eこのbyte列という概念が曲者であることがよく分かるエピソードがある。\u003c/p\u003e\n\n\u003cp\u003e2018年7月23日、東京大手町のMorgan Stanleyにて\u003ca href=\"http://www.morganstanley.co.jp/ja/people/students-graduates/events-programs/2018-bjarne-stroustrup-now-and-tomorrow\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++ Now and Tomorrow\u003c/a\u003eが開催された。そこに参加した私はC++の始祖たるBjarne Stroustrup氏になぜchar8_t型がないのか聞く機会を得た。内容は\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/2f2d95e8fabd78a5d0c8\" id=\"reference-f7ae9eca54fc76af31cf\"\u003eC++ Now and TomorrowでBjarne Stroustrup氏になぜchar8_t型がないのか聞いてきた\u003c/a\u003e\u003cbr\u003e\nにまとめてある。\u003c/p\u003e\n\n\u003cp\u003e要約すると\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e文字エンコードをって別にUnicodeだけじゃなくて日本語にはSJISがあるし、そもそもASCIIあるやん。\u003c/li\u003e\n\u003cli\u003eUnicodeを特別扱いしたくない\u003c/li\u003e\n\u003cli\u003e文字エンコードについてはlibraryでどうにかするべきだ、core言語は何もしない\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eというものである。まったく文字の何たるかを理解していない。(英語力不足によるtranslation lostを十分差し引いてお読みください)\u003c/p\u003e\n\n\u003cp\u003eUnicodeが世界中の文字セットの全体集合として機能しているのは、断じて一時的なものではない。利用状況を見てもShift-JISやBig5などのUnicodeではないエンコードの利用は低下している。\u003c/p\u003e\n\n\u003cp\u003eUnicode対応にcore言語でのサポートが必要なのは明らかである。なぜか。\u003c/p\u003e\n\n\u003cp\u003eまずあきらかに\u003ccode\u003echar\u003c/code\u003eと区別がつく形で\u003ccode\u003echar8_t\u003c/code\u003e型が必要だ。\u003ccode\u003eunsigned char\u003c/code\u003eなどの既存の型の流用ではoverloadできない。\u003c/p\u003e\n\n\u003cp\u003eさらに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003echar8_t\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようなenum classを使うのもだめだ。\u003ccode\u003eu8\u003c/code\u003eprefixの付いた文字列リテラルを使うのにヘッダーファイルのincludeが必要になってしまう。\u003c/p\u003e\n\n\u003cp\u003e組み込み型で独立した型として\u003ccode\u003echar8_t\u003c/code\u003e型が必要である。これはcore言語で対応する案件だ。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"char8_tを追加する提案の変遷\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char8_t%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E6%8F%90%E6%A1%88%E3%81%AE%E5%A4%89%E9%81%B7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar8_t\u003c/code\u003eを追加する提案の変遷\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3398.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eN3398: String Interoperation Library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0372r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0372R0: A type for utf-8 data\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0482r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R0: char8_t: A type for UTF-8 characters and strings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r1.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R1: char8_t: A type for UTF-8 characters and strings (Revision 1)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r2.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R2: char8_t: A type for UTF-8 characters and strings (Revision 2)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r3.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R3: char8_t: A type for UTF-8 characters and strings (Revision 3)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r4.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R4: char8_t: A type for UTF-8 characters and strings (Revision 4)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r5.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0482R5: char8_t: A type for UTF-8 characters and strings (Revision 5)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e以上がC++標準化委員会に出ていた\u003ccode\u003echar8_t\u003c/code\u003e型を何らかの方法で追加する提案である。\u003c/p\u003e\n\n\u003cp\u003e注意点は、この提案の\u003ccode\u003echar8_t\u003c/code\u003e型はUTF-8であることを保証していない。現状の\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eと同じだ。まあ実用上は困らないと言えるが。\u003c/p\u003e\n\n\u003cp\u003e同時並行でC言語の標準化委員会にも\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2231.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003eN2231: char8_t: A type for UTF-8 characters and strings\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが出ている。\u003c/p\u003e\n\n\u003cp\u003e最終的にP0482R5がC++20に採用された。C++標準化委員会、ついに文字とは何かを理解する！\u003c/p\u003e\n\n\u003cp\u003eではその詳細を見ていこう。とはいえそろそろ力尽きてきたので江添亮氏のブログで解説されている部分は引用にとどめ、その他も詳しくは書かない。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"n3398\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#n3398\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eN3398\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2012/10/2012-09-pre-portland-mailing.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 2012-09 pre-Portland mailingのあまり簡易ではないレビュー\u003c/a\u003e\u003cbr\u003e\n文字列などの変換を行うライブラリ。\u003c/p\u003e\n\n\u003cp\u003eこの提案は、char8_tをunsigned charのtypedef名としている。signed char, unsigned char, charは区別されるので、通常のcharとは区別できるから問題ないとしている。そんな奇妙な解決方法は嫌だ。char8_tは本物の型であるべきだし、そもそもUTF-8文字リテラルとUTF-8文字列リテラルは、char8_t型であるべきだったのだ。\u003c/p\u003e\n\n\u003cp\u003echar8_tをunsigned charのtypedef名とする、この提案はクソだ。それならない方がましだ。 \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0372r0\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0372r0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0372R0\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2016/09/c-p0370r1-p0379r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の文書: P0370R1-P0379R0\u003c/a\u003e\u003cbr\u003e\nUTF-8の1単位を表現するchar8_t型の提案。\u003c/p\u003e\n\n\u003cp\u003echar8_tからcharへの標準変換はできるが、逆はできない。\u003c/p\u003e\n\n\u003cp\u003eC++11のときにchar8_tが必要だと訴えたら、charは古典的にバイト列を表現する型なので十分だ。char型以外の型があるのは混乱する。などと理解のないUnicodeの世界に生きていない名だたる委員達から散々に批判された。その委員達も、今では、「やっぱりchar8_tがないのは失敗だったなぁ」とぼやいている。それ見たことか。 \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r0\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R0\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2016/11/c-p0480r0-p0489r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の文書: P0480R0-P0489R0\u003c/a\u003e\u003cbr\u003e\nUTF-8文字型であるchar8_tの提案。\u003c/p\u003e\n\n\u003cp\u003eUTF-8文字列リテラルの型もchar8_t[]型になる。\u003c/p\u003e\n\n\u003cp\u003e移行のために、char8_t[]からchar[]への暗黙の型変換を追加する。この暗黙の型変換を追加するには標準変換の細かいルールを変更しなければならないので、最初からdeprecated扱いで入れるのもありだ。\u003c/p\u003e\n\n\u003cp\u003estd::u8stringからstd::stringへの暗黙の変換も提供する。\u003c/p\u003e\n\n\u003cp\u003e必ず入れなければならない。 \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003edeprecatedにするのは\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ecodecvt\u0026lt;char16_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt\u0026lt;char32_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char16_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char32_t, char, mbstate_t\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd::filesystem::u8path\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eの２つ。C++17のUnicode間変換の非推奨化のあともかろうじて生き残っていたネイティブナローエンコードとの変換が非推奨になることで本格的に\u003ccode\u003ecodecvt\u003c/code\u003eは完全に空気になる。\u003cbr\u003e\nまた\u003ccode\u003eu8path\u003c/code\u003eとかいう馬鹿げた関数もいらないので非推奨にする。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R1\u003c/h3\u003e\n\n\u003cp\u003eR0からの変更点はgccをforkして実装してみた話が追加されたり、文章として読みやすくなったくらいである\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R2\u003c/h3\u003e\n\n\u003cp\u003eR1からの変更点は以下の通り。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eC標準化委員会に提案中のN2231に合わせて\u003ccode\u003embrtoc8\u003c/code\u003eと\u003ccode\u003ec8rtomb\u003c/code\u003e関数を追加\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebasic_ostream\u0026lt;char\u0026gt;::operator\u0026lt;\u0026lt;()\u003c/code\u003eと\u003ccode\u003ebasic_istream\u0026lt;char\u0026gt;::operator\u0026gt;\u0026gt;()\u003c/code\u003eに対して\u003ccode\u003echar8_t\u003c/code\u003eのoverloadを追加\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r3\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R3\u003c/h3\u003e\n\n\u003cp\u003eR2からの変更点はclangで実装してみた話が追加された。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r4\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R4\u003c/h3\u003e\n\n\u003cp\u003e割愛\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"p0482r5\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#p0482r5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eP0482R5\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.com/2018/11/c2018.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: C++標準化委員会の2018サンディエゴ会議の結果\u003c/a\u003e\u003cbr\u003e\nUTF-8文字リテラル、UTF-8文字列リテラルの文字の型を表現するchar8_tを追加する提案。私が9年前にC++0xのときに提案したところ、「でもchatは生のバイト列を表現するのに適切な型だからー」と寝ぼけた主張で却下されたにもかかわらず、後になって「やっぱchar8_tにしとけばよかったなぁ」となったので変更された。私には愚痴を言う権利がある。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e変更点は以下の通り\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eC標準化委員会に提案中のN2231に依存する文面を非依存な形に書き換え。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehash\u0026lt;pmr::u8string\u0026gt;\u003c/code\u003eの特殊化を追加\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eatomic_ref\u003c/code\u003eに対する特殊化を追加\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eu8streampos\u003c/code\u003eを\u003ccode\u003e\u0026lt;iosfwd\u0026gt;\u003c/code\u003eの宣言に書き忘れてたので追記\u003c/li\u003e\n\u003cli\u003eR2で\u003ccode\u003ebasic_ostream\u0026lt;char\u0026gt;::operator\u0026lt;\u0026lt;()\u003c/code\u003eと\u003ccode\u003ebasic_istream\u0026lt;char\u0026gt;::operator\u0026gt;\u0026gt;()\u003c/code\u003eに対して\u003ccode\u003echar8_t\u003c/code\u003eのoverloadを追加したが、この提案文章の動機と関係がなく、\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eに対して現在同様のものがないため、削除\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003embrtoc8\u003c/code\u003eと\u003ccode\u003ec8rtomb\u003c/code\u003e関数の説明を書き忘れていたので追記\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecodecvt\u0026lt;char16_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt\u0026lt;char32_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char16_t, char, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char32_t, char, mbstate_t\u0026gt;\u003c/code\u003eと\u003ccode\u003estd::filesystem::u8path\u003c/code\u003eについてはすでにC++20でdeprecatedになることが決まっていたので忘れる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecodecvt\u0026lt;char16_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt\u0026lt;char32_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char16_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char32_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003eを追加\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"uupreifx付きの文字列リテラルがutf-16utf-32でエンコードされることを保証する提案\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#uupreifx%E4%BB%98%E3%81%8D%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%83%AA%E3%83%86%E3%83%A9%E3%83%AB%E3%81%8Cutf-16utf-32%E3%81%A7%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%95%E3%82%8C%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E4%BF%9D%E8%A8%BC%E3%81%99%E3%82%8B%E6%8F%90%E6%A1%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eu\u003c/code\u003e/\u003ccode\u003eU\u003c/code\u003epreifx付きの文字列リテラルが\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eでエンコードされることを保証する提案\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1041r0.md\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP1041R0: Make char16_t/char32_t string literals be UTF-16/32\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1041r1.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP1041R1: Make char16_t/char32_t string literals be UTF-16/32\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e現状\u003ccode\u003eu\u003c/code\u003e/\u003ccode\u003eU\u003c/code\u003epreifx付きの文字列リテラルはエンコードが規定されていない。一方で\u003ccode\u003eu8\u003c/code\u003eprefix付き文字列リテラルについてはUTF-8が保証されている。なので\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eでエンコードされることを保証する提案。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"c規格書が参照するucsの規格書にない用語を利用している問題を解決する提案\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E8%A6%8F%E6%A0%BC%E6%9B%B8%E3%81%8C%E5%8F%82%E7%85%A7%E3%81%99%E3%82%8Bucs%E3%81%AE%E8%A6%8F%E6%A0%BC%E6%9B%B8%E3%81%AB%E3%81%AA%E3%81%84%E7%94%A8%E8%AA%9E%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E5%95%8F%E9%A1%8C%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B%E6%8F%90%E6%A1%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++規格書が参照するUCSの規格書にない用語を利用している問題を解決する提案\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0417R0: C++17 should refer to ISO/IEC 10646 2014 instead of 1994\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r1.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0417R1: C++17 should refer to ISO/IEC 10646 2014 instead of 1994 (R1)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP1025R0: Update The Reference To The Unicode Standard\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e現在C++はISO/IEC 10646-1:1993を参照している。ちなみにこの頃は\u003ccode\u003eUTF-8\u003c/code\u003e/\u003ccode\u003eUTF-16\u003c/code\u003e/\u003ccode\u003eUTF-32\u003c/code\u003eというものはなく\u003ccode\u003eUCS-2\u003c/code\u003e/\u003ccode\u003eUCS-4\u003c/code\u003eとか呼んでいた。つまり存在しない用語を利用していることになる。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://unicode.org/faq/unicode_iso.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eFAQ - Unicode and ISO 10646\u003c/a\u003e\u003cbr\u003e\nで解説されているように、UnicodeとISO/IEC 10646は極めて緊密に連携を取ってはいるものの、完全に同一というわけではない。\u003c/p\u003e\n\n\u003cp\u003eP1025R0ではどちらかといえばUnicodeのほう、それも10.0かそれ以降を参照するべきだとし、どうしてもISO/IEC 10646にこだわりたいなら\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eISO/IEC 10646:2017 Information technology – Universal Coded Character Set (UCS) plus 10646:2017/DAmd 1, or successor \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eが該当だとしている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c20に採択されたchar8_t型を追加する提案の不可解な点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c20%E3%81%AB%E6%8E%A1%E6%8A%9E%E3%81%95%E3%82%8C%E3%81%9Fchar8_t%E5%9E%8B%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E6%8F%90%E6%A1%88%E3%81%AE%E4%B8%8D%E5%8F%AF%E8%A7%A3%E3%81%AA%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++20に採択されたchar8_t型を追加する提案の不可解な点\u003c/h1\u003e\n\n\u003cp\u003eP0482R5をよく見るとなぜか\u003ccode\u003ecodecvt\u0026lt;char16_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt\u0026lt;char32_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char16_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003e, \u003ccode\u003ecodecvt_byname\u0026lt;char32_t, char8_t, mbstate_t\u0026gt;\u003c/code\u003eが追加されています。\u003c/p\u003e\n\n\u003cp\u003eこれはUnicode間の変換がガバガバなまま復活を遂げたと理解すればいいのでしょうか・・・？\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://teratail.com/questions/165416\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++ - C++20に採択されたchar8_t型を追加する提案の不可解な点｜teratail\u003c/a\u003e\u003cbr\u003e\nにて質問中です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eついに\u003ccode\u003echar8_t\u003c/code\u003eがC++20で追加された。これはC++でまともにUnicodeを扱うための大きな一歩である。しかしC++でUnicodeを扱うための戦いは始まったばかりであり(ry\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"追記1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%981\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記1\u003c/h2\u003e\n\n\u003cp\u003eところでC++でUnicode関連の調査検討を行うStudy Groupとしてsg16というのがあることをすっかり忘れていました。\u003cbr\u003e\n\u003ca href=\"https://github.com/sg16-unicode\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/sg16-unicode\u003c/a\u003e\u003cbr\u003e\n議事録が長大なREADME.mdにひたすら書かれるという方法で公開されているようです。\u003cbr\u003e\n今回のchar8_tの提案もこのsg16の管轄のようで、ほかにはBoost.Textとか言うのが提案されているようです。\u003cbr\u003e\n\u003ca href=\"https://tzlaine.github.io/text/doc/html/index.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://tzlaine.github.io/text/doc/html/index.html\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"追記2-sg20-education-draft事件\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%982-sg20-education-draft%E4%BA%8B%E4%BB%B6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記2: SG20 Education draft事件\u003c/h2\u003e\n\n\u003cp\u003e片方で一歩前進するともう片方で二歩後退するのが世の常なのか、SG20 Education(C++教育のためのガイドラインを作る作業部会)で大惨事が起こっているようです。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eSG20 EducationでC++教育のためのガイドラインを作ろうとしているのだが、そのたたき台として示されたドラフトがひどすぎる。\u003ca href=\"https://t.co/eZ3eUgPq1y\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/eZ3eUgPq1y\u003c/a\u003e\u003c/p\u003e— Ryou Ezoe (@EzoeRyou) \u003ca href=\"https://twitter.com/EzoeRyou/status/1083180421515337729?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2019年1月10日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eそして、「UTF-8は最初に教えなくてもよい」ときたもんだ。UTF-8以外の文字エンコードは実質死んだ。そもそもプログラミングをはじめる前にみんなUTF-8は使えっている。英語圏ですら、プログラミングを学ぶ前に絵文字を使った経験がない若い世代などいるわけがない。\u003c/p\u003e— Ryou Ezoe (@EzoeRyou) \u003ca href=\"https://twitter.com/EzoeRyou/status/1083181314432364544?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2019年1月10日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.cjdb.com.au/wg21/sg20/d1389/d1389#typesbasicprimary-primary-types\" rel=\"nofollow noopener\" target=\"_blank\"\u003eD1389R0: Standing Document for SG20: Guidelines for Teaching C++ to Beginners\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.cjdb.com.au/wg21/sg20/d1389/d1389#typesbasicprimary-primary-types\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.cjdb.com.au/wg21/sg20/d1389/d1389#typesbasicprimary-primary-types\u003c/a\u003e\u003cbr\u003e\nThe distinction between pre-C++20 and C++20 is simply the acknowldgement of UTF-8. This is not to suggest that students should be introduced to the details of UTF-8 any earlier, but rather to get the idea of UTF-8 support on their radar, so that when they need to care about locales, they won’t need to shift from thinking about why char is insufficient in the current programming world: they can just start using what they are already familiar with.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなんでchar8_tが必要か理解するためにあえて先に教えないとかのたまっている。正気か？\u003c/p\u003e\n\n\u003cp\u003eてめーら手元の数学とか何でもいいから教科書を開いてみろ、どこにそんなアホみたいに遠回りして教えようとする教科書がある？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"補足説明\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A3%9C%E8%B6%B3%E8%AA%AC%E6%98%8E\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e補足説明\u003c/h1\u003e\n\n\u003cp\u003eTwitterやはてなブックマークのコメントを見ていていくつか誤解が生まれているようなので補足します\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"char8_t型追加はどのレイヤーの話か\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char8_t%E5%9E%8B%E8%BF%BD%E5%8A%A0%E3%81%AF%E3%81%A9%E3%81%AE%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E3%81%AE%E8%A9%B1%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar8_t\u003c/code\u003e型追加はどのレイヤーの話か\u003c/h2\u003e\n\n\u003cp\u003eC++という言語を語るにあたり、言語そのものを指すcore言語、言語が定める標準ライブラリのSTLがありますが、今回core言語のお話です。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eC++でUnicodeを扱うための戦いは始まったばかりであり\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eというのは、library側の大改造はこれから、という意味合いでした。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"cみたいな低レイヤー言語で文字にそんなこだわる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E4%BD%8E%E3%83%AC%E3%82%A4%E3%83%A4%E3%83%BC%E8%A8%80%E8%AA%9E%E3%81%A7%E6%96%87%E5%AD%97%E3%81%AB%E3%81%9D%E3%82%93%E3%81%AA%E3%81%93%E3%81%A0%E3%82%8F%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++みたいな低レイヤー言語で文字にそんなこだわる？\u003c/h2\u003e\n\n\u003cp\u003eC++は低レイヤー\u003cstrong\u003eも\u003c/strong\u003eできる言語であって、用途は多岐にわたり、結構高レイヤーなこともできます。\u003c/p\u003e\n\n\u003cp\u003eしたがって文字の話は避けて通れないんですね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ユーザー的にはコードポイント単位で扱いたいのでは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E7%9A%84%E3%81%AB%E3%81%AF%E3%82%B3%E3%83%BC%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E5%8D%98%E4%BD%8D%E3%81%A7%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eユーザー的にはコードポイント単位で扱いたいのでは？\u003c/h2\u003e\n\n\u003cp\u003elibraryサイドの話ですね。\u003c/p\u003e\n\n\u003cp\u003e個人的には各エンコードの文字列に対してコードポイント単位、グリフ単位でアクセスできるiteratorがほしいところです。\u003c/p\u003e\n\n\u003cp\u003eあとUnicode同士の変換。そして正規表現の改善。同時並行でぶっ壊れているlocaleとカビの生えたiostream\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"派生しているwebページ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B4%BE%E7%94%9F%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bweb%E3%83%9A%E3%83%BC%E3%82%B8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e派生しているWebページ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://togetter.com/li/1301253\" rel=\"nofollow noopener\" target=\"_blank\"\u003e原理主義的に C++ の文字列の扱いを根本から変えるにはどうするべきか - Togetter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://togetter.com/li/1301398\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++標準化委員会、ついに文字とは何かを理解する: char8_t - Togetter\u003c/a\u003e: この記事への反応まとめ\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://naruse.hateblo.jp/entry/2018/12/24/013446\" rel=\"nofollow noopener\" target=\"_blank\"\u003echar8_tによせて - なるせにっき\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ufcpp.net/blog/2018/12/unicodecategory/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e書記素分割/Unicode カテゴリー判定 | ++C++; // 未確認飛行 C ブログ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003eCC BY-SA 3.0\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fd%2Fd0%2FCC-BY-SA_icon.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=d569824d28dfbe7b7d9a02962f99dea9\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fd%2Fd0%2FCC-BY-SA_icon.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=d569824d28dfbe7b7d9a02962f99dea9\" alt=\"CC BY-SA 3.0\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/d/d0/CC-BY-SA_icon.svg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fd%2Fd0%2FCC-BY-SA_icon.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ba7ff9967e783ad3329e7cc6d1489567 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# C++ Advent Calendar 2018\n\nこの記事は[C++ Advent Calendar 2018](https://qiita.com/advent-calendar/2018/cpp) 15日目の記事です。\n\n- 14日目: [VTKライブラリ](https://qiita.com/shohirose/items/dd2bdc4201644455e3a8)\n- 16日目: [C++のエラー処理との付き合い方](https://qiita.com/kazatsuyu/items/2e1aa96f1c103a91fd00)\n\n当初見積もりよりも大幅に長い記事となり、投稿したのは12/22で1週間遅刻です。すみません。\n\n# お知らせ\n\ncpprefjpに`char8_t`型追加について解説を書きました。ぎゅぎゅっとコンパクトに、また査読を受けて中立的な表現で書いていますので、よければどうぞ。\n\n[UTF-8エンコーディングされた文字の型として`char8_t`を追加 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp20/char8_t.html)\n\n# Caution\n\nこの文章には以下の要素が含まれます。苦手な方はご注意くださいね～。\n\n- 西欧人への偏見\n- C++の始祖への反論\n- 日本語に偏った文章\n- アジア圏に偏った文章\n- 常体と敬体の入り乱れた文章\n- 溢れ出た強烈な感情が~~打ち消し線~~で表されている\n- 要出典\n- 独自研究\n- 不十分な/誤りのある英語→日本語翻訳\n- Unicode策定に関わった人たちへのdisり\n- 絵文字に関わった人たちへのdisり\n- にこにこ(く)\n- 江添亮氏のブログからの引用\n- auに偏った絵文字観\n- EUC軽視\n- チベット語話者軽視\n\n# Unicodeとか\n\n今回の`char8_t`型を語る前にまずUnicodeについて話さねばならん。ここがすべての原点だからだ。\n\nとはいえ探せば優れた記事が存在し、というか私は実のところさほど詳しくない。\n\nでも書いちゃう。文字コードに散々苦しめられながら生活してきた人間として。\n\nしかし感情が高ぶるあまり事実誤認している可能性が高い。このセクションはさーっと読み流しつつ詳しく知りたいなら参考資料のリンクを張っておくので通読されることを勧める。\n\n## そもそもUnicodeとはなにか\n\nUnicode前夜、コンピュータで文字を扱うには各地域ごとの文字セットがあり、必要の応じてこれを切り替えて文字を扱っていた。\n\nしかしソフトウェアを世界的に発売するようになるとローカライズの作業時にこれでは不都合があり、全部の文字を扱える文字セットが必要だろうという声が上がった。\n\nそういった文字セットを作るべく、大きく2つの団体が舞台となりさながら戦争のような争いを経て現代に至る。ISOの文字コード規格委員会 (ISO/TC 97/SC2) とユニコードコンソーシアムである。\n\n## Unicodeにおけるエンコードとコードポイントとグリフとフォント\n\n極めて混同しやすいので、きっちり分離して理解する必要がある。\n\nまずグリフ(字体)がある。これは、ある文字がどういう特徴をもったものなのかを規定する。\n\nフォント(書体)はグリフの要求を満たしつつ、デザイン性を加味したものだ。\n\nコードポイントとはUnicodeで文字を扱うのに、グリフに背番号を付けたようなものだ。\n\nそしてエンコードとはコードポイントをコンピューターで扱うに際してどのようなbinary列にするかを定めるものである。\n\n追記:\nグリフについては議論の余地があったようだ\n\u003e[char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)\n\u003e[グリフ（glyph）という言葉の定義をめぐって](http://d.hatena.ne.jp/NAOI/20070427/1177670797)でも触れられていますが、「グリフ」という言葉が「字体」を指すのか「字形」を指すのかってのは議論がありますね。文字コードの文脈では普通「字形」の意味だとして話を進めることが多いように思います。\n\n## 火種は何処に\n\n### メモリー消費との戦い\n\nそもそもコンピュータはプログラムの実行に必要なデータがメモリー上に展開されていなければ実行できない。\n\n2018年の今だからこそ文字くらいでメモリー消費を気にすることなどないが、時代は1980年台である。メモリーとは命に等しいのであった\u003csup\u003e[要出典]\u003c/sup\u003e\n\nしたがって少しでもメモリー消費を減らすことがすべての場所で要求された。文字もその例外ではない。\n\nメモリーの無駄遣いはそれだけで即刻Rejectされる世界だったのだろう。\n\n### ASCIIしか解さない愚か者たち\n\nそもそもヨーロッパ圏においては中国や日本みたいに8bitには到底収まりきらない程の文字が日常にある世界など想像できないのである。\u003csup\u003e[要出典]\u003c/sup\u003e\n\nというかASCII以外の文字は2級市民だという勢いの人すら存在する。例えば後述するBoost.Locale事件である。\n\n### すべての文字が16bitに収まると考える愚か者たち\n\nASCIIしか解さない愚か者たちの中にも流石にすべての文字が8bitに収まらないという現実は受け入れられ始めていた\u003csup\u003e[要出典]\u003c/sup\u003e\n\nしかしやはり同じ理由からなのかメモリー消費との戦いからなのかはたまた宗教的な争いからか16bitで収まると考える愚か者が現れた。ユニコードコンソーシアムである。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eMS さんは比較的初期から Unicode コンソーシアムにいて、 16bit のほうが都合がいいからと、半ば決まりかけていた DIS10646 の卓袱台返しに加担した側なので、同情の余地はないですね。 \u003ca href=\"https://t.co/QpraL9VwfC\"\u003ehttps://t.co/QpraL9VwfC\u003c/a\u003e\u003c/p\u003e\u0026mdash; AoiMoe a.k.aしお兄P (@AoiMoe) \u003ca href=\"https://twitter.com/AoiMoe/status/1133017363719249920?ref_src=twsrc%5Etfw\"\u003e2019年5月27日\u003c/a\u003e\u003c/blockquote\u003e\n\n### CJKの漢字が同一であると考える愚か者たち\n\nちょっとでも詳しい人ならCJK統合漢字というものをご存知かもしれない。すべての文字が16bitに収まると考える愚か者たちにそそのかされた結果、中国(C)、日本(J)、韓国(K)、ついでにベトナム(V)の漢字を無理やり悪魔合体して同じ漢字だと自らを洗脳することで、漢字の統合を行ってしまった。\n\n\n・・・ところでこれを主導したのが誰だったか追加調査すると\n\n\u003e[Early Years of Unicode](http://www.unicode.org/history/earlyyears.html)\n\u003eOur investigations, headed by Lee Collins, showed that we could get past these technical issues.\n\u003e\n\u003eAs far as the text size, when we tested the percentage of memory or disk space actually occupied by character data in typical use, we found that it was rather small. Small not in absolute terms, but small compared to the amount of overhead in data structures and formatting information. Nowadays, of course, with video and sound data taking so much space, the percentage is even smaller.\n\u003e\n\u003eConcerning unification, when we looked at the unification of CJK ideographs, we had the successful example of the Research Libraries Group's East Asian Character (EACC) bibliographic code to show the way. We could see that by using the very same unification rules that the Japanese used for JIS, we could unify characters across the three languages.\n\u003e\n\u003eAnd, in terms of character count, when we counted up the upper bounds for the modern characters in common use, we came in well under 16 bits.\n\nLee Collinsという人だったと調べ直してわかったのですが、どっかでCJK統合できるか調べてShift-JISとかとか見たけど統合できそうやで！みたいな論文、それもスキャンされた画像だったと思うんですが、見た記憶があるんですが、一体どこにあったんだかさっぱり辿れない。\n\n### 固定長に文字が収まるという夢を見た愚か者たち\n\nプログラム的に、もし文字を固定長に表すことができれば非常に処理がやりやすい。その利便性から固定長に文字が収まるという幻想の郷に誘われてしまった愚か者たちがいた。~~当時の関係各位概ね全てである。\u003csup\u003e[要出典]\u003c/sup\u003e~~\n\n追記:\nと思いきや、そこまで愚かではなかった。むしろ現代の我々のほうが愚かである気がする。\n\nまあこの辺については未だに理解が進んでおらず2017年の[自作OS Advent Calendar 2017](https://adventar.org/calendars/2282)では@tenpoku1000さんが\n[UTF-32 でも固定長で処理出来るわけではない](https://gist.github.com/tenpoku1000/d60efa587b185ab34e36c70622934892)\nを執筆されていたりしたようだ。\n\n### 宗教・文化という普遍的な火種\n\n人類の歴史を振り返るに、おおよそ戦争というものの多くは宗教・文化という普遍的な火種が関わっている。多様な価値観を認めるとかそういう行為はエントロピーが高かったりするんだろうか。\n\n### その他\n\nまあ金とか名誉とかそのへんのありきたりな火種も当然ある。\n\n## 結果\n\n無視できない負債が現代もなおプログラマーを、ひいてはソフトウェアを利用する罪のない一般市民を巻き込んでいる。地雷原の撤去は終わっていないのだ。\n\n## 無視できない負債たち\n\n細かく上げれば鈍器になるレベルかも知れないので2つだけ。\n\n### UTF-16\n\nMicrosoftなどが国際化プログラミングとか称して時代はUnicodeだよねっ！と言い出した。まあそこまでは良かった。問題はそこからだ。\n\nMicrosoftがUnicodeといえば、もれなくUTF-16を指す。\n\n~~ワイド文字という概念が生産されたのだが、~~\n\n追記:\n\u003e[char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)\n\u003eそもそもワイド文字という概念はUnicode以前からあって、元々はDEC漢字のような日本語UNIX環境の開発から生まれ、日本語UNIX環境がAT\u0026Tの本家UNIXに取り込まれることで世界に紹介され、C89にwchar_tが取り込まれ、C++にも採用されるといった順序になっています。\n\nUnicodeより前からあったのか・・・。\n\nまあいずれにせよ、ユニコードコンソーシアム側の不用意な宣伝の結果誤用され、これはマルチバイト文字との対比の文脈で用いられた。言うまでもなく大問題で、なぜならUTF-16は文字を固定長で扱うことができないからである。サロゲートペアであるとか結合文字列なんかの問題がある。しかし多くのプログラマーはワイド文字なら固定長で扱えると考えてしまった。\n日本人がまんまとユニコードコンソーシアム側の周回遅れの情報に騙されてしまった背景には2001年、Unicode 3.1で、ISO/IEC 10646-2として、拡張漢字B集合42,711字が、U+20000-U+2A6FFのブロックに追加されるまでサロゲートペアも結合文字列も扱う機会がなかったためと思われる。\n結果膨大な数のバグを生み出す地雷として今なお猛威を振るっている。\n\nじゃあUTF-16を使うのをやめればいいじゃないと思うかもしれないが、巨大なシェアを持つWindowsを始め、そこかしこで使われてしまったがために、バイナリ互換を捨てないために維持されている。\n~~おい、だれか平行世界に転生してユニコードコンソーシアムの連中をひたすら論破し続ける小説を書いてくれないか。~~\n\n### CJK統合漢字\n\nCJKの漢字が同一であると考える愚か者たちによって悪魔合体させられてしまった文字たちだが、当然問題になった。悪魔合体したとはいえ字形が同じであるはずもないし、用いられる文脈も違う別の文字だったはずのものである。\n\n解決策として異体字セレクターというものができた。つまりCJK統合漢字を表す既存のCodepointの後ろに異体字セレクター用に割り当てられた別のcodepointを並べることで一つの文字として扱い、字形を区別できるようにするというものである。\n\n追記:\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e（ \u003ca href=\"https://t.co/Vgyz7LH9Z1\"\u003ehttps://t.co/Vgyz7LH9Z1\u003c/a\u003e ここでの異体字セレクターに関する下りは明らかな事実誤認かな。仮に CJKV でのソースの差を区別していたとしても、漢字の字体や文脈の問題は解決しなかったかより悪くなっていただろうし、IVS も（少なくとも現状）同一ソース内での形の差異を区別するものでしかない）\u003c/p\u003e\u0026mdash; MORIOKA Tomohiko (@CHISE_ja) \u003ca href=\"https://twitter.com/CHISE_ja/status/1077041620179009536?ref_src=twsrc%5Etfw\"\u003e2018年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\n完璧に事実誤認だったようなので忘れてください。\n\nただ多くのソフトウェアでこれの対応を忘れてしまい、例えばvscodeなんかもその手の問題を当初抱えていた。\n\n追記:\n\u003e[char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)\n\u003eだってさぁ、アルファベットは元から統合されてるんだし。\n\u003e\n\u003eまぁ、トルコ語のアルファベットは分離しておいた方がよかったと思います。\n\nあーうん、確かにそう言われてみれば・・・。\n\n## 絵文字\n\nこれもUnicodeを語るのに欠かせない要素なので触れておく。\n\n世紀末の日本、1999年2月のこと、ドコモがi-モードを提供し始めた。このとき絵文字を収録した。21世紀に入る前に今のau、今のSoftbankも同様のサービスを提供し始めた。\n\nちなみにi-モードの絵文字をほぼ一人で作った人は今ニコニコ動画でおなじみドワンゴ取締役の（く）りたしげたか改・・・じゃなかった、栗田 穣崇さんだったりします。大炎上したにこにこ(く)の収拾にあたり陣頭にたった方ですね。\n\nで、この絵文字、即座に問題になって、つまりキャリア間でメールを投げるときに絵文字を使うと化けるという問題でした。\n\n元になっている文字コードはShift-JISというやつで2年前の1997年に正式に規定したときに禁止された範囲に絵文字を各社てんでんばらばらに割り当ててしまったもんだからさあ大変。\n\nこのとき3社の間で標準化する、もしくはデファクトスタンダードを作ってくれていればもうすこし現代社会をプログラマーは生きやすくなっただろうと思うのですが、それは後世からみた評価であって、致し方なかったのでしょうか。\n\n2006年、3者はそれぞれ他の2社との相互運用性向上のために、E-mailに関して、メールの送信経路で中間者攻撃を仕掛け、送り先に合わせた絵文字に変換するサービスを開始しました。そう、最悪の結果となったのです。~~当時の関係各位は十分に反省して欲しい。~~\n\n## 絵文字とGmailとiPhoneとUnicode\n\nASCIIしか解さない愚か者たちにぐーで殴りかかったものがある。絵文字だ。\n\n最終的に絵文字が世界に流通するきっかけとなったのはiPhoneだと思われる。\n\nしかし流通可能なまでに最悪の状態を整理した功績の多くはGoogleのGmail、その日本チームにある。\n\nGmailが絵文字に対応したのは2008年1月のことだが、2007年6月には概ね整理を終えていたらしい。\n\n2009年の11月、iOS 2.2で日本語に設定したときのみ絵文字が使えるようになった。\n\nUnicodeに絵文字を入れる議論が始まり、日本に偏っていたことやその他国際化にあたって多くの障害を乗り越え、本が何冊かないと書ききれない経緯を経て2010年、Unicode 6.0に絵文字が入った。\n\nこうして世界に絵文字が広がった。その後も絵文字に改善が入っている。\n\n結果ASCIIしか解さない愚か者たちに何が襲いかかったか。結合文字列である。ついに固定長に文字が収まるという幻想が破られるときが来てしまったのである。\n\nと同時にそれはついに真面目にUnicodeに向き合わなければならない時代の到来を告げたのだった。\n\n## Unicodeにおける4つの文字の定義\n\nhttps://unicode.org/faq/char_combmark.html#7\n\nにて4通りの定義が示されています。それに習って`U+0061, U+0928, U+093F, U+4E9C, U+10083`(aनि亜𐂃)という文字列の長さを4通りで数えれば4つの定義がわかることでしょう。\n\n![img](https://unicode.org/faq/char_combmark_ex1.png)\n\n### byte\n\n何byteか、という数え方です。Unicodeには今の所`UTF-8`/`UTF-16`/`UTF-32`というエンコード方式が存在するのでそれぞれ数えてみましょう。\n\n| エンコード | byte数 | byte列                                               |\n|----------|------------|-------------------------------------------------------------|\n| UTF-8    | 14         | `61 E0 A4 A8 E0 A4 BF E4 BA 9C F0 90 82 83`                 |\n| UTF-16BE | 12         | `00 61 09 28 09 3F 4E 9C D8 00 DC 83`                         |\n| UTF-32BE | 20         | `00 00 00 61 00 00 09 28 00 00 09 3F 00 00 4E 9C 00 01 00 83` |\n\n用途としては、メモリー確保するときの大きさとかそんなでしょうか。\n\n### code units\n\n何単位か、という数え方です。やはり`UTF-8`/`UTF-16`/`UTF-32`についてどうなるか見てみましょう。\n\nところでcode unitsは一般に単位と訳されるのですが、Code Unit Sequenceはどう訳せばいいんでしょうか？単位列、だとなんか違和感があります。\n\n| エンコード | Code Unit数 | Code Unit列                           |\n|----------|-----------------|----------------------------------------------|\n| UTF-8    | 14              | `61 E0 A4 A8 E0 A4 BF E4 BA 9C F0 90 82 83`    |\n| UTF-16   | 6               | `0061 0928 093F 4E9C D800 DC83`                |\n| UTF-32   | 5               | `00000061 00000928 0000093F 00004E9C 00010083` |\n\nJavascriptとかいう変態は置いておいて少なくともC++でstringのlengthといったらこれですね。\n\n### code points\n\n何コードポイントか、という数え方です。\n\n`U+0061, U+0928, U+093F, U+4E9C, U+10083`\n\nというのは5コードポイントですね。\n\nちなみにUTF-32のときのCode Unit数と同一です。\n\n### grapheme cluster\n\n何書記素クラスタか、という数え方です。\n\n![img](https://unicode.org/faq/char_combmark_ex1.png)(aनि亜𐂃)\n\n人間が見たときに一文字と解釈するかという考え方です。\n\n例えばनिはコードポイントで見ると`U+0928`(न), `U+093F`(ि)という2コードポイントで表されます。しかしこれを別々の文字とは人間は解釈せず、一文字と認識します。\n\n他の例も見てみましょう。\nप,ू,र,ी,त,ि\n\n![index.png](https://qiita-image-store.s3.amazonaws.com/0/94177/5dfb67a3-243f-bfef-ccb0-6fa0d79cf473.png)\n👩‍❤️‍💋‍👨\n\n[`kiss: woman, man`として登録されている](http://www.unicode.org/emoji/charts/full-emoji-list.html#1f469_200d_2764_fe0f_200d_1f48b_200d_1f468)のですが、コードポイントで表すと`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468`となります。長い！\n\nさらに見ていきましょう。\n\n![無題6.png](https://qiita-image-store.s3.amazonaws.com/0/94177/03115c92-3b5d-19a8-d1cc-f273fce35ec6.png)(पूरीति)\n\nこれはcodepintでいうと`U+092A U+0942 U+0930 U+0940 U+0924 U+093F`という並びなのですが、見た目上の部品の並びとまったく一致しません。適当な文字入力手段がなかったのでWikipediaの\n[デーヴァナーガリー - Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%83%B4%E3%82%A1%E3%83%8A%E3%83%BC%E3%82%AC%E3%83%AA%E3%83%BC)\nにある表から一つづつコピペして作りました。\n\n1. ![無題.png](https://qiita-image-store.s3.amazonaws.com/0/94177/15652d0d-4b60-b2b9-6c1f-39b77ea853f9.png)(प)\n2. ![無題2.png](https://qiita-image-store.s3.amazonaws.com/0/94177/334b0b12-176f-b979-e720-13c72254daf6.png)(पू)\n3. ![無題3.png](https://qiita-image-store.s3.amazonaws.com/0/94177/e855ca40-ef28-e193-815e-94200e31afa3.png)(पूर)\n4. ![無題4.png](https://qiita-image-store.s3.amazonaws.com/0/94177/f61af41f-6879-82a4-c679-ff1a7bc30c58.png)(पूरी)\n5. ![無題5.png](https://qiita-image-store.s3.amazonaws.com/0/94177/fcc3cf14-885f-586f-e116-61e6ec03678b.png)(पूरीत)\n6. ![無題6.png](https://qiita-image-store.s3.amazonaws.com/0/94177/03115c92-3b5d-19a8-d1cc-f273fce35ec6.png)(पूरीति)\n\nいわゆる結合文字列の類はこのように認識上の一文字とコードポイント数が一致しません。\nあゝ、世界の文字のなんと多様なることか！\n\nそうです、**コードポイントによって文字が固定長に表せるという考えすら幻想入りしたのです。**\n\nここに文字を固定長で表そうとする試みは完全敗北したのでした。\n\n\u003e[文字数制限 - yanok.net](http://yanok.net/2012/08/post-226.html)\n\u003e\n\u003e本当に「人が見て認識する1文字」単位にするには、結合文字の扱いを考慮する必要があるわけです。なお、チベット文字の「1文字」がチベット語話者の立場から通常どのようにとらえられているのかは私には分かりません。\n\nちなみに、書記素の切れ目がどこに入るのか、は厳密に定義されているのでそこはご安心を。ただしUnicodeのバージョンが上がるごとに変わっていきます。うへぇ。\n\n@ufcpp 氏によるC#で書かれたUnicode 10.0相当の判定コードがこちらです。\nhttps://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeSplitter/Character.GetGraphemeBreakPropertyV10.cs\n2920行あります。これでも前は2万行近い switch ステートメントだったんだから短くなったほう。\nこのようにcodepointごとに種類判定(CR LF Control Extend SpacingMark Regional_Indicator L V T LV LVT Any)を行い、さらにそれに基づいて結合するかの判定を行うことになるようです。\n絶対自分で書きたくない。\n\nなので普通は[icu](http://site.icu-project.org/home)を使う(ところでWebassemblyで使おうと思ってコンパイルしようとしたらコンパイルできないの私だけ？)。\n\nで、用途としてはマウスで選択するときとかbackspace/deleteキーで文字を消すときだとかにこれに基づいてやると最も自然だよね、ということになっています。\n\n## 突っ込まれる前に補足\n\nべつにCJKを始めとする多くの技術者たちがこの問題を放置してきたわけではなく、日本もUnicodeには多大なる貢献をしています。\n\nドコモをはじめ3社のことも悪く書いていますが彼らだって怠惰だったわけではない。とくにドコモについてはWebで見える範囲でも痕跡が見られます。auだってGoogleとの提携の中でなにかやっていたらしい話が聞こえている。SoftbankがAppleに乗り込んでいってiOSの絵文字の実装に関わったのも知ってる。\n\nわかってる、わかってる。けどそれでもこの現状なんだよ、どうなっとるんじゃい、と思わずにはいられないんですよ。\n\n## UnicodeとUCS\n\nUnicodeというのがもともと業界団体が作ったものだったのに対してUCSはISOという国際標準を取り扱うところに起源を持ちます。\n\nなのでISO的にはISO/IEC 10646は、Information technology — Universal Coded Character Set (UCS)というのが正しいです。\n\nしかし実質的にUnicodeとUCSは同一であり、Unicodeで決めたものを再度ISO側で段階を経てISOから発行するという手順を踏んでいたりします。\n\n面倒なので以下Unicodeと呼ぶことにします。UCSって言われてもなにそれって感じですしお寿司。\n\n## 参考資料\n\n- [絵文字が開いてしまった「パンドラの箱」第1回--日本の携帯電話キャリアが選んだ道 - CNET Japan](https://japan.cnet.com/article/20389042/)\n- [絵文字が開いてしまった「パンドラの箱」第2回--Googleの開けてしまった箱の中味 - CNET Japan](https://japan.cnet.com/article/20389453/)\n- [絵文字が開いてしまった「パンドラの箱」第3回--Unicode提案の限界とメリット - CNET Japan](https://japan.cnet.com/article/20390204/)\n- [絵文字が開いてしまった「パンドラの箱」第4回--絵文字が引き起こしたUnicode-MLの“祭り” - CNET Japan](https://japan.cnet.com/article/20394318/)\n- [絵文字が開いてしまった「パンドラの箱」第5回--絵文字と日本マンガの親密な関係 - CNET Japan](https://japan.cnet.com/article/20398174/)\n- [絵文字が開いてしまった「パンドラの箱」第6回--Google・Apple提案とそのシナリオ - CNET Japan](https://japan.cnet.com/article/20407674/)\n- [絵文字が開いてしまった「パンドラの箱」第7回--そして舞台はダブリンから東京へ - CNET Japan](https://japan.cnet.com/article/20407951/)\n- [絵文字が開いてしまったパンドラの箱](https://www.slideshare.net/ogwata_1959/ss-7132351)\n- [グーグルが絵文字を世界標準に提案した理由--国際化エンジニアに聞くプロジェクトの舞台裏（前編） - CNET Japan](https://japan.cnet.com/article/20409186/)\n- [グーグルが絵文字を世界標準に提案した理由--国際化エンジニアに聞くプロジェクトの舞台裏（後編） - CNET Japan](https://japan.cnet.com/article/20409222/)\n- [安岡 孝一, ケータイの絵文字と文字コード, 情報管理, 2007, 50 巻, 2 号, p. 67-73, 公開日 2007/05/01, Online ISSN 1347-1597, Print ISSN 0021-7298](https://www.jstage.jst.go.jp/article/johokanri/50/2/50_2_67/_article/-char/ja/)\n- [Suggestions for text fallback · Issue #142 · googlei18n/emoji4unicode](https://github.com/googlei18n/emoji4unicode/issues/142)\n- [DOCOMO's comment - Google グループ](https://groups.google.com/forum/#!topic/emoji4unicode/OCXIUjHBgc0)\n- [Proposal for Encoding Emoji Symbols - Unicode Symbols](https://sites.google.com/site/unicodesymbols/Home/emoji-symbols/proposal-text)\n- [携帯電話の絵文字のUnicode登録をめぐる議論の動向 - moroshigeki's blog](http://moroshigeki.hateblo.jp/entry/20090208/p1)\n- [Emojiに対するアイルランド、ドイツからの修正案 - moroshigeki's blog](http://moroshigeki.hateblo.jp/entry/20090426/p1)\n- [12. Unicode、絵文字、Androidのテキスト関連のハンドリング、無数の文字トリビア (のな)](https://turingcomplete.fm/12)\n- [Unicodeのgrapheme cluster (書記素クラスタ) | hydroculのメモ](https://hydrocul.github.io/wiki/blog/2015/1025-unicode-grapheme-clusters.html)\n- [絵文字の連結と、書記素クラスター判定 | ++C++; // 未確認飛行 C ブログ](https://ufcpp.net/blog/2017/10/graphemesplitter/)\n\n提案文章へのリンクは割愛しています。\n\n## 参考資料2\n\nこの記事の執筆のさいに参照はしていませんが、昔見ていいなと思っていた解説のうちひろい出せたものだけと、はてぶで紹介いただいたものなど。\n\nほら貝：文字コード\n\n- [文字コード問題早わかり １ カタカナ篇](http://www.horagai.com/www/moji/code1.htm)\n- [文字コード問題早わかり ２ 漢字篇](http://www.horagai.com/www/moji/code2.htm)\n- [文字コード問題早わかり ３ 続・漢字篇](http://www.horagai.com/www/moji/code3.htm)\n- [文字は無制限に増やすべきか？──棟上昭男情報規格調査会会長に聞く](http://www.horagai.com/www/moji/int/tojo.htm)\n- [小は大をかねるか？](http://www.horagai.com/www/moji/show.htm)\n- [文字コード案内──どこから読むか？](http://www.horagai.com/www/moji/annai.htm)\n\n安岡 孝一, 日本における最新文字コード事情\n\n- 2001-04-15: [安岡 孝一, 日本における最新文字コード事情(前編), システム／制御／情報, 2001, 45 巻, 9 号, p. 528-535, 公開日 2017/04/15, Online ISSN 2424-1806, Print ISSN 0916-1600](https://www.jstage.jst.go.jp/article/isciesci/45/9/45_KJ00001013064/_pdf/-char/ja)\n- 2001-12-15: [安岡 孝一, 日本における最新文字コード事情(後編), システム／制御／情報, 2001, 45 巻, 12 号, p. 687-694, 公開日 2017/04/15, Online ISSN 2424-1806, Print ISSN 0916-1600](https://www.jstage.jst.go.jp/article/isciesci/45/12/45_KJ00001012904/_pdf/-char/ja)\n\n【ネット時代の大きな課題、文字コード・進化の過程】シリーズ\n\n- 2005-08-16: [「漢字の国」にみる、電子機器の文字問題（１）](http://web.archive.org/web/20060221044421/http://news.searchina.ne.jp/disp.cgi?y=2005\u0026d=0816\u0026f=column_0816_001.shtml)\n- 2005-09-01: [「漢字の国」にみる、電子機器の文字問題（２）](http://web.archive.org/web/20060115172043/http://news.searchina.ne.jp:80/disp.cgi?y=2005\u0026d=0901\u0026f=column_0901_003.shtml)\n- 2005-09-14: [「漢字の国」にみる、電子機器の文字問題（３）](http://web.archive.org/web/20051214122423/http://news.searchina.ne.jp:80/disp.cgi?y=2005\u0026d=0914\u0026f=column_0914_004.shtml)\n\nPDF　千夜一夜 PDFなんでも情報ブログ by アンテナハウス株式会社 より\n\n- 2005-12-12: [PDFと文字（1) – 言語と文字](https://blog.antenna.co.jp/PDFTool/archives/2005/12/12/)\n- 2005-12-13: [PDFと文字（2) – 言語と文字　続き](https://blog.antenna.co.jp/PDFTool/archives/2005/12/13/)\n- 2005-12-14: [PDFと文字（3) – 言語と文字 その3](https://blog.antenna.co.jp/PDFTool/archives/2005/12/14/)\n- 2005-12-15: [PDFと文字（4) – 文字の取り扱い](https://blog.antenna.co.jp/PDFTool/archives/2005/12/15/)\n- 2005-12-17: [PDFと文字（5) – テキストを構成する文字](https://blog.antenna.co.jp/PDFTool/archives/2005/12/17/)\n- 2005-12-18: [PDFと文字（6) – 地域別文字規格](https://blog.antenna.co.jp/PDFTool/archives/2005/12/18/)\n- 2005-12-20: [PDFと文字（7) – JISの文字規格](https://blog.antenna.co.jp/PDFTool/archives/2005/12/20/)\n- 2005-12-22: [PDFと文字（8) – JIS X0212, X 0213](https://blog.antenna.co.jp/PDFTool/archives/2005/12/22/)\n- 2005-12-23: [PDFと文字（9) – 中国の文字規格](https://blog.antenna.co.jp/PDFTool/archives/2005/12/23/#000095)\n- 2005-12-24: [PDFと文字（10) – Unicodeの誕生](https://blog.antenna.co.jp/PDFTool/archives/2005/12/pdf10_unicode.html)\n- 2005-12-25: [PDFと文字（11) – UnicodeとISO 10646](https://blog.antenna.co.jp/PDFTool/archives/2005/12/25/#000097)\n- 2005-12-26: [PDFと文字（12) – Unicode仕様の文字](https://blog.antenna.co.jp/PDFTool/archives/2005/12/26/)\n- 2006-01-02: [PDFと文字（13) – Unicode文字の検討](https://blog.antenna.co.jp/PDFTool/archives/2006/01/02/)\n- 2006-01-03: [PDFと文字（14) – CJK漢字統合問題](https://blog.antenna.co.jp/PDFTool/archives/2006/01/03/)\n- 2006-01-04: [PDFと文字（15) – CJK統合漢字拡張](https://blog.antenna.co.jp/PDFTool/archives/2006/01/04/)\n- 2006-01-05: [PDFと文字（16) –漢字統合の破綻](https://blog.antenna.co.jp/PDFTool/archives/2006/01/05/)\n- 2006-01-06: [PDFと文字（17) – 統合漢字の理論](https://blog.antenna.co.jp/PDFTool/archives/2006/01/06/)\n- 2006-01-07: [漢字統合の3次元モデルについてKen Lundeの誤り](https://blog.antenna.co.jp/PDFTool/archives/2006/01/07/)\n- 2006-01-09: [PDFと文字（18) –Unicodeの漢字関連ブロック](https://blog.antenna.co.jp/PDFTool/archives/2006/01/09/)\n- 2006-01-10: [PDFと文字（19） – 漢字統合問題再検討](https://blog.antenna.co.jp/PDFTool/archives/2006/01/10/)\n- 2006-01-11: [PDFと文字（20) – 字体と字形](https://blog.antenna.co.jp/PDFTool/archives/2006/01/11/)\n- 2006-01-12: [PDFと文字（21) – 大文字セット](https://blog.antenna.co.jp/PDFTool/archives/2006/01/12/)\n- 2006-01-13: [PDFと文字（22) – グリフとグリフセット](https://blog.antenna.co.jp/PDFTool/archives/2006/01/13/)\n- 2006-01-15: [PDFと文字 (23) – Adobe-Japan1](https://blog.antenna.co.jp/PDFTool/archives/2006/01/15/)\n- 2006-01-16: [PDFと文字 (24) – Adobe-GB1, Adobe-CNS1, Adobe-Korea1](https://blog.antenna.co.jp/PDFTool/archives/2006/01/16/)\n- 2006-01-17: [PDFと文字 (25) – CMapで文字コードからCIDへ変換](https://blog.antenna.co.jp/PDFTool/archives/2006/01/17/)\n- 2006-01-18: [PDFと文字（26) – ハングルの扱い](https://blog.antenna.co.jp/PDFTool/archives/2006/01/18/)\n- 2006-01-19: [PDFと文字 (27) – アラビア文字の扱い](https://blog.antenna.co.jp/PDFTool/archives/2006/01/19/)\n- 2006-01-20: [PDFと文字 (28) – アラビア文字のプログラム処理](https://blog.antenna.co.jp/PDFTool/archives/2006/01/20/)\n- 2006-01-21: [PDFと文字 (29) – アラビア文字表示形](https://blog.antenna.co.jp/PDFTool/archives/2006/01/21/)\n- 2006-01-22: [PDFと文字 (30) – アラビア文字Harakatの結合処理](https://blog.antenna.co.jp/PDFTool/archives/2006/01/22/)\n- 2006-01-23: [PDFと文字 (31) – リガチャ](https://blog.antenna.co.jp/PDFTool/archives/2006/01/23/)\n- 2006-01-24: [PDFと文字 (32) – 文字コードと情報交換を考える](https://blog.antenna.co.jp/PDFTool/archives/2006/01/24/)\n- 2006-01-26: [PDFと文字 (33) – ラテンアルファベット](https://blog.antenna.co.jp/PDFTool/archives/2006/01/26/)\n- 2006-01-27: [PDFと文字 (34) – Unicodeの結合文字](https://blog.antenna.co.jp/PDFTool/archives/2006/01/27/)\n- 2006-01-28: [PDFと文字 (35) – 文字の合成方法](https://blog.antenna.co.jp/PDFTool/archives/2006/01/28/)\n- 2006-01-29: [PDFと文字 (36) – 文字の合成方法（続き）](https://blog.antenna.co.jp/PDFTool/archives/2006/01/29/)\n- 2006-01-30: [PDFと文字 (37) – 結合文字列の正規合成](https://blog.antenna.co.jp/PDFTool/archives/2006/01/30/)\n- 2006-02-01: [PDFと文字 (38) – Unicode標準形NFCの実装](https://blog.antenna.co.jp/PDFTool/archives/2006/02/01/)\n- 2006-02-02: [PDFと文字 (39) – Windowsへ表示とPDF作成の相違](https://blog.antenna.co.jp/PDFTool/archives/2006/02/02/)\n- 2006-02-03: [PDFと文字 (40) – Unicode標準形式NFCの問題点](https://blog.antenna.co.jp/PDFTool/archives/2006/02/03/)\n- 2006-02-07: [PDFと文字 (41) – Unicode標準形式NFCの問題点（続き)](https://blog.antenna.co.jp/PDFTool/archives/2006/02/07/)\n- 2006-02-09: [PDFと文字 (42) – ハングル音節文字の合成](https://blog.antenna.co.jp/PDFTool/archives/2006/02/09/)\n- 2006-02-11: [PDFと文字 (43) – ラテンアルファベットのリガチャ](https://blog.antenna.co.jp/PDFTool/archives/2006/02/11/)\n\nその他\n\n- 2012-08-16: [文字数制限 - yanok.net](http://yanok.net/2012/08/post-226.html)\n- 2016-11-07: [Unicodeとは？ その歴史と進化、開発者向け基礎知識 - Build Insider](https://www.buildinsider.net/language/csharpunicode/01)\n- 2016-11-14: [Unicodeと、C#での文字列の扱い - Build Insider](https://www.buildinsider.net/language/csharpunicode/02)\n- 2017-11-14: [絵文字を支える技術の紹介](https://qiita.com/nonanona/items/b148c212ba7c24942e93)\n- 2018-04-28: [ㇹ゚ン゚'ㇳ̃ヴ゙ニ゙コ゚ヮヰ文̂字̠コ゚−ト゚ノ゙ㇵナ゚ㇱ(現在に至るまでの文字コードの軌跡と簡単な使い方について) - へっぽこびんぼう野郎のnewbie日記](https://heppoko.hatenadiary.jp/entry/2018/04/28/184559)\n\n\n# C++とUnicode\n\nいやぁ長かったですがここまでがまえがきです(えっ\n\n## C/C++における標準化以前の文字の扱い\n\nそもそもC/C++には組み込み型としてとくに文字を表すための型があるわけではありません。じゃあ`char`はどうなんだということですが、あれは断じて文字を表すための型ではありません。\n\nだいたいC標準では文字を受け取る引数は`int`型だったりしますし、一方C++では`char`だったり極めて乱暴でいい加減な取り扱いです。~~Cを作り上げた連中の脳みそを解剖してみたい~~。\n\nなぜか？ASCIIこそが文字なのであってそれ以外は2流市民だからです。平家にあらずんば人にあらず(正確にはこの一門にあらざらん者は、みな人非人たるべし)ってやつです。つまり文字とは8bitで表されるという認識なのです。\n\nC++標準化委員会のメンバーの認識も概ねそこから揺らぎません。\n\n## 日本のC++への影響力の低下\n\nC++の規格書はC++標準化委員会(WG21)で議論されて規格化、ISOから発行されます。\n\nさて、ISOの標準化プロセスには国を代表して標準化委員会の議論に関わる各国の支部があり、National Body(NB)コメントを受け付けるフェーズがあるのだそうです。\n\n日本にも支部があり、C++03の頃までは規格書の翻訳をしてJISとして発行する作業が行われたのだそうですが、C++11以降そういう作業は行われていないのだそうです。\n\n江添亮氏の古いブログを引っ張ってくると\n\n\u003e[本の虫: 日本語のC++参考書の行く末](https://cpplover.blogspot.com/2013/10/c.html)\n\u003e2013-10-28\n\u003e\n\u003e そもそも、英語で書かれているC++の標準規格はどうなのか。金はどこから出るのか。C++の標準規格は、C++標準化委員会で議論され、検証され、文面案を書き、投票されて、ドラフトに入り、最終的に規格として制定される。どこから金が出ているのか。C++標準化委員会のメンバーは、個人で参加している者もいるが、大半はスポンサーがいる。スポンサーがC++の規格や、教育や、コンパイラーやライブラリの実装などに長けた人間に金を出して、C++の標準規格の作業に従事させているのだ。そうすることによって、スポンサーは、C++の規格を、スポンサーにとって都合がいいように、影響を与えることができる。\n\u003e\n\u003e日本では、今、このスポンサーが存在しない。かつては存在したのだ。\n\u003e\n\u003eC++標準化員会は、私もいまいち仕組みがよく分かっていないのだが、私としては、C++ Working Groupという単位の印象が強い。C++WGは、主要な各国に支部があり、日本にも支部がある。私もそこに、スポンサーなしの個人として籍をおいている。\n\u003e\n\u003e最初のC++の正式な規格、C++98は、1998年に制定された。当時、日本では、C++の標準規格の日本語訳がほしいと考えるスポンサーがたくさんいた。そのため、スポンサーに雇われたC++WGのメンバー達は、作業を分担してC++の標準規格の全文を翻訳し、同等のJIS規格として制定した。\n\u003e\n\u003eしかし、いまC++11の規格書の日本語訳は存在しない。一体どうなっているのか。C++標準化委員会は何をしているのか。これは、スポンサーがいないためである。\n\u003e\n\u003eこれは私の誤解と偏見で語るのだが、どうもC++WGの日本支部というのは、その前身が、EC++団体の人間だったらしいのだ。 \n\n先程の絵文字は多くの日本人や日本向けにサービスを行うに当たり十分に理解している人たちの支援があったわけですが、C++に関しては日本からのNBコメントは期待できない状況にあり、他国に任せっきり、という状態です。中国/韓国/ベトナムにC++Working Groupってあるのかな・・・？\n\n## C++98とUCS\n\nこの頃はまだUnicodeがどうなっていくのか誰もわからない状況。しかも固定長に文字が収まるという夢をみんな見ていた。\n\n何れにせよどうなるかわからない以上実装依存とするより他になく、`wchar_t`型が導入されたものの、特にどのようなエンコードを利用するかは規定せず、\n\n\u003ewchar_t型のひとつのオブジェクトは、実装がサポートするロケールの文字セットの任意の一文字を表現できる。\n\nということにした。これが幻想であったことに気がつくのはもう少し後の話である。\n\nこのように`wchar_t`は実装依存のエンコードが用いられる。じつのところUnicodeのいずれかのエンコードであるとすら定まっていない。\n\n`__STDC_ISO_10646__`マクロが定義されているときのみ、`wchar_t`はUnicodeのいずれかのエンコードを用いていることが保証される。\n\nそしてC++はISO/IEC 10646-1:1993を参照している。ちなみにこの頃は`UTF-8`/`UTF-16`/`UTF-32`というものはなく`UCS-2`/`UCS-4`とか呼んでいた。\n\nなお恐ろしいことに規格書的にはC++17が出ている今なお1993年のものを参照し続けている。[P0417R0: ISO 10646:2014](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r0.html)という2014年のを見るように変えようぜっていう提案も出たのだが、通った気配がない。\n\n### `__STDC_ISO_10646__`\n\nこのマクロは先に`wchar_t`がUnicodeのいずれかのエンコードを用いていることを保証すると同時に、実装がいつのISO/IEC 10646-1規格を参照しているかを示している。値は`yyyymmL`(例:199712L)のようになっている。\n\nちなみに[皆様おなじみWandboxのclang7.0.0で値を調べたところ](https://wandbox.org/permlink/8i9A66SyMbgUTT7K)、`201505`になった。\n\n## 劣等生の地位に置かれた`wchar_t`\n\nそもそも`char`すらどんなエンコードであるかの保証がないにもかかわらず、そんなことは都合よく忘れ、`wchar_t`は実装依存でポータブルではないなどとのたまう輩やはては`wchar_t`はMicrosoftの独自拡張だ、などと言い出す輩が現れた。\n\n標準規格上だけ見ても劣等生の位置に置かれた。\n\nlocaleというやつがある。役割はisspace, isprint, iscntrl, isupper, islower, isalpha, isdigit, ispunct, isxdigit, isalnum, isgraphの分類と、文字コードの変換である。表面上は`charT`という任意の文字型に対して扱えるように見える。しかしそれは完全な誤りであり、設計をよく見れば見るほど`char`以外を想定していない。\n\nもちろん文字コードの変換はぶっ壊れており、その他は無駄に役に立たないロケールを見に行く分だけパフォーマンスを悪化させるゴミである。まともなC++erなら`isdigit`など使うことはできないはずであることは経験則で知っているはずだ。\n\n最悪なことにlocaleは文字列から数値変換を担うもっとも基底に位置する関数である`strtol`系関数にも影響を与える。つまり\n\n```cpp\nint n;\nstd::cin \u003e\u003e n\n```\n\nのようなコードですら影響下にある。完全にぶっ壊れたゴミにもかかわらずそこかしこに顔をだすんだから始末に負えない。\n\nなお極めて残念なことにC++17が出ている現在でも状況は悪化の一途をたどっている。一刻も早くdeprecatedにしなければならない。\n\nその他の例を見てみよう。file I/Oではファイル名を指定する機会が多い。\n\n```cpp\nstd::fstream file(\"path/to/file\");\n```\n\nしかし、このpath指定にはなんと`char`しか用いることができない。Unicodeに関してだけは我々の救世主であるMicrosoftが提供するC++の実装では、`wchar_t`も受け付けるように独自拡張がなされている。\n\nC++17で追加されたfilesystemライブラリによって、ようやくどうにかUnicodeなpathを取り扱う手段が提供された。\n\n## 崩壊した`wchar_t`型\n\n先にも述べたように、\n\n\u003ewchar_t型のひとつのオブジェクトは、実装がサポートするロケールの文字セットの任意の一文字を表現できる。\n\nという形で`wchar_t`型は定義された。しかし現実にはどうなったか。\n\nMicrosoft Windows環境においては`wchar_t`はUTF-16をつかう、という事になった。これはWin32APIによるところが大きい。先に述べた\n\n\u003eMicrosoftがUnicodeといえば、もれなくUTF-16を指す。\n\nというのはそういうことだ。\n\nその他のLinuxとかとかではUTF-32だ、という事が多い。これはコードポイントと一致するエンコードだからだろうか。\n\n追記:\n\u003e[char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)\n\u003e(前略)元々そこに詰められていたのはEUCの類だったわけです。\n\u003e\n\u003eという経緯が分かると、なぜC/C++標準で執拗にUnicode決めうち仕様を避けているのかが分かってくるのではないでしょうか。\n\nごめんよ、EUC、普通に脳内から存在を抹消していたでござる。\n\nいずれにせよ結合文字列などがある以上、すでに任意の一文字を固定長で表すことはできず、ここに`wchar_t`型は崩壊した。\n\nまた`wchar_t`型の大きさが規定されなかったため、portableに文字をやり取りする型として利用できなかったという事情もある。\n\nそんな状況からか、mingw環境ではまともに`wchar_t`型が使えない状況が続いている。\n\n## `utf16_t`型の提案\n\n2001年に実はC/C++に対してUnicode側から`utf16_t`型を追加しようぜという提案があったことを執筆時に初めて知った。\n\n[Proposal for a C/C++ language extension to support portable UTF-16](http://www.unicode.org/~asmus/stdc-utf-16.txt)\n\nこれだ。提案内容をまとめると\n\n- UTF-16を保証する型として`utf16_t`型を追加する\n- `utf16_t`型な文字列リテラルを作るためにprefixとして`u`を追加する\n- エンディアン(バイトオーダー)は処理系に依存する\n\nというものだ。UTF16だけに絞っている理由は、メモリー効率が`UTF-8`/`UTF-16`/`UTF-32`を比較したときに`UTF-16`がもっとも良くなるからだ。未だにメモリーは貴重な時代であり、またキャッシュミスを起こしにくくするという意図もあったらしい。\n\nと同時にすでに当時、WindowsやJava、データベースが`UTF-16`に対応しており、`UTF-16`を保証する型が必要やろ、という主張だった。\n\n## Boost.locale事件\n\nUnicodeに対して理解を示す人が多く現れる一方で、誤った情報に惑わされたり、旧来の英語第一主義、8bit文字主義に囚われた人も数多く存在した。ここでBoostというC++標準のSTLの実験場とも言われる場で起こったささやかな事件を紹介するとしよう。\n\n2011年にBoost.localeが採択された。しかしその内容に皆さんご存知の江添亮氏が異議を唱えた。\n\n問題は何だったか。Boostという場に持ち込まれるようなライブラリにもかかわらず、英語第一主義でその他の言語を2級市民扱いしていたこと、おおよそ世界に星のように存在する言語を取り扱うに適さないインターフェース、謎のUTF-16嫌悪、狂信的`char`型信仰など問題のかたまりであった。\n\n`std::locale`がぶっ壊れているのはもう諦めたがBoostよ、お前もか。\n\n- 2011-04-19: [本の虫: Boost.Localeがクソすぎる](https://cpplover.blogspot.com/2011/04/boostlocale.html)\n- 2011-04-24: [本の虫: Boost.Localeが採択された](https://cpplover.blogspot.com/2011/04/boostlocale_24.html)\n- 2011-04-27: [本の虫: Boost.localeは何の冗談だ](https://cpplover.blogspot.com/2011/04/boostlocale_27.html)\n- 2011-04-28: [本の虫: Japanese programmers don't know English](https://cpplover.blogspot.com/2011/04/japanese-programmers-dont-know-english.html)\n- 2011-04-28: [本の虫: Translation is impossible](https://cpplover.blogspot.com/2011/04/translation-is-impossible.html)\n- 2011-05-03: [本の虫: How Not To Localize Your Software](https://cpplover.blogspot.com/2011/05/how-not-to-localize-your-software.html)\n- 2011-05-18: [本の虫: Sorting it all Out: 英語を強制させないことだってできるさ。あるいはアホになるか。どっちでもいいけど](https://cpplover.blogspot.com/2011/05/sorting-it-all-out.html)\n\n## C++11とUnicode\n\nさて、当初C++0xと呼ばれていたC++03の次の規格は議論が長引き、0xのxは実は16進数なんだとかいう皮肉が飛び出し、しまいにはC++1xと呼ばれ、ようやくC++11が発行された。\n\nその詳細はすでにご存知の人が大半だろうが、改めて見ていこう。\n\n### `char16_t`/`char32_t`型の追加\n\nref: [char16_tとchar32_t - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp11/char16_32.html)\n\n16bitと32bitの文字を表すための型として`char16_t`/`char32_t`型が追加された。\n\nここで大切なのは`UTF-16`/`UTF-32`の保証がないことである。\n\n`char16_t`/`char32_t`型な文字列リテラルを作るために文字列リテラルのprefixとして`u`/`U`が追加された。\n\n```cpp\nu\"ありきたり\";//__STDC_UTF_16__が定義されていればUTF-16でさもなくば実装依存のエンコード\nU\"ありきたり\";//__STDC_UTF_32__が定義されていればUTF-32でさもなくば実装依存のエンコード\n```\n\n同様に文字リテラルに対してもprefixが追加された。\n\n`__STDC_UTF_16__`/`__STDC_UTF_32__`マクロが定義されているときのみ`UTF-16`/`UTF-32`の保証があり、さもなくば実装依存である。あちこちの解説が間違えまくっているのだが、常に`UTF-16`/`UTF-32`の保証があるってわけではない。\n\nどうやらC/C++は同じくISOから出ているUnicodeに意地でも依存したくないらしい。\n\n### UTF-8文字列リテラル\n\nref:\n\n- [UTF-8文字列リテラル - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp11/utf8_string_literals.html)\n- [UTF-8文字リテラル - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp17/utf8_character_literals.html)(C++17)\n\n同じくISOから出ているUnicodeに意地でも依存したくないのかと思いきや、もう片方では手のひらを返す内容が追加された。\n\n```cpp\nu8\"ありきたり\";//確実にUTF-8でエンコードされる\n```\n\n`u8`を文字列のprefixにつけると確実にUTF-8になる。嘘かと思った読者のためにわざわざC++11の規格書を引っ張ってこよう。\n\n\u003e§ 2.14.5 String literals [lex.string]\n\u003e\n\u003e7 A string literal that begins with u8, such as u8\"asdf\", is a UTF-8 string literal and is initialized with the given characters as encoded in UTF-8.\n\nほーら、まじでUTF-8って明確に書いてある。何たる手のひら返し！\n\nちなみに文字リテラルに対するprefix`u8`はC++17まで先送りされた。意味がわからない。\n\nさて、ここで恐ろしい話として、`u8`prefixが付いた文字列リテラルの型はprefixなしに等しい。つまり`char8_t`ではなく`char`なのである。これについては後述する。\n\n### `std::wstring_convert`/`std::codecvt_utf8`/`std::codecvt_utf8_utf16`\n\nref:\n\n- [wstring_convert - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/locale/wstring_convert.html)\n- [codecvt_utf8 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html)\n- [codecvt_utf8_utf16 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html)\n\n文字コードの変換も標準に追加された。先に言っておくと仕様がガバのプーさんでセキュリティ的リスクまであるという事がわかりC++17でdeprecatedになった。\n\nこいつはUnicode間の変換をするもので、大きく2通りの利用の仕方が存在した。\n\n１つ目は`std::wstring_convert`を利用した`basic_string`の変換で、\n\n```cpp\nstd::wstring_convert\u003cstd::codecvt_utf8\u003cchar32_t\u003e, char32_t\u003e converter;\n\n// UCS-4/UTF-32からUTF-8に変換\nstd::u32string u32str = U\"\\U0001F359\";\nstd::string u8str = converter.to_bytes(u32str);\n// UTF-8からUCS-4/UTF-32に変換\nstd::u32string restored = converter.from_bytes(u8str);\n```\n\n```cpp\nstd::wstring_convert\u003cstd::codecvt_utf8_utf16\u003cchar16_t\u003e, char16_t\u003e converter;\n\n// UTF-16からUTF-8に変換\nstd::u16string u16str = u\"\\U0001F359\";\nstd::string u8str = converter.to_bytes(u16str);\n// UTF-8からUTF-16に変換\nstd::u16string restored = converter.from_bytes(u8str);\n```\n\nのように利用した。\n\nもう一つはstreamに対して\n\n```cpp\nwifstream ifs(\"UTF-8N.txt\");\nifs.imbue(locale(locale::empty(), new codecvt_utf8\u003cwchar_t\u003e));\n```\n\nのように渡す利用法である。ちなみにこの場合\n\n```cpp\n#include \u003cfstream\u003e\n#include \u003ccodecvt\u003e\nint main()\n    std::wifstream file;\n    file.open(\"arikitari_na_text.txt\");\n    static_assert(sizeof(wchar_t) == 2, \"error.\");//Linuxではつかうcvt違うから直してくれ\n    file.imbue(std::locale(std::locale(\"\"), new std::codecvt_utf8_utf16\u003cwchar_t, 0x10ffff, std::consume_header\u003e()));\n    if(!file) return -1;\n    //なんか\n}\n```\n\nのようにするとBOM skipができた。\n\nref: [C++のstreamでbom skipする方法をまた忘れないうちに書き留める](https://qiita.com/yumetodo/items/3744afa94ab029f4e1d5)\n\nただし最初に述べたようにC++17でdeprecatedになりました。\n[P0618R0 Deprecating `\u003ccodecvt\u003e`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)\n\n理由を意訳すると\n\n- 不正なコードポイントに対する安全なエラー処理の方法を提供していなかったため、セキュリティ上の欠陥があった。\n- 試しに使おうとしたけどあまりにも複雑過ぎていっちょんわからんかった\n- まともに実装されてない。libstdc++は最近(注:2017年3月からみて)やっと実装したくらいだし誰も使ってねーだろ(注:MSVCもまともに実装されたのはVS2015からという印象)\n- Unicodeじゃないエンコード(Shift-JISとかBig5とかな)はどんどん利用されなくなっているから(そいつらは無視していいのにもかかわらずそいつらの対応を視野に入れているせいで無駄に複雑で安全ではないゴミのような)`codecvt`はさっさと非推奨にしろ。このクソが歴史的負債になる前に。\n\nといった感じだった。\n\n付け加えておくとパフォーマンス的にもクソで、\n[utf8 のファイルの読み込み](https://qiita.com/AsladaGSX/items/af50066dbbfd59991af9)\n見限って自力で変換を書いて`streambuf`化する人まで現れた。\n\ndeprecatedになった第一報を聞いたときは驚いたけど、\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://t.co/Zercxns9Jz\"\u003ehttps://t.co/Zercxns9Jz\u003c/a\u003e\u003cbr\u003eP0618R0 Deprecate \u0026lt;codecvt\u0026gt;\u003cbr\u003e\u0026gt;Users should use dedicated text-processing libraries instead.\u003cbr\u003eえっ、つまりC++標準は文字コード変換を放棄した？\u003c/p\u003e\u0026mdash; yumetodo-鳥の氷河から逃げる (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/848908997637816321?ref_src=twsrc%5Etfw\"\u003eApril 3, 2017\u003c/a\u003e\u003c/blockquote\u003e\n\nよくよく考えればdeprecatedになってくれてよかった。\n\nそんなわけでC++17現在C++標準はUnicode同士の変換を提供していなくて、各自適当なライブラリを使えとのこと。\n\n## 参考資料\n\n- 2010-04-10: [本の虫: C++0x本：UnicodeとUCSについて](https://cpplover.blogspot.com/2010/04/c0xunicodeucs.html)\n- 2010-05-25: [本の虫: 最近の若い者は・・・](https://cpplover.blogspot.com/2010/05/blog-post_25.html)\n- 2010-06-10: [本の虫: C++のlocaleがクソすぎる](https://cpplover.blogspot.com/2010/06/clocale.html)\n- 2013-10-20: [本の虫: 2013-10 post-Chicago mailingの簡易レビュー](https://cpplover.blogspot.com/2013/10/2013-10-post-chicago-mailing.html)\n- 2013-10-28: [本の虫: 日本語のC++参考書の行く末](https://cpplover.blogspot.com/2013/10/c.html)\n- 2014-03-25: [本の虫: 2014-02-post-Issaquahのレビュー: N3900-3909](https://cpplover.blogspot.com/2014/03/2014-02-post-issaquah-n3900-3909.html)\n- 2016-01-20: [本の虫: C++標準化委員会の文書のレビュー: P0160R0-P0172R0](https://cpplover.blogspot.com/2016/01/c-p0160r0-p0172r0.html)\n- 2016-09-12: [本の虫: C++標準化委員会の文書: P0411R0-P0417R0](https://cpplover.blogspot.com/2016/09/c-p0411r0-p0417r0.html)\n- 2017-03-02: [P0618R0 Deprecating \u003ccodecvt\u003e](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0618r0.html)\n- [codecvt_utf8 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/codecvt/codecvt_utf8.html)\n- [codecvt_utf8_utf16 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/codecvt/codecvt_utf8_utf16.html)\n- [wstring_convert - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/locale/wstring_convert.html)\n- [utf8 のファイルの読み込み](https://qiita.com/AsladaGSX/items/af50066dbbfd59991af9)\n\n# UnicodeとC++のこれから\n\nここまでUnicodeとC++が、人類がそれにどう向き合ってきたかを見てきた。\n\nではUnicodeとC++のこれからについて見ていこう。\n\n## Unicodeの各エンコードを保証する型がなぜ必要か\n\nUnicodeではない文字エンコードの利用が減ってきている現代に置いて、UnicodeをC++がまともにサポートすることは極めて重要である。\n\nUnicodeの普及率は凄まじい。例えばUTF-8は全Webサイトのうち90%を超える割合で利用されている。\n\nもはやUnicodeは全世界のありとあらゆる文字セットの全体集合としての役割を果たしている。ローカライズの文脈でもしUnicodeではない文字エンコードを利用するとしても実装コスト的にそれはUnicodeとの変換で扱うことを検討すべき時代なのだ。\n\n`wchar_t`は文字が固定長で表せるという幻想のもとに設計された。今となっては時代遅れである。\n\nC++11で`char16_t`/`char32_t`型が追加された一方で`char8_t`型が入らなかった。\n明らかにその他大勢のエンコードとUTF-8は区別されるべきであるのにもかかわらず`char`に悪魔合体させられている。\n\n`char16_t`/`char32_t`についても問題があり、それぞれ`UTF-16`/`UTF-32`を必ずしも保証しない。\n\nしかも面白いことになぜか`u8`prefixの文字列リテラルだけはUTF-8が保証された。\n\nUnicodeにC++がまともに向き合うには\n\n- UTF-8を保証する`char8_t`型の追加\n- `char16_t`/`char32_t`は`UTF-16`/`UTF-32`を保証する\n\nが最低限必要不可欠である。core言語側でこの対応が入りさえすればあとはlibraryが腐ってても各々作ることでデータのやり取りが可能だ。逆にこれが入らない限りユーザが勝手気ままにこれに相当する型をつくり、互換のない地獄がさらに続く。\n\n標準ライブラリの中ですら、すでに弊害が出ている。\n\nC++17ではfilesystemライブラリが追加された。パスを表すクラスとして`path`というクラスが追加された。\n\n```cpp\nint main()\n{\n    using namespace std::filesystem ;\n\n    // ネイティブナローエンコード\n    path p1( \"/dev/null\" ) ;\n    // ネイティブワイドエンコード\n    path p2( L\"/dev/null\" ) ;\n    // UTF-16エンコード\n    path p3( u\"/dev/null\" ) ;\n    // UTF-32エンコード\n    path p4( U\"/dev/null\" ) ;\n}\n```\n\nまず面白いことに`char16_t`/`char32_t`型は`UTF-16`/`UTF-32`の保証がないにもかかわらず、filesystem libraryの文面によれば`UTF-16`/`UTF-32`だとしている。つまり`__STDC_UTF_16__`/`__STDC_UTF_32__`マクロが定義されていない環境では壊れてしまう。\n\nさらに大きな問題がある。`u8`prefixの付いた文字列リテラルはUTF-8でエンコードされる保証が存在するが、これを直接\n\n```cpp\nint main()\n{\n    using namespace std::filesystem ;\n\n    // ネイティブナローエンコードとして解釈される\n    path p( u8\"ファイル名\" ) ;\n}\n```\n\nのように渡すと、ネイティブナローエンコードとして解釈されるため、たまたま偶然ネイティブナローエンコードがUTF-8でない限り、壊れてしまう。\n\n流石にまずいと考えたのか\n\n```cpp\nint main()\n{\n    using namespace std::filesystem ;\n\n    // UTF-8エンコードとして解釈される\n    // 実装の使う文字エンコードに変換される\n    path = u8path( u8\"ファイル名\" ) ;\n}\n```\n\nのように、`path`クラスを生成する`u8path`関数がある。まったく直感的ではない。もし`char8_t`があれば単にコンストラクタをoverloadできたであろうに。\n\n## `char8_t`型反対派の主張\n\nC++11以前、`char16_t`/`char32_t`型が提案されていたころ、`char8_t`型に触れられることはなかった。最初から提案すらされていなかったのだ。\n\n\u003e[本の虫: C++標準化委員会の文書: P0370R1-P0379R0](https://cpplover.blogspot.com/2016/09/c-p0370r1-p0379r0.html)\n\u003eC++11のときにchar8_tが必要だと訴えたら、charは古典的にバイト列を表現する型なので十分だ。char型以外の型があるのは混乱する。などと理解のないUnicodeの世界に生きていない名だたる委員達から散々に批判された。その委員達も、今では、「やっぱりchar8_tがないのは失敗だったなぁ」とぼやいている。それ見たことか。 \n\nこのbyte列という概念が曲者であることがよく分かるエピソードがある。\n\n2018年7月23日、東京大手町のMorgan Stanleyにて[C++ Now and Tomorrow](http://www.morganstanley.co.jp/ja/people/students-graduates/events-programs/2018-bjarne-stroustrup-now-and-tomorrow)が開催された。そこに参加した私はC++の始祖たるBjarne Stroustrup氏になぜchar8_t型がないのか聞く機会を得た。内容は\n[C++ Now and TomorrowでBjarne Stroustrup氏になぜchar8_t型がないのか聞いてきた](https://qiita.com/yumetodo/items/2f2d95e8fabd78a5d0c8)\nにまとめてある。\n\n要約すると\n\n1. 文字エンコードをって別にUnicodeだけじゃなくて日本語にはSJISがあるし、そもそもASCIIあるやん。\n2. Unicodeを特別扱いしたくない\n3. 文字エンコードについてはlibraryでどうにかするべきだ、core言語は何もしない\n\nというものである。まったく文字の何たるかを理解していない。(英語力不足によるtranslation lostを十分差し引いてお読みください)\n\nUnicodeが世界中の文字セットの全体集合として機能しているのは、断じて一時的なものではない。利用状況を見てもShift-JISやBig5などのUnicodeではないエンコードの利用は低下している。\n\nUnicode対応にcore言語でのサポートが必要なのは明らかである。なぜか。\n\nまずあきらかに`char`と区別がつく形で`char8_t`型が必要だ。`unsigned char`などの既存の型の流用ではoverloadできない。\n\nさらに\n\n```cpp\nenum class char8_t : unsigned char {};\n```\n\nのようなenum classを使うのもだめだ。`u8`prefixの付いた文字列リテラルを使うのにヘッダーファイルのincludeが必要になってしまう。\n\n組み込み型で独立した型として`char8_t`型が必要である。これはcore言語で対応する案件だ。\n\n## `char8_t`を追加する提案の変遷\n\n- [N3398: String Interoperation Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3398.html)\n- [P0372R0: A type for utf-8 data](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0372r0.html)\n- [P0482R0: char8_t: A type for UTF-8 characters and strings](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0482r0.html)\n- [P0482R1: char8_t: A type for UTF-8 characters and strings (Revision 1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r1.html)\n- [P0482R2: char8_t: A type for UTF-8 characters and strings (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r2.html)\n- [P0482R3: char8_t: A type for UTF-8 characters and strings (Revision 3)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r3.html)\n- [P0482R4: char8_t: A type for UTF-8 characters and strings (Revision 4)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r4.html)\n- [P0482R5: char8_t: A type for UTF-8 characters and strings (Revision 5)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r5.html)\n\n以上がC++標準化委員会に出ていた`char8_t`型を何らかの方法で追加する提案である。\n\n注意点は、この提案の`char8_t`型はUTF-8であることを保証していない。現状の`char16_t`/`char32_t`と同じだ。まあ実用上は困らないと言えるが。\n\n同時並行でC言語の標準化委員会にも\n\n- [N2231: char8_t: A type for UTF-8 characters and strings](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2231.htm)\n\nが出ている。\n\n最終的にP0482R5がC++20に採用された。C++標準化委員会、ついに文字とは何かを理解する！\n\nではその詳細を見ていこう。とはいえそろそろ力尽きてきたので江添亮氏のブログで解説されている部分は引用にとどめ、その他も詳しくは書かない。\n\n### N3398\n\n\u003e[本の虫: 2012-09 pre-Portland mailingのあまり簡易ではないレビュー](https://cpplover.blogspot.com/2012/10/2012-09-pre-portland-mailing.html)\n\u003e 文字列などの変換を行うライブラリ。\n\u003e\n\u003eこの提案は、char8_tをunsigned charのtypedef名としている。signed char, unsigned char, charは区別されるので、通常のcharとは区別できるから問題ないとしている。そんな奇妙な解決方法は嫌だ。char8_tは本物の型であるべきだし、そもそもUTF-8文字リテラルとUTF-8文字列リテラルは、char8_t型であるべきだったのだ。\n\u003e\n\u003echar8_tをunsigned charのtypedef名とする、この提案はクソだ。それならない方がましだ。 \n\n### P0372R0\n\n\u003e[本の虫: C++標準化委員会の文書: P0370R1-P0379R0](https://cpplover.blogspot.com/2016/09/c-p0370r1-p0379r0.html)\n\u003e UTF-8の1単位を表現するchar8_t型の提案。\n\u003e\n\u003echar8_tからcharへの標準変換はできるが、逆はできない。\n\u003e\n\u003eC++11のときにchar8_tが必要だと訴えたら、charは古典的にバイト列を表現する型なので十分だ。char型以外の型があるのは混乱する。などと理解のないUnicodeの世界に生きていない名だたる委員達から散々に批判された。その委員達も、今では、「やっぱりchar8_tがないのは失敗だったなぁ」とぼやいている。それ見たことか。 \n\n### P0482R0\n\n\u003e[本の虫: C++標準化委員会の文書: P0480R0-P0489R0](https://cpplover.blogspot.com/2016/11/c-p0480r0-p0489r0.html)\n\u003e UTF-8文字型であるchar8_tの提案。\n\u003e\n\u003eUTF-8文字列リテラルの型もchar8_t[]型になる。\n\u003e\n\u003e移行のために、char8_t[]からchar[]への暗黙の型変換を追加する。この暗黙の型変換を追加するには標準変換の細かいルールを変更しなければならないので、最初からdeprecated扱いで入れるのもありだ。\n\u003e\n\u003estd::u8stringからstd::stringへの暗黙の変換も提供する。\n\u003e\n\u003e必ず入れなければならない。 \n\ndeprecatedにするのは\n\n- `codecvt\u003cchar16_t, char, mbstate_t\u003e`, `codecvt\u003cchar32_t, char, mbstate_t\u003e`, `codecvt_byname\u003cchar16_t, char, mbstate_t\u003e`, `codecvt_byname\u003cchar32_t, char, mbstate_t\u003e`\n- `std::filesystem::u8path`\n\nの２つ。C++17のUnicode間変換の非推奨化のあともかろうじて生き残っていたネイティブナローエンコードとの変換が非推奨になることで本格的に`codecvt`は完全に空気になる。\nまた`u8path`とかいう馬鹿げた関数もいらないので非推奨にする。\n\n### P0482R1\n\nR0からの変更点はgccをforkして実装してみた話が追加されたり、文章として読みやすくなったくらいである\n\n### P0482R2\n\nR1からの変更点は以下の通り。\n\n- C標準化委員会に提案中のN2231に合わせて`mbrtoc8`と`c8rtomb`関数を追加\n- `basic_ostream\u003cchar\u003e::operator\u003c\u003c()`と`basic_istream\u003cchar\u003e::operator\u003e\u003e()`に対して`char8_t`のoverloadを追加\n\n### P0482R3\n\nR2からの変更点はclangで実装してみた話が追加された。\n\n### P0482R4\n\n割愛\n\n### P0482R5\n\n\u003e[本の虫: C++標準化委員会の2018サンディエゴ会議の結果](https://cpplover.blogspot.com/2018/11/c2018.html)\n\u003eUTF-8文字リテラル、UTF-8文字列リテラルの文字の型を表現するchar8_tを追加する提案。私が9年前にC++0xのときに提案したところ、「でもchatは生のバイト列を表現するのに適切な型だからー」と寝ぼけた主張で却下されたにもかかわらず、後になって「やっぱchar8_tにしとけばよかったなぁ」となったので変更された。私には愚痴を言う権利がある。\n\n変更点は以下の通り\n\n- C標準化委員会に提案中のN2231に依存する文面を非依存な形に書き換え。\n- `hash\u003cpmr::u8string\u003e`の特殊化を追加\n- `atomic_ref`に対する特殊化を追加\n- `u8streampos`を`\u003ciosfwd\u003e`の宣言に書き忘れてたので追記\n- R2で`basic_ostream\u003cchar\u003e::operator\u003c\u003c()`と`basic_istream\u003cchar\u003e::operator\u003e\u003e()`に対して`char8_t`のoverloadを追加したが、この提案文章の動機と関係がなく、`char16_t`/`char32_t`に対して現在同様のものがないため、削除\n- `mbrtoc8`と`c8rtomb`関数の説明を書き忘れていたので追記\n- `codecvt\u003cchar16_t, char, mbstate_t\u003e`, `codecvt\u003cchar32_t, char, mbstate_t\u003e`, `codecvt_byname\u003cchar16_t, char, mbstate_t\u003e`, `codecvt_byname\u003cchar32_t, char, mbstate_t\u003e`と`std::filesystem::u8path`についてはすでにC++20でdeprecatedになることが決まっていたので忘れる\n- `codecvt\u003cchar16_t, char8_t, mbstate_t\u003e`, `codecvt\u003cchar32_t, char8_t, mbstate_t\u003e`, `codecvt_byname\u003cchar16_t, char8_t, mbstate_t\u003e`, `codecvt_byname\u003cchar32_t, char8_t, mbstate_t\u003e`を追加\n\n## `u`/`U`preifx付きの文字列リテラルが`UTF-16`/`UTF-32`でエンコードされることを保証する提案\n\n- [P1041R0: Make char16_t/char32_t string literals be UTF-16/32](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1041r0.md)\n- [P1041R1: Make char16_t/char32_t string literals be UTF-16/32](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1041r1.html)\n\n現状`u`/`U`preifx付きの文字列リテラルはエンコードが規定されていない。一方で`u8`prefix付き文字列リテラルについてはUTF-8が保証されている。なので`UTF-16`/`UTF-32`でエンコードされることを保証する提案。\n\n## C++規格書が参照するUCSの規格書にない用語を利用している問題を解決する提案\n\n- [P0417R0: C++17 should refer to ISO/IEC 10646 2014 instead of 1994](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r0.html)\n- [P0417R1: C++17 should refer to ISO/IEC 10646 2014 instead of 1994 (R1)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0417r1.html)\n- [P1025R0: Update The Reference To The Unicode Standard](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r0.html)\n\n\n現在C++はISO/IEC 10646-1:1993を参照している。ちなみにこの頃は`UTF-8`/`UTF-16`/`UTF-32`というものはなく`UCS-2`/`UCS-4`とか呼んでいた。つまり存在しない用語を利用していることになる。\n\n[FAQ - Unicode and ISO 10646](http://unicode.org/faq/unicode_iso.html)\nで解説されているように、UnicodeとISO/IEC 10646は極めて緊密に連携を取ってはいるものの、完全に同一というわけではない。\n\nP1025R0ではどちらかといえばUnicodeのほう、それも10.0かそれ以降を参照するべきだとし、どうしてもISO/IEC 10646にこだわりたいなら\n\n\u003eISO/IEC 10646:2017 Information technology – Universal Coded Character Set (UCS) plus 10646:2017/DAmd 1, or successor \n\nが該当だとしている。\n\n# C++20に採択されたchar8_t型を追加する提案の不可解な点\n\nP0482R5をよく見るとなぜか`codecvt\u003cchar16_t, char8_t, mbstate_t\u003e`, `codecvt\u003cchar32_t, char8_t, mbstate_t\u003e`, `codecvt_byname\u003cchar16_t, char8_t, mbstate_t\u003e`, `codecvt_byname\u003cchar32_t, char8_t, mbstate_t\u003e`が追加されています。\n\nこれはUnicode間の変換がガバガバなまま復活を遂げたと理解すればいいのでしょうか・・・？\n\n[C++ - C++20に採択されたchar8_t型を追加する提案の不可解な点｜teratail](https://teratail.com/questions/165416)\nにて質問中です。\n\n# まとめ\n\nついに`char8_t`がC++20で追加された。これはC++でまともにUnicodeを扱うための大きな一歩である。しかしC++でUnicodeを扱うための戦いは始まったばかりであり(ry\n\n## 追記1\n\nところでC++でUnicode関連の調査検討を行うStudy Groupとしてsg16というのがあることをすっかり忘れていました。\nhttps://github.com/sg16-unicode\n議事録が長大なREADME.mdにひたすら書かれるという方法で公開されているようです。\n今回のchar8_tの提案もこのsg16の管轄のようで、ほかにはBoost.Textとか言うのが提案されているようです。\nhttps://tzlaine.github.io/text/doc/html/index.html\n\n## 追記2: SG20 Education draft事件\n\n片方で一歩前進するともう片方で二歩後退するのが世の常なのか、SG20 Education(C++教育のためのガイドラインを作る作業部会)で大惨事が起こっているようです。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eSG20 EducationでC++教育のためのガイドラインを作ろうとしているのだが、そのたたき台として示されたドラフトがひどすぎる。\u003ca href=\"https://t.co/eZ3eUgPq1y\"\u003ehttps://t.co/eZ3eUgPq1y\u003c/a\u003e\u003c/p\u003e\u0026mdash; Ryou Ezoe (@EzoeRyou) \u003ca href=\"https://twitter.com/EzoeRyou/status/1083180421515337729?ref_src=twsrc%5Etfw\"\u003e2019年1月10日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eそして、「UTF-8は最初に教えなくてもよい」ときたもんだ。UTF-8以外の文字エンコードは実質死んだ。そもそもプログラミングをはじめる前にみんなUTF-8は使えっている。英語圏ですら、プログラミングを学ぶ前に絵文字を使った経験がない若い世代などいるわけがない。\u003c/p\u003e\u0026mdash; Ryou Ezoe (@EzoeRyou) \u003ca href=\"https://twitter.com/EzoeRyou/status/1083181314432364544?ref_src=twsrc%5Etfw\"\u003e2019年1月10日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003e[D1389R0: Standing Document for SG20: Guidelines for Teaching C++ to Beginners](https://www.cjdb.com.au/wg21/sg20/d1389/d1389#typesbasicprimary-primary-types)\n\u003ehttps://www.cjdb.com.au/wg21/sg20/d1389/d1389#typesbasicprimary-primary-types\n\u003eThe distinction between pre-C++20 and C++20 is simply the acknowldgement of UTF-8. This is not to suggest that students should be introduced to the details of UTF-8 any earlier, but rather to get the idea of UTF-8 support on their radar, so that when they need to care about locales, they won’t need to shift from thinking about why char is insufficient in the current programming world: they can just start using what they are already familiar with.\n\nなんでchar8_tが必要か理解するためにあえて先に教えないとかのたまっている。正気か？\n\nてめーら手元の数学とか何でもいいから教科書を開いてみろ、どこにそんなアホみたいに遠回りして教えようとする教科書がある？\n\n# 補足説明\n\nTwitterやはてなブックマークのコメントを見ていていくつか誤解が生まれているようなので補足します\n\n## `char8_t`型追加はどのレイヤーの話か\n\nC++という言語を語るにあたり、言語そのものを指すcore言語、言語が定める標準ライブラリのSTLがありますが、今回core言語のお話です。\n\n\u003eC++でUnicodeを扱うための戦いは始まったばかりであり\n\nというのは、library側の大改造はこれから、という意味合いでした。\n\n## C++みたいな低レイヤー言語で文字にそんなこだわる？\n\nC++は低レイヤー**も**できる言語であって、用途は多岐にわたり、結構高レイヤーなこともできます。\n\nしたがって文字の話は避けて通れないんですね。\n\n## ユーザー的にはコードポイント単位で扱いたいのでは？\n\nlibraryサイドの話ですね。\n\n個人的には各エンコードの文字列に対してコードポイント単位、グリフ単位でアクセスできるiteratorがほしいところです。\n\nあとUnicode同士の変換。そして正規表現の改善。同時並行でぶっ壊れているlocaleとカビの生えたiostream\n\n# 派生しているWebページ\n\n- [原理主義的に C++ の文字列の扱いを根本から変えるにはどうするべきか - Togetter](https://togetter.com/li/1301253)\n- [C++標準化委員会、ついに文字とは何かを理解する: char8_t - Togetter](https://togetter.com/li/1301398): この記事への反応まとめ\n- [char8_tによせて - なるせにっき](https://naruse.hateblo.jp/entry/2018/12/24/013446)\n- [書記素分割/Unicode カテゴリー判定 | ++C++; // 未確認飛行 C ブログ](https://ufcpp.net/blog/2018/12/unicodecategory/)\n\n# License\n\nCC BY-SA 3.0\n\n![CC BY-SA 3.0](https://upload.wikimedia.org/wikipedia/commons/d/d0/CC-BY-SA_icon.svg)\n","coediting":false,"comments_count":20,"created_at":"2018-12-22T19:33:18+09:00","group":null,"id":"54e1a8230dbf513ea85b","likes_count":863,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"unicode","versions":[]},{"name":"C++20","versions":[]}],"title":"C++標準化委員会、ついに文字とは何かを理解する: char8_t","updated_at":"2019-08-08T12:41:02+09:00","url":"https://qiita.com/yumetodo/items/54e1a8230dbf513ea85b","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cp\u003eさて、2018年11月25日 8:52 JSTに新たにKaTeXにmergeされたpluginがある。mhchemだ。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/KaTeX/KaTeX/pull/1436\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/KaTeX/KaTeX/pull/1436\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003emhchemというのは\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e$\\ce{CO2 + C -\u0026gt; 2 CO}$\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eのように書くと\u003c/p\u003e\n\n\u003cp\u003e$\\mathrm{CO}_{2} + \\mathrm{C} \\rightarrow 2\\mathrm{CO}$\u003c/p\u003e\n\n\u003cp\u003eのように変換してくれる、化学徒の強い味方である。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e$\\mathrm{CO}_{2} + \\mathrm{C} \\rightarrow 2\\mathrm{CO}$\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eと比べれば書きやすさは一目瞭然である(Qiitaでmhchemが使えないので頑張って再現した)\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\\ce\u003c/code\u003eと\u003ccode\u003e\\pu\u003c/code\u003eが追加される。マニュアルは\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://mhchem.github.io/MathJax-mhchem/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://mhchem.github.io/MathJax-mhchem/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにある。もっといろいろできることがわかる。\u003c/p\u003e\n\n\u003cp\u003eもともとMathJax向けに実装されていたのをKaTeX\u003c/p\u003e\n\n\u003cp\u003e現在KaTeXは\u003ccode\u003e0.10.0\u003c/code\u003eが最新だが、これには含まれていない(\u003ccode\u003e0.10.0\u003c/code\u003eが出たのが2018年10月29日 13:23 JSTだからそれはそう)。次のReleaseまで待てない人は\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/KaTeX/KaTeX/blob/master/contrib/mhchem/mhchem.js\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/KaTeX/KaTeX/blob/master/contrib/mhchem/mhchem.js\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを各自サーバーに置いて試すと良い(伝統と信頼のcdn.jsdelivr.netsさんから持ってこれないか画策したがうまくいかない)。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h2\u003e\n\n\u003cp\u003eそういえばKaTeX\u003ccode\u003e0.10.1\u003c/code\u003eで取り込まれましたので\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;script \u003c/span\u003e\u003cspan class=\"na\"\u003edefer\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/mhchem.min.js\"\u003c/span\u003e \u003cspan class=\"na\"\u003eintegrity=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"sha384-oa0lfxCGjaU1LdYckhq8LZcP+JTf8cyJXe69O6VE6UrShzWveT6KiCElJrck/stm\"\u003c/span\u003e \u003cspan class=\"na\"\u003ecrossorigin=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"anonymous\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eを追記すればいいと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"さて、2018年11月25日 8:52 JSTに新たにKaTeXにmergeされたpluginがある。mhchemだ。\n\nhttps://github.com/KaTeX/KaTeX/pull/1436\n\nmhchemというのは\n\n`$\\ce{CO2 + C -\u003e 2 CO}$`\n\nのように書くと\n\n$\\mathrm{CO}_{2} + \\mathrm{C} \\rightarrow 2\\mathrm{CO}$\n\nのように変換してくれる、化学徒の強い味方である。\n\n`$\\mathrm{CO}_{2} + \\mathrm{C} \\rightarrow 2\\mathrm{CO}$`\n\nと比べれば書きやすさは一目瞭然である(Qiitaでmhchemが使えないので頑張って再現した)\n\n`\\ce`と`\\pu`が追加される。マニュアルは\n\nhttps://mhchem.github.io/MathJax-mhchem/\n\nにある。もっといろいろできることがわかる。\n\nもともとMathJax向けに実装されていたのをKaTeX\n\n現在KaTeXは`0.10.0`が最新だが、これには含まれていない(`0.10.0`が出たのが2018年10月29日 13:23 JSTだからそれはそう)。次のReleaseまで待てない人は\n\nhttps://github.com/KaTeX/KaTeX/blob/master/contrib/mhchem/mhchem.js\n\nを各自サーバーに置いて試すと良い(伝統と信頼のcdn.jsdelivr.netsさんから持ってこれないか画策したがうまくいかない)。\n\n## 追記\n\nそういえばKaTeX`0.10.1`で取り込まれましたので\n\n```html\n\u003cscript defer src=\"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/mhchem.min.js\" integrity=\"sha384-oa0lfxCGjaU1LdYckhq8LZcP+JTf8cyJXe69O6VE6UrShzWveT6KiCElJrck/stm\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n```\n\nを追記すればいいと思います。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-12-14T20:33:37+09:00","group":null,"id":"3e04e5de638bab183a49","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"TeX","versions":[]},{"name":"Katex","versions":[]},{"name":"mhchem","versions":[]}],"title":"お知らせ: KaTeXにmhchemがやってくる","updated_at":"2019-07-14T18:03:22+09:00","url":"https://qiita.com/yumetodo/items/3e04e5de638bab183a49","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch2\u003e\n\u003cspan id=\"dxlib-advent-calendar-2018\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib-advent-calendar-2018\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLib Advent Calendar 2018\u003c/h2\u003e\n\n\u003cp\u003eこの記事はDxLib Advent Calendar 2018 9日目の記事です\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/S_H_/items/a983c1ade26f57ce942e\" id=\"reference-528dbde4a76c82ee12eb\"\u003e\u0026lt;\u0026lt; 8日目|自作のノベルゲームエンジンを作ってみた\u003c/a\u003e || \u003ca href=\"https://qiita.com/nicolai_twi/items/b47ca5df5810b6c85d40\" id=\"reference-212004ce0e741e6ff1e7\"\u003e10日目|DXLibで川瀬式MGFを実装 \u0026gt;\u0026gt;\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e過疎っている。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h2\u003e\n\n\u003cp\u003eはいはい、タイトル長い長い。もともと2分割しようと思ってた内容を諸事情で一つにくっつけたからこうなる。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"dxarchiveとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxarchive%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxArchiveとは\u003c/h2\u003e\n\n\u003cp\u003e正直必要性がわからない機能。\u003c/p\u003e\n\n\u003cp\u003ezipファイルと同じアルゴリズムで圧縮が一応かかるとはいえ、ゲームの素材なんてものはもともと圧縮されているものだからむしろ容量が増えるまである。\u003c/p\u003e\n\n\u003cp\u003e誰得なんだ・・・？\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://dxlib.xsrv.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4534\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://dxlib.xsrv.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4534\u003c/a\u003e\u003cbr\u003e\n名前：管理人 日時：2019/12/03 00:09 \u003cbr\u003e\nプログラム初心者の方が作成するソフトの多くが画像や音やテキストファイルが生のままDataフォルダに入っていて、\u003cbr\u003e\n見ようと思えばゲームをクリアすることなくエンディングの画像やストーリーが見れてしまうのをなんとかしたい\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e・・・普通にデコードできるのでは・・・？\u003c/p\u003e\n\n\u003cp\u003e友人「ゲーム配布するときに素材フォルダをいじられて起動しなくなると困るので固めるために使う」\u003c/p\u003e\n\n\u003cp\u003e・・・なるほど、わからん。それDXAファイルを動かされたらあっさり詰むやつでは・・・？\u003c/p\u003e\n\n\u003cp\u003eやっぱり不要では？\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"dxarchiveの暗号化機能\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxarchive%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxArchiveの暗号化機能\u003c/h2\u003e\n\n\u003cp\u003eそんな必要性が謎なDxArchiveに更に謎な機能として暗号化機能がある。\u003c/p\u003e\n\n\u003cp\u003e・・・何に使うんだ？\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e8127氏\u003c/p\u003e\n\n\u003cp\u003eライセンスを購入して使用する有料ゲーム素材の中には（無断二次利用防止のため）\u003cbr\u003e\n暗号化必須で使ってくださいというものがあるので、暗号化機能が無くなったりするととても困ります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eやっぱり謎。そもそも復号化するための鍵がクライアントサイドに最終的に有るのだから、どんなに頑張っても原理的に復号できる。\u003c/p\u003e\n\n\u003cp\u003eいや、もちろん復号するコストは上げられる。しかしDRMが滅びつつあるように、コンテンツ保護機能というものは基本的に害悪なのだ。\u003c/p\u003e\n\n\u003cp\u003eそして大抵のオチはコンテンツ保護機能がバグってクラッシュするとか、サーバーが閉鎖されて鍵が手に入れられなくなるとかそういうクソみたいな結末だ。\u003c/p\u003e\n\n\u003cp\u003e手元に\u003ccode\u003eFairUse4WM\u003c/code\u003e(有名なDRM解除ソフト)で解除できねーぜって謳って、破れるもんなら破ってみろと配布されていたDRM付きWMVがあるが、サーバーが閉鎖されて正規の再生もできなくなった。\u003c/p\u003e\n\n\u003cp\u003eじつにばかばかしい行為なのである。\u003c/p\u003e\n\n\u003cp\u003eしかしながら、\u003cstrong\u003e無知な\u003c/strong\u003e素材作成者が\u003cstrong\u003e無意味\u003c/strong\u003eにも暗号化を要求してくる以上そうせざるをえないのだろう。現実ってそんなもんらしい。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"20180812まで存在したdxarchiveの暗号化機能の脆弱性とそれに伴う仕様変更\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#20180812%E3%81%BE%E3%81%A7%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%9Fdxarchive%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD%E3%81%AE%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%A8%E3%81%9D%E3%82%8C%E3%81%AB%E4%BC%B4%E3%81%86%E4%BB%95%E6%A7%98%E5%A4%89%E6%9B%B4\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2018/08/12まで存在したDxArchiveの暗号化機能の脆弱性とそれに伴う仕様変更\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4474\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4474\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにて報告された。\u003c/p\u003e\n\n\u003cp\u003eなんと\u003cstrong\u003e共通鍵を持っていなくても\u003c/strong\u003e、また共通鍵を求めることなく\u003cstrong\u003e復号化できる\u003c/strong\u003eという致命的なバグがあったのだ。\u003c/p\u003e\n\n\u003cp\u003e・・・暗号化 #とは\u003c/p\u003e\n\n\u003cp\u003eというわけで、議論の末Hash関数に\u003cstrong\u003eSHA-256を採用\u003c/strong\u003eしつつ暗号化するように変更がなされました。12byteから一気に増えたね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"export-administration-regulations-輸出管理規則esr\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#export-administration-regulations-%E8%BC%B8%E5%87%BA%E7%AE%A1%E7%90%86%E8%A6%8F%E5%89%87esr\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eExport Administration Regulations 輸出管理規則(ESR)\u003c/h2\u003e\n\n\u003cp\u003eアメリカには実に滑稽な法律がって、Export Administration Regulationsというやつがそれなのだが、要するに暗号化技術の一部に対して規制がかかりますよ、というものだ。\u003c/p\u003e\n\n\u003cp\u003e昔は今以上に規制が厳しくて、たとえばPGPはアメリカ国外へソースコードを含むソフトウェアを輸出できないというお馬鹿な事態が発生していた。\u003cbr\u003e\u003cbr\u003e\n仕方ないから\u003ccode\u003eThe PGPi scanning project\u003c/code\u003eっていうのが立ち上がって、紙媒体なら法律で規制外という点を突いてソースコードを印刷して本12冊に分冊して出版、ヨーロッパの有志によってOCRされリリースとかいう茶番が繰り広げられていた。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gigazine.net/news/20130612-pgpi-scanning-project/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e暗号化ソフトのソースコードを6000ページもの本12冊にして合法的に輸出した壮大なプロジェクト「PGPi scanning project」 - GIGAZINE\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eで、この規制が若干緩んだものの今もなお存在してる。\u003c/p\u003e\n\n\u003cp\u003eところで執筆現在でもよくわかっていないんだが、このESRってワッセナー・アレンジメントに含まれているんですか？外為法第25条を眺めてもよくわからんかったんですが。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003cbr\u003e\nたまたまTwitterで \u003ca href=\"https://twitter.com/arclisp\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@arclisp\u003c/a\u003e 氏が\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eうーん \u003ca href=\"https://t.co/bUgReFvSg5\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/bUgReFvSg5\u003c/a\u003e\u003c/p\u003e— シミュラクラ (@arclisp) \u003ca href=\"https://twitter.com/arclisp/status/1077253827689013250?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2018年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e共通鍵暗号方式（対象鍵と言及されている）のは56ビット長以上だと外為法に抵触するので経産省に事前届出がないと輸出はアウトっぽいような文面ではある\u003c/p\u003e— シミュラクラ (@arclisp) \u003ca href=\"https://twitter.com/arclisp/status/1077254096699088902?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2018年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e輸出令別表第１の９の項(７)(省令第８条第九号)情報セキュリティ（暗号装置）該非用パラメータシート(情報ｾｷｭﾘﾃｨ・貨物) 様式９－０７\u003cbr\u003e\n\u003cdel\u003e\u003ca href=\"http://www.cistec.or.jp/publication/teisei_data/b-03tuushin/20180130.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.cistec.or.jp/publication/teisei_data/b-03tuushin/20180130.pdf\u003c/a\u003e\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003eというのを見つけました。\u003c/p\u003e\n\n\u003cp\u003e追記:\u003c/p\u003e\n\n\u003cp\u003e上記はリンク切れになったようです。\u003cbr\u003e\n\u003ca href=\"http://www.cistec.or.jp/publication/shoseki/sample/b03-tuushin_kinyurei.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.cistec.or.jp/publication/shoseki/sample/b03-tuushin_kinyurei.pdf\u003c/a\u003e\u003cbr\u003e\nの41ページ目に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eCISTEC 2019.1.9 平成31年1月9日施行政省令等対応\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eの文字が見えます。これは見本なので見本じゃないやつがあるはずです。\u003cbr\u003e\nおそらく\u003cbr\u003e\n\u003ca href=\"http://www.cistec.or.jp/koumoku/para/parameter.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.cistec.or.jp/koumoku/para/parameter.html\u003c/a\u003e\u003cbr\u003e\nから落とせるのだと思うのですが、どういうわけか認証が要求されてしまい、見れません。\u003c/p\u003e\n\n\u003cp\u003eCISTEC 2018.1.22 平成30年1月22日施行政省令等対応\u003cbr\u003e\n\u003ca href=\"https://www.jmcti.org/publication/correction/pdf/2017/20180130.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.jmcti.org/publication/correction/pdf/2017/20180130.pdf\u003c/a\u003e\u003cbr\u003e\nこれなら見つかりました。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"dxlibへの影響\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib%E3%81%B8%E3%81%AE%E5%BD%B1%E9%9F%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLibへの影響\u003c/h2\u003e\n\n\u003cp\u003eで、これがDxLibに影響あるんじゃないかという指摘が10/31になされました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4534\u0026amp;p=1\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026amp;no=4534\u0026amp;p=1\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eさて、ESRですが、\u003ccode\u003eExport\u003c/code\u003eというぐらいだから、\u003cstrong\u003eアメリカからの輸出\u003c/strong\u003eに対しての規制です。\u003c/p\u003e\n\n\u003cp\u003eこれだとピンときてないかもしれないのでもうちょっと踏み込むと、Androidの\u003cstrong\u003eGoogle Play\u003c/strong\u003eとか\u003cstrong\u003eApple Store\u003c/strong\u003eとか\u003cstrong\u003eGithub Release\u003c/strong\u003eとか\u003cstrong\u003eNuget\u003c/strong\u003eとかはアメリカ国内に拠点を持つ企業のサービスであり、\u003cstrong\u003eアメリカからの輸出\u003c/strong\u003eに該当します。\u003c/p\u003e\n\n\u003cp\u003eDxLibには以前は12byte=96bitの鍵、上述の通りSHA-256すなわち256bitへの変更があり、いずれにせよ\u003cstrong\u003e共通鍵方式で56bitを超える鍵\u003c/strong\u003eが利用されてきました。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://dsas.blog.klab.org/archives/52146838.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDSAS開発者の部屋:スマホアプリと米国輸出規制に関するメモ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://dsas.blog.klab.org/archives/52148551.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDSAS開発者の部屋:スマホアプリと米国輸出規制に関するメモの続き\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://tmurakam.hatenablog.com/entry/20111009/1318137457\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて - むらかみの雑記帳\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://tmurakam.hatenablog.com/entry/20111010/1318173222\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その2) - 規制対象になるかどうかの判断 - むらかみの雑記帳\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://tmurakam.hatenablog.com/entry/20111010/1318185080\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その3) - 暗号分類 - むらかみの雑記帳\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://tmurakam.hatenablog.com/entry/20111011/1318328575\" rel=\"nofollow noopener\" target=\"_blank\"\u003eHTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その4) - 商務省BISに暗号登録してみたよ！ - むらかみの雑記帳\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eというわけでこの辺をみつつ、影響を解釈していきましょう。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dxlib自体\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib%E8%87%AA%E4%BD%93\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLib自体\u003c/h3\u003e\n\n\u003cp\u003eこれはDxLibの\u003cstrong\u003e再頒布も含みます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e結論から言うと\u003cstrong\u003e届け出(許可例外TSU)が必要\u003c/strong\u003eです。\u003c/p\u003e\n\n\u003cp\u003e何故かと言うとDxLibはNuGetでも配布されており、\u003cstrong\u003e共通鍵方式で56bitを超える鍵\u003c/strong\u003eが使われているからです。\u003c/p\u003e\n\n\u003cp\u003eというわけでDxLib自体は届け出(メールを投げつける)をやったそうです。\u003c/p\u003e\n\n\u003cp\u003eところが、DxLibは結構あちこちで再頒布されているらしく、ここで問題が生じます。\u003c/p\u003e\n\n\u003cp\u003eつまり\u003cstrong\u003eアメリカからの輸出という形態に該当する形で再頒布するたびに再頒布を行う主体の人が届け出(許可例外TSU)をしなければならない\u003c/strong\u003eということです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e業を煮やしたDxLib作者は鍵を56bitに弱体化すると表明しました。\u003c/strong\u003eまじかよ・・・。\u003c/p\u003e\n\n\u003cp\u003e結局CRC32を2回適用して56bit分取り出し、LZ圧縮とハフマン圧縮で固定ヘッダー攻撃防止を行ったようです。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dxlibのdxa暗号化機能を利用していないアプリケーション\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib%E3%81%AEdxa%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLibのDXA暗号化機能を利用していないアプリケーション\u003c/h3\u003e\n\n\u003cp\u003e届け出不要です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dxlibのdxa暗号化機能を知的所有権著作権保護のために利用するアプリケーション\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib%E3%81%AEdxa%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD%E3%82%92%E7%9F%A5%E7%9A%84%E6%89%80%E6%9C%89%E6%A8%A9%E8%91%97%E4%BD%9C%E6%A8%A9%E4%BF%9D%E8%AD%B7%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLibのDXA暗号化機能を「知的所有権・著作権保護」のために利用するアプリケーション\u003c/h3\u003e\n\n\u003cp\u003e届け出不要です。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"dxlibのdxa暗号化機能をその他の目的で利用する場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dxlib%E3%81%AEdxa%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD%E3%82%92%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E7%9B%AE%E7%9A%84%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDxLibのDXA暗号化機能をその他の目的で利用する場合\u003c/h3\u003e\n\n\u003cp\u003e一体どんなことをすればこれに該当するのかわかりませんが、例えば通信の暗号化にDXAの暗号化を使ったとかそんなんですかね・・・？\u003c/p\u003e\n\n\u003cp\u003eこの場合は\u003cstrong\u003eECCN番号分類に従って手続きが必要\u003c/strong\u003eになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h2\u003e\n\n\u003cp\u003e自由ソフトウェアの発展を阻害するExport Administration Regulationsは死すべし、慈悲はない。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"余談-dxarchiveの暗号化機能を利用するときにパスワードをどのようにプログラム内で指定するべきか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87-dxarchive%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96%E6%A9%9F%E8%83%BD%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E3%81%A9%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E5%86%85%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8D%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談: DxArchiveの暗号化機能を利用するときにパスワードをどのようにプログラム内で指定するべきか\u003c/h2\u003e\n\n\u003cp\u003eまあ何やっても完全に秘匿することはできないわけですが、そのまま文字列リテラルとして書いてしまうとバイナリエディタで実行ファイルを覗くだけでパスワードがわかってしまいます。\u003c/p\u003e\n\n\u003cp\u003eせっかく暗号化機能を使うなら流石にもうひと工夫くらいしたほうがいいでしょう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gist.github.com/yumetodo/238c52d4382db93e1978743cf299ba4d\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://gist.github.com/yumetodo/238c52d4382db93e1978743cf299ba4d\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \"inferior_encrypted_string.hpp\"\n#include \u0026lt;iostream\u0026gt;\n#if defined(DXLIB_CUSTOM_NO_CXX11_CONSTEXPR) \u0026amp;\u0026amp; defined(DXLIB_CUSTOM_NO_CXX14_CONSTEXPR)\n\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"arikitari\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_inferior_encrypted_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"arikitari\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ありきたりな世界\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_inferior_encrypted_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ありきたりな世界\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_inferior_encrypted_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"arikitari\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_encrypted_string\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_inferior_encrypted_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ありきたりな世界\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://wandbox.org/permlink/SOsUuAvhLRbFeWUS\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wandbox.org/permlink/SOsUuAvhLRbFeWUS\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eのようにすることでDxLibが対応するコンパイラすべてでコンパイルは通りつつ、C++11のconstexprが利用できればバイナリエディタからは覗けなくなります(C++11consteexprが利用できない環境では無意味です)。\u003c/p\u003e\n\n\u003cp\u003e中身的には各byteに31を減算する作業をコンパイル時に行って、実行時に31を加算して戻しているだけのものです。\u003c/p\u003e\n\n\u003cp\u003eなお\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"asm\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eadd BYTE PTR [ecx],0x1f\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようなかなり特徴的なコードが吐かれるようなので依然として破るのは簡単だったりします。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"## DxLib Advent Calendar 2018\n\nこの記事はDxLib Advent Calendar 2018 9日目の記事です\n\n[\u003c\u003c 8日目|自作のノベルゲームエンジンを作ってみた](https://qiita.com/S_H_/items/a983c1ade26f57ce942e) || [10日目|DXLibで川瀬式MGFを実装 \u003e\u003e](https://qiita.com/nicolai_twi/items/b47ca5df5810b6c85d40)\n\n過疎っている。\n\n## はじめに\n\nはいはい、タイトル長い長い。もともと2分割しようと思ってた内容を諸事情で一つにくっつけたからこうなる。\n\n## DxArchiveとは\n\n正直必要性がわからない機能。\n\nzipファイルと同じアルゴリズムで圧縮が一応かかるとはいえ、ゲームの素材なんてものはもともと圧縮されているものだからむしろ容量が増えるまである。\n\n誰得なんだ・・・？\n\n\u003e https://dxlib.xsrv.jp/cgi/patiobbs/patio.cgi?mode=view\u0026no=4534\n\u003e 名前：管理人 日時：2019/12/03 00:09 \n\u003e プログラム初心者の方が作成するソフトの多くが画像や音やテキストファイルが生のままDataフォルダに入っていて、\n見ようと思えばゲームをクリアすることなくエンディングの画像やストーリーが見れてしまうのをなんとかしたい\n\n・・・普通にデコードできるのでは・・・？\n\n友人「ゲーム配布するときに素材フォルダをいじられて起動しなくなると困るので固めるために使う」\n\n・・・なるほど、わからん。それDXAファイルを動かされたらあっさり詰むやつでは・・・？\n\nやっぱり不要では？\n\n## DxArchiveの暗号化機能\n\nそんな必要性が謎なDxArchiveに更に謎な機能として暗号化機能がある。\n\n・・・何に使うんだ？\n\n\u003e8127氏\n\u003e\n\u003eライセンスを購入して使用する有料ゲーム素材の中には（無断二次利用防止のため）\n\u003e暗号化必須で使ってくださいというものがあるので、暗号化機能が無くなったりするととても困ります。\n\nやっぱり謎。そもそも復号化するための鍵がクライアントサイドに最終的に有るのだから、どんなに頑張っても原理的に復号できる。\n\nいや、もちろん復号するコストは上げられる。しかしDRMが滅びつつあるように、コンテンツ保護機能というものは基本的に害悪なのだ。\n\nそして大抵のオチはコンテンツ保護機能がバグってクラッシュするとか、サーバーが閉鎖されて鍵が手に入れられなくなるとかそういうクソみたいな結末だ。\n\n手元に`FairUse4WM`(有名なDRM解除ソフト)で解除できねーぜって謳って、破れるもんなら破ってみろと配布されていたDRM付きWMVがあるが、サーバーが閉鎖されて正規の再生もできなくなった。\n\nじつにばかばかしい行為なのである。\n\nしかしながら、**無知な**素材作成者が**無意味**にも暗号化を要求してくる以上そうせざるをえないのだろう。現実ってそんなもんらしい。\n\n## 2018/08/12まで存在したDxArchiveの暗号化機能の脆弱性とそれに伴う仕様変更\n\nhttp://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026no=4474\n\nにて報告された。\n\nなんと**共通鍵を持っていなくても**、また共通鍵を求めることなく**復号化できる**という致命的なバグがあったのだ。\n\n・・・暗号化 #とは\n\nというわけで、議論の末Hash関数に**SHA-256を採用**しつつ暗号化するように変更がなされました。12byteから一気に増えたね。\n\n## Export Administration Regulations 輸出管理規則(ESR)\n\nアメリカには実に滑稽な法律がって、Export Administration Regulationsというやつがそれなのだが、要するに暗号化技術の一部に対して規制がかかりますよ、というものだ。\n\n昔は今以上に規制が厳しくて、たとえばPGPはアメリカ国外へソースコードを含むソフトウェアを輸出できないというお馬鹿な事態が発生していた。  \n仕方ないから`The PGPi scanning project`っていうのが立ち上がって、紙媒体なら法律で規制外という点を突いてソースコードを印刷して本12冊に分冊して出版、ヨーロッパの有志によってOCRされリリースとかいう茶番が繰り広げられていた。\n\n[暗号化ソフトのソースコードを6000ページもの本12冊にして合法的に輸出した壮大なプロジェクト「PGPi scanning project」 - GIGAZINE](https://gigazine.net/news/20130612-pgpi-scanning-project/)\n\nで、この規制が若干緩んだものの今もなお存在してる。\n\nところで執筆現在でもよくわかっていないんだが、このESRってワッセナー・アレンジメントに含まれているんですか？外為法第25条を眺めてもよくわからんかったんですが。\n\n追記:\nたまたまTwitterで [@arclisp](https://twitter.com/arclisp) 氏が\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eうーん \u003ca href=\"https://t.co/bUgReFvSg5\"\u003ehttps://t.co/bUgReFvSg5\u003c/a\u003e\u003c/p\u003e\u0026mdash; シミュラクラ (@arclisp) \u003ca href=\"https://twitter.com/arclisp/status/1077253827689013250?ref_src=twsrc%5Etfw\"\u003e2018年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e共通鍵暗号方式（対象鍵と言及されている）のは56ビット長以上だと外為法に抵触するので経産省に事前届出がないと輸出はアウトっぽいような文面ではある\u003c/p\u003e\u0026mdash; シミュラクラ (@arclisp) \u003ca href=\"https://twitter.com/arclisp/status/1077254096699088902?ref_src=twsrc%5Etfw\"\u003e2018年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\n輸出令別表第１の９の項(７)(省令第８条第九号)情報セキュリティ（暗号装置）該非用パラメータシート(情報ｾｷｭﾘﾃｨ・貨物) 様式９－０７\n~~http://www.cistec.or.jp/publication/teisei_data/b-03tuushin/20180130.pdf~~\n\nというのを見つけました。\n\n追記:\n\n上記はリンク切れになったようです。\nhttp://www.cistec.or.jp/publication/shoseki/sample/b03-tuushin_kinyurei.pdf\nの41ページ目に\n\n\u003e CISTEC 2019.1.9 平成31年1月9日施行政省令等対応\n\nの文字が見えます。これは見本なので見本じゃないやつがあるはずです。\nおそらく\nhttp://www.cistec.or.jp/koumoku/para/parameter.html\nから落とせるのだと思うのですが、どういうわけか認証が要求されてしまい、見れません。\n\nCISTEC 2018.1.22 平成30年1月22日施行政省令等対応\nhttps://www.jmcti.org/publication/correction/pdf/2017/20180130.pdf\nこれなら見つかりました。\n\n## DxLibへの影響\n\nで、これがDxLibに影響あるんじゃないかという指摘が10/31になされました。\n\nhttp://dxlib.o.oo7.jp/cgi/patiobbs/patio.cgi?mode=view\u0026no=4534\u0026p=1\n\nさて、ESRですが、`Export`というぐらいだから、**アメリカからの輸出**に対しての規制です。\n\nこれだとピンときてないかもしれないのでもうちょっと踏み込むと、Androidの**Google Play**とか**Apple Store**とか**Github Release**とか**Nuget**とかはアメリカ国内に拠点を持つ企業のサービスであり、**アメリカからの輸出**に該当します。\n\nDxLibには以前は12byte=96bitの鍵、上述の通りSHA-256すなわち256bitへの変更があり、いずれにせよ**共通鍵方式で56bitを超える鍵**が利用されてきました。\n\n- [DSAS開発者の部屋:スマホアプリと米国輸出規制に関するメモ](http://dsas.blog.klab.org/archives/52146838.html)\n- [DSAS開発者の部屋:スマホアプリと米国輸出規制に関するメモの続き](http://dsas.blog.klab.org/archives/52148551.html)\n- [HTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて - むらかみの雑記帳](http://tmurakam.hatenablog.com/entry/20111009/1318137457)\n- [HTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その2) - 規制対象になるかどうかの判断 - むらかみの雑記帳](http://tmurakam.hatenablog.com/entry/20111010/1318173222)\n- [HTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その3) - 暗号分類 - むらかみの雑記帳](http://tmurakam.hatenablog.com/entry/20111010/1318185080)\n- [HTTPS を使ってるアプリを AppStore や Android Market で配信するときの輸出手続きについて（その4) - 商務省BISに暗号登録してみたよ！ - むらかみの雑記帳](http://tmurakam.hatenablog.com/entry/20111011/1318328575)\n\nというわけでこの辺をみつつ、影響を解釈していきましょう。\n\n### DxLib自体\n\nこれはDxLibの**再頒布も含みます**。\n\n結論から言うと**届け出(許可例外TSU)が必要**です。\n\n何故かと言うとDxLibはNuGetでも配布されており、**共通鍵方式で56bitを超える鍵**が使われているからです。\n\nというわけでDxLib自体は届け出(メールを投げつける)をやったそうです。\n\nところが、DxLibは結構あちこちで再頒布されているらしく、ここで問題が生じます。\n\nつまり**アメリカからの輸出という形態に該当する形で再頒布するたびに再頒布を行う主体の人が届け出(許可例外TSU)をしなければならない**ということです。\n\n**業を煮やしたDxLib作者は鍵を56bitに弱体化すると表明しました。**まじかよ・・・。\n\n結局CRC32を2回適用して56bit分取り出し、LZ圧縮とハフマン圧縮で固定ヘッダー攻撃防止を行ったようです。\n\n### DxLibのDXA暗号化機能を利用していないアプリケーション\n\n届け出不要です。\n\n### DxLibのDXA暗号化機能を「知的所有権・著作権保護」のために利用するアプリケーション\n\n届け出不要です。\n\n### DxLibのDXA暗号化機能をその他の目的で利用する場合\n\n一体どんなことをすればこれに該当するのかわかりませんが、例えば通信の暗号化にDXAの暗号化を使ったとかそんなんですかね・・・？\n\nこの場合は**ECCN番号分類に従って手続きが必要**になります。\n\n## 結論\n\n自由ソフトウェアの発展を阻害するExport Administration Regulationsは死すべし、慈悲はない。\n\n## 余談: DxArchiveの暗号化機能を利用するときにパスワードをどのようにプログラム内で指定するべきか\n\nまあ何やっても完全に秘匿することはできないわけですが、そのまま文字列リテラルとして書いてしまうとバイナリエディタで実行ファイルを覗くだけでパスワードがわかってしまいます。\n\nせっかく暗号化機能を使うなら流石にもうひと工夫くらいしたほうがいいでしょう。\n\nhttps://gist.github.com/yumetodo/238c52d4382db93e1978743cf299ba4d\n\n```cpp\n#include \"inferior_encrypted_string.hpp\"\n#include \u003ciostream\u003e\n#if defined(DXLIB_CUSTOM_NO_CXX11_CONSTEXPR) \u0026\u0026 defined(DXLIB_CUSTOM_NO_CXX14_CONSTEXPR)\nconst inferior_encrypted_string::inferior_encrypted_string\u003cchar, sizeof(\"arikitari\")\u003e s1 = inferior_encrypted_string::make_inferior_encrypted_string(\"arikitari\");\nconst inferior_encrypted_string::inferior_encrypted_string\u003cchar, sizeof(\"ありきたりな世界\")\u003e s2 = inferior_encrypted_string::make_inferior_encrypted_string(\"ありきたりな世界\");\n#else\nconstexpr auto s1 = inferior_encrypted_string::make_inferior_encrypted_string(\"arikitari\");\nconstexpr auto s2 = inferior_encrypted_string::make_inferior_encrypted_string(\"ありきたりな世界\");\n#endif\nint main()\n{\n    std::cout\n        \u003c\u003c s1.str \u003c\u003c std::endl\n        \u003c\u003c s1.decrypt() \u003c\u003c std::endl\n        \u003c\u003c std::endl\n        \u003c\u003c s2.str \u003c\u003c std::endl\n        \u003c\u003c s2.decrypt() \u003c\u003c std::endl;\n}\n```\n\nhttps://wandbox.org/permlink/SOsUuAvhLRbFeWUS\n\nのようにすることでDxLibが対応するコンパイラすべてでコンパイルは通りつつ、C++11のconstexprが利用できればバイナリエディタからは覗けなくなります(C++11consteexprが利用できない環境では無意味です)。\n\n中身的には各byteに31を減算する作業をコンパイル時に行って、実行時に31を加算して戻しているだけのものです。\n\nなお\n\n```asm\nadd BYTE PTR [ecx],0x1f\n```\n\nのようなかなり特徴的なコードが吐かれるようなので依然として破るのは簡単だったりします。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":10,"created_at":"2018-12-07T21:20:55+09:00","group":null,"id":"89af53d3cf8bc236de2f","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"DXライブラリ","versions":[]},{"name":"DxLib","versions":[]},{"name":"ear","versions":[]}],"title":"DxLibのDxArchiveの暗号化する機能とExport Administration Regulations 輸出管理規則","updated_at":"2019-12-04T21:31:23+09:00","url":"https://qiita.com/yumetodo/items/89af53d3cf8bc236de2f","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e私は普段ブログの執筆をはてなブログで行っている。\u003c/p\u003e\n\n\u003cp\u003eまた画像はGoogle Photosにあげている。\u003c/p\u003e\n\n\u003cp\u003e幸いはてなブログにはGoogle Photosの画像を簡単に貼り付けることができる機能があるので非常に助かっている。\u003c/p\u003e\n\n\u003cp\u003eしかし画像がいくつもあるときはやっぱり手元のVSCodeとかで執筆したい。\u003c/p\u003e\n\n\u003cp\u003eそうしたときに画像のpathをGoogle Photosのものに置換する作業が地味につらいので自動化した。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はてなブログのgoogle-photosの画像を簡単に貼り付けることができる機能によって吐かれるもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%A6%E3%81%AA%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AEgoogle-photos%E3%81%AE%E7%94%BB%E5%83%8F%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%AB%E8%B2%BC%E3%82%8A%E4%BB%98%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E6%A9%9F%E8%83%BD%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E5%90%90%E3%81%8B%E3%82%8C%E3%82%8B%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはてなブログのGoogle Photosの画像を簡単に貼り付けることができる機能によって吐かれるもの\u003c/h1\u003e\n\n\u003cp\u003e画像は一度に複数選択して貼り付けられる。結果は\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;span\u003c/span\u003e \u003cspan class=\"na\"\u003eitemtype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://schema.org/Photograph\"\u003c/span\u003e \u003cspan class=\"na\"\u003eitemscope=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"itemscope\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"magnifiable\"\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://lh3.googleusercontent.com/-GmQ4306G_XE/W_eyP8bHFsI/AAAAAAAANm8/TgKqNX902G4gn9PZZ5u4mQqY7Y-QZuV8wCE0YBhgL/s1024/2018-11-22_20.12.35.png\"\u003c/span\u003e \u003cspan class=\"na\"\u003eitemprop=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"image\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/span\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;span\u003c/span\u003e \u003cspan class=\"na\"\u003eitemtype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://schema.org/Photograph\"\u003c/span\u003e \u003cspan class=\"na\"\u003eitemscope=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"itemscope\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"magnifiable\"\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://lh3.googleusercontent.com/-ZGpYEx1Lpq0/W_eyP5o_sxI/AAAAAAAANm8/ir9FdXHJ0ksxIDSjwlSJ5pNyrkX3dKkuQCE0YBhgL/s1024/2018-11-22_20.13.05.png\"\u003c/span\u003e \u003cspan class=\"na\"\u003eitemprop=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"image\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/span\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな感じのがでてくる。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"markdownに変換する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#markdown%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eMarkdownに変換する\u003c/h1\u003e\n\n\u003cp\u003eこれは正規表現で十分だ。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;span itemtype=\"http://schema.org/Photograph\" itemscope=\"itemscope\"\u0026gt;\u0026lt;img class=\"magnifiable\" src=\"([^\"]+)\".+\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eで検索して\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e![img]($1)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eに置換すればよい。この作業すら自動化しても良かったのだが、この記事を書くまで忘れていた。\u003c/p\u003e\n\n\u003cp\u003e出力は\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003ehttps://lh3.googleusercontent.com/-GmQ4306G_XE/W_eyP8bHFsI/AAAAAAAANm8/TgKqNX902G4gn9PZZ5u4mQqY7Y-QZuV8wCE0YBhgL/s1024/2018-11-22_20.12.35.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003ehttps://lh3.googleusercontent.com/-ZGpYEx1Lpq0/W_eyP5o_sxI/AAAAAAAANm8/ir9FdXHJ0ksxIDSjwlSJ5pNyrkX3dKkuQCE0YBhgL/s1024/2018-11-22_20.13.05.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんなかんじだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"自動置換\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%87%AA%E5%8B%95%E7%BD%AE%E6%8F%9B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e自動置換\u003c/h1\u003e\n\n\u003cp\u003eこうしてできた画像ファイルのリストを使って\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gu\"\u003e#### 機械の配置の見直し\u003c/span\u003e\n\nいい加減\u003cspan class=\"sb\"\u003e`survival generator`\u003c/span\u003eと機械を市松模様に並べることに限界を感じてきた。前回作成した\u003cspan class=\"sb\"\u003e`Basic Capacitor Bank`\u003c/span\u003eを大幅増強し、発電機を床下に隠した。\u003cspan class=\"sb\"\u003e`survival generator`\u003c/span\u003eには常時原木を供給するように。\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003e2018-11-17_21.33.21.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003e2018-11-22_20.15.36.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eみたいに書かれているMarkdownを\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"markdown\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gu\"\u003e#### 機械の配置の見直し\u003c/span\u003e\n\nいい加減\u003cspan class=\"sb\"\u003e`survival generator`\u003c/span\u003eと機械を市松模様に並べることに限界を感じてきた。前回作成した\u003cspan class=\"sb\"\u003e`Basic Capacitor Bank`\u003c/span\u003eを大幅増強し、発電機を床下に隠した。\u003cspan class=\"sb\"\u003e`survival generator`\u003c/span\u003eには常時原木を供給するように。\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003ehttps://lh3.googleusercontent.com/-p-Yw1iRJCvA/W_eyPy-i78I/AAAAAAAANnE/CKQB6YgL0-8UWVwe1rXYcuS4lVfEAA4kgCE0YBhgL/s1024/2018-11-17_21.33.21.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003ehttps://lh3.googleusercontent.com/-butcP0DsnFU/W_eyP8sz42I/AAAAAAAANm8/Up5fUXmITsw3WPh2o4iKfpkqXnzqaGBvQCE0YBhgL/s1024/2018-11-22_20.15.36.png\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eみたいに置換したい。\u003c/p\u003e\n\n\u003cp\u003eというわけで適当にプログラムを書く。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++17\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;fstream\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;unordered_map\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;algorithm\u0026gt;\n#include \u0026lt;sstream\u0026gt;\n#include \u0026lt;limits\u0026gt;\n#include \u0026lt;regex\u0026gt;\n#include \u0026lt;string_view\u0026gt;\n#include \u0026lt;optional\u0026gt;\n#include \u0026lt;iomanip\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nf\"\u003eread_imglist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eifstream\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunordered_map\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003egetline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'!'\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_last_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e'/'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_end_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_last_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimgname_end_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_end_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimgname_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimgname_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etry_emplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eskip_utf8_bom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eifstream\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xEF\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xBB\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xBF\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eequal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edst\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eutf8\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"n\"\u003efs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eseekg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"nf\"\u003eread_target\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eifstream\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eskip_utf8_bom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estringstream\u003c/span\u003e \u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ess\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erdbuf\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring_view\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eextract_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring_view\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"extract_img_path()::\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"input: \"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e'('\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e']'\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_last_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"img_pos:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", img_pos_end:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos_end\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_pos_end\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullopt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"result:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos_end\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos_end\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eimg_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"nf\"\u003ereplace_target\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunordered_map\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereserve\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eregex\u003c/span\u003e \u003cspan class=\"n\"\u003emdimgreg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003eR\"(!\\[[^\\]]+\\]\\([^)]+\\))\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esregex_iterator\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emdimgreg\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"pos:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", length:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", s:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring_view\u003c/span\u003e \u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ecopy_end_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eimg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eextract_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emdimg\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eboolalpha\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_value\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\" exist in real_img_path:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eboolalpha\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e())))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e()))){\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e            \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"replace from:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"to:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e            \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimg\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e())));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecopy_end_pos\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecopy_end_pos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext_copy_front\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"invalid argument\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"md_img_replacer \u0026lt;image list text file path\u0026gt; \u0026lt;target markdown file path\u0026gt;\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eread_imglist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _DEBUG\n\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"key: \"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", value: \"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecerr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"image list is empty\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ereplace_target\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eread_target\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]),\u003c/span\u003e \u003cspan class=\"n\"\u003ereal_img_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eflush\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://wandbox.org/permlink/jYBIXo47TNAcsTdj\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wandbox.org/permlink/jYBIXo47TNAcsTdj\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e画像リストファイルから\u003ccode\u003e2018-11-21_22.12.17.png\u003c/code\u003eみたいな名前を抜き出してkeyにした辞書を作って、それをもとに照会して出力している。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n私は普段ブログの執筆をはてなブログで行っている。\n\nまた画像はGoogle Photosにあげている。\n\n幸いはてなブログにはGoogle Photosの画像を簡単に貼り付けることができる機能があるので非常に助かっている。\n\nしかし画像がいくつもあるときはやっぱり手元のVSCodeとかで執筆したい。\n\nそうしたときに画像のpathをGoogle Photosのものに置換する作業が地味につらいので自動化した。\n\n# はてなブログのGoogle Photosの画像を簡単に貼り付けることができる機能によって吐かれるもの\n\n画像は一度に複数選択して貼り付けられる。結果は\n\n```html\n\u003cspan itemtype=\"http://schema.org/Photograph\" itemscope=\"itemscope\"\u003e\u003cimg class=\"magnifiable\" src=\"https://lh3.googleusercontent.com/-GmQ4306G_XE/W_eyP8bHFsI/AAAAAAAANm8/TgKqNX902G4gn9PZZ5u4mQqY7Y-QZuV8wCE0YBhgL/s1024/2018-11-22_20.12.35.png\" itemprop=\"image\"\u003e\u003c/span\u003e\n\n\u003cspan itemtype=\"http://schema.org/Photograph\" itemscope=\"itemscope\"\u003e\u003cimg class=\"magnifiable\" src=\"https://lh3.googleusercontent.com/-ZGpYEx1Lpq0/W_eyP5o_sxI/AAAAAAAANm8/ir9FdXHJ0ksxIDSjwlSJ5pNyrkX3dKkuQCE0YBhgL/s1024/2018-11-22_20.13.05.png\" itemprop=\"image\"\u003e\u003c/span\u003e\n```\n\nこんな感じのがでてくる。\n\n# Markdownに変換する\n\nこれは正規表現で十分だ。\n\n`\u003cspan itemtype=\"http://schema.org/Photograph\" itemscope=\"itemscope\"\u003e\u003cimg class=\"magnifiable\" src=\"([^\"]+)\".+`\n\nで検索して\n\n`![img]($1)`\n\nに置換すればよい。この作業すら自動化しても良かったのだが、この記事を書くまで忘れていた。\n\n出力は\n\n```markdown\n![img](https://lh3.googleusercontent.com/-GmQ4306G_XE/W_eyP8bHFsI/AAAAAAAANm8/TgKqNX902G4gn9PZZ5u4mQqY7Y-QZuV8wCE0YBhgL/s1024/2018-11-22_20.12.35.png)\n\n![img](https://lh3.googleusercontent.com/-ZGpYEx1Lpq0/W_eyP5o_sxI/AAAAAAAANm8/ir9FdXHJ0ksxIDSjwlSJ5pNyrkX3dKkuQCE0YBhgL/s1024/2018-11-22_20.13.05.png)\n```\n\nこんなかんじだ。\n\n# 自動置換\n\nこうしてできた画像ファイルのリストを使って\n\n```markdown\n#### 機械の配置の見直し\n\nいい加減`survival generator`と機械を市松模様に並べることに限界を感じてきた。前回作成した`Basic Capacitor Bank`を大幅増強し、発電機を床下に隠した。`survival generator`には常時原木を供給するように。\n\n![img](2018-11-17_21.33.21.png)\n\n![img](2018-11-22_20.15.36.png)\n```\n\nみたいに書かれているMarkdownを\n\n```markdown\n#### 機械の配置の見直し\n\nいい加減`survival generator`と機械を市松模様に並べることに限界を感じてきた。前回作成した`Basic Capacitor Bank`を大幅増強し、発電機を床下に隠した。`survival generator`には常時原木を供給するように。\n\n![img](https://lh3.googleusercontent.com/-p-Yw1iRJCvA/W_eyPy-i78I/AAAAAAAANnE/CKQB6YgL0-8UWVwe1rXYcuS4lVfEAA4kgCE0YBhgL/s1024/2018-11-17_21.33.21.png)\n\n![img](https://lh3.googleusercontent.com/-butcP0DsnFU/W_eyP8sz42I/AAAAAAAANm8/Up5fUXmITsw3WPh2o4iKfpkqXnzqaGBvQCE0YBhgL/s1024/2018-11-22_20.15.36.png)\n```\n\nみたいに置換したい。\n\nというわけで適当にプログラムを書く。\n\n```cpp:C++17\n#include \u003cfstream\u003e\n#include \u003ciostream\u003e\n#include \u003cunordered_map\u003e\n#include \u003cstring\u003e\n#include \u003calgorithm\u003e\n#include \u003csstream\u003e\n#include \u003climits\u003e\n#include \u003cregex\u003e\n#include \u003cstring_view\u003e\n#include \u003coptional\u003e\n#include \u003ciomanip\u003e\nauto read_imglist(const char* filename)\n{\n    std::ifstream f(filename);\n    std::unordered_map\u003cstd::string, std::string\u003e re;\n    for(std::string buf; std::getline(f, buf); ) if(5 \u003c buf.size() \u0026\u0026 '!' == buf.front()) {\n        const auto imgname_pos = buf.find_last_of('/') + 1;\n        const auto imgname_end_pos = buf.find_last_of(')');\n        if(imgname_end_pos \u003c imgname_pos) continue;\n        const auto imgname_len = imgname_end_pos - imgname_pos;\n        auto k = buf.substr(imgname_pos, imgname_len);\n        re.try_emplace(std::move(k), std::move(buf));\n    }\n    return re;\n}\nvoid skip_utf8_bom(std::ifstream\u0026 fs)\n{\n    int dst[3];\n    for (auto\u0026 i : dst) i = fs.get();\n    constexpr int utf8[] = { 0xEF, 0xBB, 0xBF };\n    if (!std::equal(std::begin(dst), std::end(dst), utf8)) fs.seekg(0);\n}\nstd::string read_target(const char* filename)\n{\n    std::ifstream f(filename);\n    skip_utf8_bom(f);\n    std::stringstream ss;\n    ss \u003c\u003c f.rdbuf();\n    return ss.str();\n}\nstd::optional\u003cstd::string_view\u003e extract_img_path(std::string_view mdimg)\n{\n#ifdef _DEBUG\n    std::cerr\n        \u003c\u003c \"extract_img_path()::\" \u003c\u003c std::endl\n        \u003c\u003c \"input: \" \u003c\u003c mdimg \u003c\u003c std::endl;\n#endif\n    const auto img_pos = mdimg.find_first_of('(', mdimg.find_first_of(']')) + 1;\n    const auto img_pos_end = mdimg.find_last_of(')');\n#ifdef _DEBUG\n    std::cerr \u003c\u003c \"img_pos:\" \u003c\u003c img_pos \u003c\u003c \", img_pos_end:\" \u003c\u003c img_pos_end \u003c\u003c std::endl;\n#endif\n    if(img_pos_end \u003c img_pos) return std::nullopt;\n#ifdef _DEBUG\n    std::cerr \u003c\u003c \"result:\" \u003c\u003c mdimg.substr(img_pos, img_pos_end - img_pos) \u003c\u003c std::endl;\n#endif\n    return mdimg.substr(img_pos, img_pos_end - img_pos);\n}\nstd::string replace_target(const std::string\u0026 target, const std::unordered_map\u003cstd::string, std::string\u003e\u0026 real_img_path)\n{\n    std::string re;\n    using lim = std::numeric_limits\u003cstd::size_t\u003e;\n    using s = std::string;\n    re.reserve(lim::max() / 2 \u003c target.size() ? lim::max() : target.size() * 2);\n    std::regex mdimgreg(R\"(!\\[[^\\]]+\\]\\([^)]+\\))\");\n    std::size_t next_copy_front = 0;\n    for (std::sregex_iterator it(std::begin(target), std::end(target), mdimgreg), end; it != end; ++it){\n#ifdef _DEBUG\n        std::cerr \u003c\u003c \"pos:\" \u003c\u003c it-\u003eposition() \u003c\u003c \", length:\" \u003c\u003c it-\u003elength() \u003c\u003c \", s:\" \u003c\u003c it-\u003estr() \u003c\u003c std::endl;\n#endif\n        std::string_view mdimg(target.data() + it-\u003eposition(), it-\u003elength());\n        const auto copy_end_pos = it-\u003eposition() + it-\u003elength();\n        const auto img = extract_img_path(mdimg);\n#ifdef _DEBUG\n        std::cerr \u003c\u003c std::boolalpha \u003c\u003c img.has_value() \u003c\u003c std::endl;\n        if(img) std::cerr \u003c\u003c img.value() \u003c\u003c \" exist in real_img_path:\" \u003c\u003c std::boolalpha \u003c\u003c (0 != real_img_path.count(s(img.value()))) \u003c\u003c std::endl;\n#endif\n        if(img \u0026\u0026 real_img_path.count(s(img.value()))){\n            re.append(target, next_copy_front, it-\u003eposition() - next_copy_front);\n#ifdef _DEBUG\n            std::cerr\n                \u003c\u003c \"replace from:\" \u003c\u003c img.value() \u003c\u003c std::endl\n                \u003c\u003c \"to:\" \u003c\u003c real_img_path.at(s(img.value())) \u003c\u003c std::endl;\n#endif\n            re.append(real_img_path.at(s(img.value())));\n        }\n        else{\n            re.append(target, next_copy_front, copy_end_pos - next_copy_front);\n        }\n        next_copy_front = copy_end_pos;\n    }\n    if(next_copy_front \u003c target.size()) re.append(target, next_copy_front);\n    return re;\n}\nint main(int argc, char* argv[])\n{\n    if(3 != argc){\n        std::cerr\n            \u003c\u003c \"invalid argument\" \u003c\u003c std::endl\n            \u003c\u003c \"md_img_replacer \u003cimage list text file path\u003e \u003ctarget markdown file path\u003e\" \u003c\u003c std::endl;\n        return 1;\n    }\n    const auto real_img_path = read_imglist(argv[1]);\n#ifdef _DEBUG\n    for(auto [k, v] : real_img_path){\n        std::cerr \u003c\u003c \"key: \" \u003c\u003c k \u003c\u003c \", value: \" \u003c\u003c v \u003c\u003c std::endl;\n    }\n#endif\n    if(real_img_path.empty()){\n        std::cerr \u003c\u003c \"image list is empty\" \u003c\u003c std::endl;\n        return 2;\n    }\n    std::cout \u003c\u003c replace_target(read_target(argv[2]), real_img_path) \u003c\u003c std::flush;\n}\n```\n\nhttps://wandbox.org/permlink/jYBIXo47TNAcsTdj\n\n画像リストファイルから`2018-11-21_22.12.17.png`みたいな名前を抜き出してkeyにした辞書を作って、それをもとに照会して出力している。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-11-23T20:32:50+09:00","group":null,"id":"458d616b8b2e29c26e25","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"Markdown","versions":[]},{"name":"はてなブログ","versions":[]},{"name":"C++17","versions":[]},{"name":"GooglePhotos","versions":[]}],"title":"手元で書いていたMarkdownの画像のpathをGoogle Photos上のに置き換えるやつ","updated_at":"2019-04-02T11:28:55+09:00","url":"https://qiita.com/yumetodo/items/458d616b8b2e29c26e25","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eながらくWindowsにてVisual Studio Codeからcommitするときにgpg署名するのは無理だと思っていました。\u003c/p\u003e\n\n\u003cp\u003eというのはなぜか\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vscode/issues/5065#issuecomment-207960831\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAdd support for signing commits with GPG · Issue #5065 · Microsoft/vscode#issuecomment-207960831\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e'no-tty'\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e ~/.gnupg/gpg.conf\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eする方法がうまく行かなかったからです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"前提\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E6%8F%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前提\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eWindowsを使用\u003c/li\u003e\n\u003cli\u003eVisual Studio Codeがインストールされている\u003c/li\u003e\n\u003cli\u003egit for Windowsがインストールされている\u003c/li\u003e\n\u003cli\u003egit for Windowsでgpg署名付きcommitができる\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003egpg署名付きcommitができる状態にない場合は\u003cbr\u003e\n\u003ca href=\"https://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485\" id=\"reference-594f621fadf0a7479a7b\"\u003eGitHubで署名されたコミットにバッジが表示されるようになったので設定してみる\u003c/a\u003e\u003cbr\u003e\nを参照してください\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"手順\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%89%8B%E9%A0%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e手順\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"git-for-windows\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#git-for-windows\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003egit for Windows\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003egit config \u003cspan class=\"nt\"\u003e--global\u003c/span\u003e commit.gpgsign \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e~/.gnupg/gpg-agent.conf\u003c/code\u003eに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e~/.gnupg/gpg-agent.conf\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003edefault-cache-ttl 46000\npinentry-program /usr/bin/pinentry\nallow-preset-passphrase\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eを追記します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"visual-studio-code\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#visual-studio-code\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVisual Studio Code\u003c/h2\u003e\n\n\u003cp\u003e設定ファイルに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"git.enableCommitSigning\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eを追記します\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参照\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E7%85%A7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参照\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vscode/issues/5065\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/Microsoft/vscode/issues/5065\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vscode/issues/43809\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/Microsoft/vscode/issues/43809\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vscode/issues/46412\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/Microsoft/vscode/issues/46412\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://risacan.net/use-gpg-sign-with-vscode/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://risacan.net/use-gpg-sign-with-vscode/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# はじめに\n\nながらくWindowsにてVisual Studio Codeからcommitするときにgpg署名するのは無理だと思っていました。\n\nというのはなぜか\n\n[Add support for signing commits with GPG · Issue #5065 · Microsoft/vscode#issuecomment-207960831](https://github.com/Microsoft/vscode/issues/5065#issuecomment-207960831)\n\n```bash\necho 'no-tty' \u003e\u003e ~/.gnupg/gpg.conf\n```\n\nする方法がうまく行かなかったからです。\n\n# 前提\n\n- Windowsを使用\n- Visual Studio Codeがインストールされている\n- git for Windowsがインストールされている\n- git for Windowsでgpg署名付きcommitができる\n\ngpg署名付きcommitができる状態にない場合は\n[GitHubで署名されたコミットにバッジが表示されるようになったので設定してみる](https://qiita.com/prince_0203/items/ef0e12f2f6d150ff0485)\nを参照してください\n\n# 手順\n\n## git for Windows\n\n```bash\ngit config --global commit.gpgsign true\n```\n\n`~/.gnupg/gpg-agent.conf`に\n\n```plain:~/.gnupg/gpg-agent.conf\ndefault-cache-ttl 46000\npinentry-program /usr/bin/pinentry\nallow-preset-passphrase\n```\n\nを追記します。\n\n## Visual Studio Code\n\n設定ファイルに\n\n```json\n{\n\t\"git.enableCommitSigning\": true,\n}\n```\n\nを追記します\n\n# 参照\n\n- https://github.com/Microsoft/vscode/issues/5065\n- https://github.com/Microsoft/vscode/issues/43809\n- https://github.com/Microsoft/vscode/issues/46412\n- https://risacan.net/use-gpg-sign-with-vscode/\n","coediting":false,"comments_count":0,"created_at":"2018-10-14T15:59:37+09:00","group":null,"id":"7c25c1d6de92921faa3e","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Git","versions":[]},{"name":"gpg","versions":[]},{"name":"VisualStudioCode","versions":[]},{"name":"pinentry","versions":[]}],"title":"WindowsにてVisual Studio Codeからcommitするときにgpg署名する","updated_at":"2018-10-14T15:59:37+09:00","url":"https://qiita.com/yumetodo/items/7c25c1d6de92921faa3e","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e0と1を切り替える需要は多く、単に否定を取ればよい。誰でもわかる。では1と2を切り替えるには？\u003c/p\u003e\n\n\u003cp\u003e正真正銘ゴミ記事です\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++17\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_integral_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"nf\"\u003etoggle_1_2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003en\u003c/code\u003eから1引く。これで0と1に持ち込む\u003c/li\u003e\n\u003cli\u003e否定を取る\u003c/li\u003e\n\u003cli\u003e1足す\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eわかりやすさはないが、短くは書ける。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n0と1を切り替える需要は多く、単に否定を取ればよい。誰でもわかる。では1と2を切り替えるには？\n\n正真正銘ゴミ記事です\n\n# 結論\n\n```cpp:C++17\ntemplate\u003ctypename T, std::enable_if_t\u003cstd::is_integral_v\u003cT\u003e, std::nullptr_t\u003e = nullptr\u003e\nconstexpr T toggle_1_2(T n)\n{\n    return !(n - 1) + 1;\n}\n```\n\n1. `n`から1引く。これで0と1に持ち込む\n2. 否定を取る\n3. 1足す\n\nわかりやすさはないが、短くは書ける。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":5,"created_at":"2018-10-13T20:10:46+09:00","group":null,"id":"c596e960583a074fce39","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]}],"title":"1と2をトグルする演算を短く分かりづらく","updated_at":"2019-04-02T11:31:58+09:00","url":"https://qiita.com/yumetodo/items/c596e960583a074fce39","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"お詫びと訂正\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8A%E8%A9%AB%E3%81%B3%E3%81%A8%E8%A8%82%E6%AD%A3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eお詫びと訂正\u003c/h1\u003e\n\n\u003cp\u003e初投稿時は15秒で目を通せそうな内容でしたが(当社比)、現状15秒では無理そうです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"/celluloce\" class=\"user-mention js-hovercard\" title=\"celluloce\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"celluloce\"\u003e@celluloce\u003c/a\u003e に記事投稿の少し前にはなしたメモをせっかくだから上げておくだけです。\u003c/p\u003e\n\n\u003cp\u003eなお話がややこしくなるのでsignalとの絡みは割愛します。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"main関数からのreturn文\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#main%E9%96%A2%E6%95%B0%E3%81%8B%E3%82%89%E3%81%AEreturn%E6%96%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003emain関数からのreturn文\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003emain関数のスコープにある変数やstatic storageな記憶期間の変数のデストラクタが呼ばれる(C++)\u003c/li\u003e\n\u003cli\u003eというかautomatic storageな記憶期間の変数のデストラクタを呼んだあと\u003ccode\u003eexit\u003c/code\u003eを呼ぶ\u003c/li\u003e\n\u003cli\u003eなので、\u003ccode\u003eatexit\u003c/code\u003eで登録された関数が呼ばれる\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eatexitで登録した関数が呼ばれる\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cstdlib\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eon_exit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"on_exit called\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatexit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eon_exit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e実行結果\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eon_exit called\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://wandbox.org/permlink/QxiWKjAxiDbXHj9w\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wandbox.org/permlink/QxiWKjAxiDbXHj9w\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"exit呼び出し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#exit%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eexit\u003c/code\u003e呼び出し\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eatexit\u003c/code\u003eで登録された関数を呼び出してから終了する\u003c/li\u003e\n\u003cli\u003estatic storageな記憶期間の変数のデストラクタが呼ばれる(C++)\u003c/li\u003e\n\u003cli\u003eつまりC++では概ね\u003ccode\u003equick_exit\u003c/code\u003eを使うべき(C++)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"quick_exit呼び出し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#quick_exit%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003equick_exit\u003c/code\u003e呼び出し\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eat_quick_exit\u003c/code\u003eで登録された関数を呼び出してから終了する\u003c/li\u003e\n\u003cli\u003eC11/C++11から\u003c/li\u003e\n\u003cli\u003e主にマルチスレッドプログラムの同期をキャンセルしてプログラムを終了させるときに。\u003c/li\u003e\n\u003cli\u003eCストリームのバッファはフラッシュされない。\u003c/li\u003e\n\u003cli\u003e一切のデストラクタを呼びたくないときもこっち(C++)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"_exit呼び出し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#_exit%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e_Exit\u003c/code\u003e呼び出し\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e基本\u003ccode\u003equick_exit\u003c/code\u003eと同じ。というか\u003ccode\u003equick_exit\u003c/code\u003eが\u003ccode\u003eat_quick_exit\u003c/code\u003eで登録された関数を呼び出したあとにこれに処理を投げるので当たり前だけど\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"abort呼び出し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#abort%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eabort\u003c/code\u003e呼び出し\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e基本\u003ccode\u003e_Exit\u003c/code\u003eと同じ。がしかし、これは\u003cstrong\u003e異常終了を通知\u003c/strong\u003eする。\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eat_quick_exit\u003c/code\u003eで登録された関数を呼び出さないと思うんだけど、C11規格書(N1570)やC++17規格書(N4659)を読んでも該当文章が見つからない・・・\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003emain関数からのreturn文\u003c/th\u003e\n\u003cth\u003eexit\u003c/th\u003e\n\u003cth\u003equick_exit\u003c/th\u003e\n\u003cth\u003e_Exit\u003c/th\u003e\n\u003cth\u003eabort\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ccode\u003eatexit\u003c/code\u003eで登録された関数の呼び出し\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\n\u003ccode\u003eat_quick_exit\u003c/code\u003eで登録された関数の呼び出し\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e?\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCストリームバッファのフラッシュなど\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e処理系定義\u003c/td\u003e\n\u003ctd\u003e処理系定義\u003c/td\u003e\n\u003ctd\u003e処理系定義\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003estatic storageな期間をもつ変数の破棄\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ethread local storageな期間をもつ変数の破棄\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eautomatic storageな期間をもつ変数の破棄\u003c/td\u003e\n\u003ctd\u003e○\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003ctd\u003e✕\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e「Cストリームバッファのフラッシュなど 」というのは、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCストリームバッファのフラッシュする\u003c/li\u003e\n\u003cli\u003e開いているすべてのCストリームを閉じる\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003etmpfile\u003c/code\u003e関数で作られた一時ファイルの除去\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eの3点セットのこと。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ref\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ref\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eref\u003c/h1\u003e\n\n\u003cp\u003estorageについては\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/067b2db266ae0779f030\" id=\"reference-d9783962ccb0b80fae6e\"\u003eC++のメモリーの話とストレージの有効期間の話をしようか\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eデストラクターとは？という人は\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/b0ff58617f2733d4ffa1\" id=\"reference-a211d4a8291873979452\"\u003eC++入門者に贈るclass入門とclass/structキーワードの使い分け\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# お詫びと訂正\n\n初投稿時は15秒で目を通せそうな内容でしたが(当社比)、現状15秒では無理そうです。\n\n# はじめに\n\n@celluloce に記事投稿の少し前にはなしたメモをせっかくだから上げておくだけです。\n\nなお話がややこしくなるのでsignalとの絡みは割愛します。\n\n# main関数からのreturn文\n\n- main関数のスコープにある変数やstatic storageな記憶期間の変数のデストラクタが呼ばれる(C++)\n- というかautomatic storageな記憶期間の変数のデストラクタを呼んだあと`exit`を呼ぶ\n- なので、`atexit`で登録された関数が呼ばれる\n\n```cpp:atexitで登録した関数が呼ばれる\n#include \u003ciostream\u003e\n#include \u003ccstdlib\u003e\nvoid on_exit()\n{\n    std::cout \u003c\u003c \"on_exit called\" \u003c\u003c std::endl;\n}\nint main(){\n    std::atexit(on_exit);\n    return 0;\n}\n```\n\n```plain:実行結果\non_exit called\n```\n\nhttps://wandbox.org/permlink/QxiWKjAxiDbXHj9w\n\n# `exit`呼び出し\n\n- `atexit`で登録された関数を呼び出してから終了する\n- static storageな記憶期間の変数のデストラクタが呼ばれる(C++)\n- つまりC++では概ね`quick_exit`を使うべき(C++)\n\n# `quick_exit`呼び出し\n\n- `at_quick_exit`で登録された関数を呼び出してから終了する\n- C11/C++11から\n- 主にマルチスレッドプログラムの同期をキャンセルしてプログラムを終了させるときに。\n- Cストリームのバッファはフラッシュされない。\n- 一切のデストラクタを呼びたくないときもこっち(C++)\n\n# `_Exit`呼び出し\n\n- 基本`quick_exit`と同じ。というか`quick_exit`が`at_quick_exit`で登録された関数を呼び出したあとにこれに処理を投げるので当たり前だけど\n\n# `abort`呼び出し\n\n- 基本`_Exit`と同じ。がしかし、これは**異常終了を通知**する。\n- `at_quick_exit`で登録された関数を呼び出さないと思うんだけど、C11規格書(N1570)やC++17規格書(N4659)を読んでも該当文章が見つからない・・・\n\n# まとめ\n\n|                                            | main関数からのreturn文 | exit | quick_exit | _Exit      | abort      |\n|--------------------------------------------|------------------------|------|------------|------------|------------|\n| `atexit`で登録された関数の呼び出し          | ○                      | ○    | ✕          | ✕          | ✕          |\n| `at_quick_exit`で登録された関数の呼び出し    | ✕                      | ✕    | ○          | ✕          | ?          |\n| Cストリームバッファのフラッシュなど        | ○                      | ○    | 処理系定義 | 処理系定義 | 処理系定義 |\n| static storageな期間をもつ変数の破棄       | ○                      | ○    | ✕          | ✕          | ✕          |\n| thread local storageな期間をもつ変数の破棄 | ○                      | ○    | ✕          | ✕          | ✕          |\n| automatic storageな期間をもつ変数の破棄    | ○                      | ✕    | ✕          | ✕          | ✕          |\n\n「Cストリームバッファのフラッシュなど 」というのは、\n\n- Cストリームバッファのフラッシュする\n- 開いているすべてのCストリームを閉じる\n- `tmpfile`関数で作られた一時ファイルの除去\n\nの3点セットのこと。\n\n# ref\n\nstorageについては\n[C++のメモリーの話とストレージの有効期間の話をしようか](https://qiita.com/yumetodo/items/067b2db266ae0779f030)\n\nデストラクターとは？という人は\n[C++入門者に贈るclass入門とclass/structキーワードの使い分け](https://qiita.com/yumetodo/items/b0ff58617f2733d4ffa1)\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":6,"created_at":"2018-10-06T21:33:44+09:00","group":null,"id":"ba5bef7f64636ed2f439","likes_count":12,"private":false,"reactions_count":0,"tags":[{"name":"C","versions":[]},{"name":"C++","versions":[]},{"name":"C++11","versions":[]}],"title":"15秒で理解するmain関数からのreturnとexitとquick_exitとか","updated_at":"2019-11-09T14:32:36+09:00","url":"https://qiita.com/yumetodo/items/ba5bef7f64636ed2f439","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"初めに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初めに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/yut-nagase/items/29d0fc0984e6dbace85e\" id=\"reference-03b5d600672dec10116c\"\u003e[C++]関数のデフォルト引数の指定でハマった件\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという記事にて、デフォルト引数を使うべきかという議論がコメント欄で発生しました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/7of9\" class=\"user-mention js-hovercard\" title=\"7of9\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"7of9\"\u003e@7of9\u003c/a\u003e 氏は使うべきではないという立場から\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/7of9/items/403527840f79ce5c85c6\" id=\"reference-90b8b29e85b01d4feff3\"\u003e2018-08-23 C++ \u0026gt; デフォルト引数 \u0026gt; 使わない理由(ソースリーディングの観点から)\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという記事を出されたので、使うべきという立場から記事を書いてみようと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"前提-デフォルト引数とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E6%8F%90-%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前提: デフォルト引数とは\u003c/h1\u003e\n\n\u003cp\u003etemplateのデフォルト引数の話もありますが、ここではそうではない方(実行時にわたす引数のほう)を扱います。\u003c/p\u003e\n\n\u003cp\u003eつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//do something\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ebar\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのような関数についてですね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stlでの利用例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stl%E3%81%A7%E3%81%AE%E5%88%A9%E7%94%A8%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSTLでの利用例\u003c/h1\u003e\n\n\u003cp\u003eC++標準ライブラリではどのような使用例があるか見てみることにしましょう。なぜならば、標準ライブラリはすべての基本だからです。C++のバージョンによって若干の差異があるのでここではC++17を見ていきましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"string\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#string\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estring\u003c/h2\u003e\n\n\u003cp\u003eSTLといえば\u003ccode\u003estd::string\u003c/code\u003eだと思うので\u003csup\u003e[要出典]\u003c/sup\u003e、見てみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n             \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n             \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n             \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコンストラクタ\u003c/a\u003eは14個もoverloadされています。おもにアロケーターを渡すのにデフォルト引数を利用しているようです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003epos1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                      \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003epos2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enpos\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpprefjp.github.io/reference/string/basic_string/find_first_of.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/reference/string/basic_string/replace.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpprefjp.github.io/reference/string/basic_string/replace.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eメンバー関数では開始位置指定や長さ指定のパラメータがデフォルト指定になっていることが多いようです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"vector\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vector\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003evector\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einitializer_list\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://cpprefjp.github.io/reference/vector/op_constructor.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコンストラクタ\u003c/a\u003eは10個もoverloadされています。やはりアロケーターを渡すのにデフォルト引数を利用しています。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"lwg-2193-default-constructors-for-standard-library-containers-are-explicit\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#lwg-2193-default-constructors-for-standard-library-containers-are-explicit\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLWG 2193: Default constructors for standard library containers are explicit\u003c/h2\u003e\n\n\u003cp\u003e先程までのクラスのコンストラクタ、よく見ると中にはC++03、C++11時代はデフォルト引数を利用していたものがC++14でoverloadとして分割されています。どういうことでしょうか？\u003c/p\u003e\n\n\u003cp\u003e該当のLWGは\u003cbr\u003e\n\u003ca href=\"https://cplusplus.github.io/LWG/issue2193\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cplusplus.github.io/LWG/issue2193\u003c/a\u003e\u003cbr\u003e\nです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eデフォルト引数によって引数が0個でも呼び出せる\u003ccode\u003eexplicit\u003c/code\u003e指定されたコンストラクタ\u003c/strong\u003eがあるときに、\u003ccode\u003e= {};\u003c/code\u003eのようなコンストラクタ呼び出しができないと書かれています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\u003cspan class=\"c1\"\u003e//error: chosen constructor is explicit in copy-initialization\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://wandbox.org/permlink/4Oo3eEa7G3ir0bxJ\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wandbox.org/permlink/4Oo3eEa7G3ir0bxJ\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eつまりこういうことですね。\u003c/p\u003e\n\n\u003cp\u003e解決策としてはデフォルト引数を使わずにデフォルトコンストラクタを追加することです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003efoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003emaybe_unused\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://wandbox.org/permlink/PtUPbziqXpTyqrQs\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://wandbox.org/permlink/PtUPbziqXpTyqrQs\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"stdvectorのコンストラクタが別件で分割されている\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stdvector%E3%81%AE%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%8C%E5%88%A5%E4%BB%B6%E3%81%A7%E5%88%86%E5%89%B2%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estd::vectorのコンストラクタが別件で分割されている\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003evector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e// (3) C++11\u003c/span\u003e\n\u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003evector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// (3) C++14\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// (4) C++11\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003evector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize_type\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n                \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAllocator\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// (3) + (4) C++03\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eC+++03時代のコンストラクタでは、サイズのみ指定した場合、\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eT型のデフォルトコンストラクタを呼び出す\u003c/li\u003e\n\u003cli\u003eT型のコピーコンストラクタをn回呼び出して各要素にコピー\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eというフローになっていました。\u003c/p\u003e\n\n\u003cp\u003eところが一般にコピーコンストラクタの呼び出しコストはデフォルトコンストラクタより大きいのでこれは非効率的でした。\u003c/p\u003e\n\n\u003cp\u003eC++11でこれが分割され、C++14ではサイズのみ受け取るコンストラクタにアロケータを渡せなくなっちゃった問題を修正して現在に至ります。\u003c/p\u003e\n\n\u003cp\u003eこれはコンストラクタの文脈のみではなくすべてのデフォルト引数について考慮するべき事案です。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"デフォルト引数を使うということはユーザーにどういうメッセージを発信するか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%AF%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AB%E3%81%A9%E3%81%86%E3%81%84%E3%81%86%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E7%99%BA%E4%BF%A1%E3%81%99%E3%82%8B%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデフォルト引数を使うということはユーザーにどういうメッセージを発信するか\u003c/h1\u003e\n\n\u003cp\u003eデフォルト引数は言わずもがな呼び出し時に省略してもいいということなので、そこに任意のパラメータを指定した場合は注意してコードを読んでね、ということを発信しているように思います。\u003c/p\u003e\n\n\u003cp\u003e言い換えると予めある社会的合意に反することをやるよ！というメッセージですね。\u003c/p\u003e\n\n\u003cp\u003eSTLでアロケータがデフォルト引数になっていたのは、通常アロケータを自力で実装して指定するという使い方をしないからです。わざわざアロケーターを指定するということはソースコードを読む人間の注意を喚起しますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"デフォルト引数をいつ使うべきか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E5%BC%95%E6%95%B0%E3%82%92%E3%81%84%E3%81%A4%E4%BD%BF%E3%81%86%E3%81%B9%E3%81%8D%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eデフォルト引数をいつ使うべきか\u003c/h1\u003e\n\n\u003cp\u003e先にほど述べたように、デフォルト引数はユーザーに、省略した状態が一般的だというメッセージを発します。\u003c/p\u003e\n\n\u003cp\u003e省略した状態が一般的だという社会的合意は必要で、STLであったりBoostのような影響力の強いライブラリを作るなら十分な調査を元に慎重に検討するべきでしょう。\u003c/p\u003e\n\n\u003cp\u003eしかし、我々は普段そんなコードを書くわけではないのでもう少し気軽に考えていいんじゃないかと思います。\u003c/p\u003e\n\n\u003cp\u003e例えば \u003ca href=\"/7of9\" class=\"user-mention js-hovercard\" title=\"7of9\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"7of9\"\u003e@7of9\u003c/a\u003e 氏が例に出していたこのコードを見てみよう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003einitDevices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 初期化(通信速度bps)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitDHT22\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1200\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitRHT03\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2400\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitSi7021\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1200\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitTMP104\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2400\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eここで呼び出している各関数の引数の意味はどうやら通信速度らしいです。\u003c/p\u003e\n\n\u003cp\u003eこのとき例えば\u003ccode\u003einitDHT22(1200);\u003c/code\u003eの\u003ccode\u003e1200\u003c/code\u003eという数字がよく使うなぁと思ったらデフォルト引数を使うべきです。その時その数字の \u003cstrong\u003e重要度は低い可能性が高い\u003c/strong\u003e です。\u003c/p\u003e\n\n\u003cp\u003eプログラマーはソースコードを書く時間よりも読む時間のほうが圧倒的に長いので、ソースコードを読むときに \u003cstrong\u003eどうでもいい情報\u003c/strong\u003e で満ち溢れていたら読む速度が落ちてしまい、効率が大きく下がります。\u003c/p\u003e\n\n\u003cp\u003eつまりその場合\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003einitDevices\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 初期化(通信速度bps)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitDHT22\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitRHT03\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitSi7021\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1200\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einitTMP104\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2400\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのほうがいい、ということになります。\u003c/p\u003e\n\n\u003cp\u003e一方でデフォルト値をソースコードを読むときに確認することが多いのだとしたら、それは \u003cstrong\u003e重要度が高い情報\u003c/strong\u003e ということなのでデフォルト引数を使うべきではありません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eまとめると、\u003cstrong\u003eデフォルト引数はソースコードを読むときにさほど重要ではない情報を遮蔽し、可読性を上げるための機能\u003c/strong\u003e であると言えます。\u003c/p\u003e\n\n\u003cp\u003eなので積極的に使っていきましょう。\u003c/p\u003e\n\n\u003cp\u003eただし、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eデフォルト引数によって引数が0個でも呼び出せる\u003ccode\u003eexplicit\u003c/code\u003e指定されたコンストラクタを作らない\u003c/li\u003e\n\u003cli\u003eデフォルト値の型のcopy ctor 呼び出しコストがdefault ctor より大きい場合、overloadを追加して分割しデフォルト引数を使わない\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eを守りましょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# 初めに\n\n[[C++]関数のデフォルト引数の指定でハマった件](https://qiita.com/yut-nagase/items/29d0fc0984e6dbace85e)\n\nという記事にて、デフォルト引数を使うべきかという議論がコメント欄で発生しました。\n\n@7of9 氏は使うべきではないという立場から\n\n[2018-08-23 C++ \u003e デフォルト引数 \u003e 使わない理由(ソースリーディングの観点から)](https://qiita.com/7of9/items/403527840f79ce5c85c6)\n\nという記事を出されたので、使うべきという立場から記事を書いてみようと思います。\n\n# 前提: デフォルト引数とは\n\ntemplateのデフォルト引数の話もありますが、ここではそうではない方(実行時にわたす引数のほう)を扱います。\n\nつまり\n\n```cpp\nvoid foo(int n = 0)\n{\n    //do something\n}\nclass bar {\n    bar(int n = 0){}\n};\n```\n\nのような関数についてですね。\n\n# STLでの利用例\n\nC++標準ライブラリではどのような使用例があるか見てみることにしましょう。なぜならば、標準ライブラリはすべての基本だからです。C++のバージョンによって若干の差異があるのでここではC++17を見ていきましょう。\n\n## string\n\nSTLといえば`std::string`だと思うので\u003csup\u003e[要出典]\u003c/sup\u003e、見てみましょう。\n\n```cpp\nbasic_string(const basic_string\u0026 str,\n             size_type pos,\n             size_type n,\n             const Allocator\u0026 a = Allocator());\n```\n\n[コンストラクタ](https://cpprefjp.github.io/reference/string/basic_string/op_constructor.html)は14個もoverloadされています。おもにアロケーターを渡すのにデフォルト引数を利用しているようです。\n\n```cpp\nsize_type find_first_of(const basic_string\u0026 str, size_type pos = 0) const noexcept;\nbasic_string\u0026 replace(size_type pos1, size_type n1,\n                      const basic_string\u0026 str,\n                      size_type pos2, size_type n2 = npos);\n```\n\n- [https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html](https://cpprefjp.github.io/reference/string/basic_string/find_first_of.html)\n- [https://cpprefjp.github.io/reference/string/basic_string/replace.html](https://cpprefjp.github.io/reference/string/basic_string/replace.html)\n\nメンバー関数では開始位置指定や長さ指定のパラメータがデフォルト指定になっていることが多いようです。\n\n## vector\n\n```cpp\nvector(initializer_list\u003cT\u003e il,\n       const Allocator\u0026 a = Allocator());\n```\n\n[コンストラクタ](https://cpprefjp.github.io/reference/vector/op_constructor.html)は10個もoverloadされています。やはりアロケーターを渡すのにデフォルト引数を利用しています。\n\n## LWG 2193: Default constructors for standard library containers are explicit\n\n先程までのクラスのコンストラクタ、よく見ると中にはC++03、C++11時代はデフォルト引数を利用していたものがC++14でoverloadとして分割されています。どういうことでしょうか？\n\n該当のLWGは\n[https://cplusplus.github.io/LWG/issue2193](https://cplusplus.github.io/LWG/issue2193)\nです。\n\n**デフォルト引数によって引数が0個でも呼び出せる`explicit`指定されたコンストラクタ**があるときに、` = {};`のようなコンストラクタ呼び出しができないと書かれています。\n\n```cpp\nclass foo {\npublic:\n    explicit foo(int n = 0) : n(n) {}\nprivate:\n    [[maybe_unused]] int n;\n};\nint main()\n{\n    [[maybe_unused]] foo f;//OK\n    [[maybe_unused]] foo f2 = {};//error: chosen constructor is explicit in copy-initialization\n}\n```\n\n[https://wandbox.org/permlink/4Oo3eEa7G3ir0bxJ](https://wandbox.org/permlink/4Oo3eEa7G3ir0bxJ)\n\nつまりこういうことですね。\n\n解決策としてはデフォルト引数を使わずにデフォルトコンストラクタを追加することです。\n\n```cpp\nclass foo {\npublic:\n    foo() = default;\n    explicit foo(int n) : n(n) {}\nprivate:\n    [[maybe_unused]] int n;\n};\nint main()\n{\n    [[maybe_unused]] foo f;//OK\n    [[maybe_unused]] foo f2 = {};//OK\n}\n```\n\n[https://wandbox.org/permlink/PtUPbziqXpTyqrQs](https://wandbox.org/permlink/PtUPbziqXpTyqrQs)\n\n## std::vectorのコンストラクタが別件で分割されている\n\n```cpp\nexplicit vector(size_type n);                        // (3) C++11\nexplicit vector(size_type n,\n                const Allocator\u0026 a = Allocator());   // (3) C++14\n\nvector(size_type n, const T\u0026 value,\n       const Allocator\u0026 a = Allocator());            // (4) C++11\n\nexplicit vector(size_type n, const T\u0026 value = T(),\n                const Allocator\u0026 a = Allocator());   // (3) + (4) C++03\n```\n\nC+++03時代のコンストラクタでは、サイズのみ指定した場合、\n\n1. T型のデフォルトコンストラクタを呼び出す\n2. T型のコピーコンストラクタをn回呼び出して各要素にコピー\n\nというフローになっていました。\n\nところが一般にコピーコンストラクタの呼び出しコストはデフォルトコンストラクタより大きいのでこれは非効率的でした。\n\nC++11でこれが分割され、C++14ではサイズのみ受け取るコンストラクタにアロケータを渡せなくなっちゃった問題を修正して現在に至ります。\n\nこれはコンストラクタの文脈のみではなくすべてのデフォルト引数について考慮するべき事案です。\n\n# デフォルト引数を使うということはユーザーにどういうメッセージを発信するか\n\nデフォルト引数は言わずもがな呼び出し時に省略してもいいということなので、そこに任意のパラメータを指定した場合は注意してコードを読んでね、ということを発信しているように思います。\n\n言い換えると予めある社会的合意に反することをやるよ！というメッセージですね。\n\nSTLでアロケータがデフォルト引数になっていたのは、通常アロケータを自力で実装して指定するという使い方をしないからです。わざわざアロケーターを指定するということはソースコードを読む人間の注意を喚起しますね。\n\n# デフォルト引数をいつ使うべきか\n\n先にほど述べたように、デフォルト引数はユーザーに、省略した状態が一般的だというメッセージを発します。\n\n省略した状態が一般的だという社会的合意は必要で、STLであったりBoostのような影響力の強いライブラリを作るなら十分な調査を元に慎重に検討するべきでしょう。\n\nしかし、我々は普段そんなコードを書くわけではないのでもう少し気軽に考えていいんじゃないかと思います。\n\n例えば @7of9 氏が例に出していたこのコードを見てみよう。\n\n```cpp\nvoid initDevices()\n{\n    // 初期化(通信速度bps)\n    initDHT22(1200);\n    initRHT03(2400);\n    initSi7021(1200);\n    initTMP104(2400);\n    ...\n}\n```\n\nここで呼び出している各関数の引数の意味はどうやら通信速度らしいです。\n\nこのとき例えば`initDHT22(1200);`の`1200`という数字がよく使うなぁと思ったらデフォルト引数を使うべきです。その時その数字の **重要度は低い可能性が高い** です。\n\nプログラマーはソースコードを書く時間よりも読む時間のほうが圧倒的に長いので、ソースコードを読むときに **どうでもいい情報** で満ち溢れていたら読む速度が落ちてしまい、効率が大きく下がります。\n\nつまりその場合\n\n```cpp\nvoid initDevices()\n{\n    // 初期化(通信速度bps)\n    initDHT22();\n    initRHT03();\n    initSi7021(1200);\n    initTMP104(2400);\n    ...\n}\n```\n\nのほうがいい、ということになります。\n\n一方でデフォルト値をソースコードを読むときに確認することが多いのだとしたら、それは **重要度が高い情報** ということなのでデフォルト引数を使うべきではありません。\n\n# まとめ\n\nまとめると、**デフォルト引数はソースコードを読むときにさほど重要ではない情報を遮蔽し、可読性を上げるための機能** であると言えます。\n\nなので積極的に使っていきましょう。\n\nただし、\n\n- デフォルト引数によって引数が0個でも呼び出せる`explicit`指定されたコンストラクタを作らない\n- デフォルト値の型のcopy ctor 呼び出しコストがdefault ctor より大きい場合、overloadを追加して分割しデフォルト引数を使わない\n\nを守りましょう。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":3,"created_at":"2018-08-23T13:59:06+09:00","group":null,"id":"5a508efeb7da250b5404","likes_count":21,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++17","versions":[]}],"title":"C++のデフォルト引数をなぜ使うべきか","updated_at":"2019-04-02T11:40:25+09:00","url":"https://qiita.com/yumetodo/items/5a508efeb7da250b5404","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題\u003c/h1\u003e\n\n\u003cp\u003ePKGBUILDを書いて\u003ccode\u003emakepkg\u003c/code\u003eしてパッケージをインストールしたら、\u003ccode\u003e/msys64/msys64/mingw64\u003c/code\u003eがinstall prefixになってしまった。\u003ccode\u003e/msys64/msys64/\u003c/code\u003eとは一体・・・。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eビルド出力より抜粋\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e-- Install configuration: \"\"\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/lib/liblpsolve55.dll.a\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/bin/liblpsolve55.dll\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_bit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_crash.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_explicit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_fortify.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_Hash.h\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"原因\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8E%9F%E5%9B%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e原因\u003c/h1\u003e\n\n\u003cp\u003ePKGBUILDの\u003ccode\u003ebuild()\u003c/code\u003eでcmakeを呼び出していたが、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ePKGBUILD_build()\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eMINGW_PREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e/bin/cmake.exe \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-G\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"MSYS Makefiles\"\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-DCMAKE_INSTALL_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eMINGW_PREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-DLIB_TYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eSHARED \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    ../lp_solve_5.5\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのように呼び出していた。このとき\u003ccode\u003eMINGW_PREFIX\u003c/code\u003eは\u003ccode\u003e/mingw64\u003c/code\u003eである。\u003c/p\u003e\n\n\u003cp\u003eしかし、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/ubnt_intrepid/items/0d9ea1c792dd2049d71c\" id=\"reference-75bf170264a6bc6da8d2\"\u003eMSYS2小ネタ集 - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Alexpux/MINGW-packages/issues/1347\" rel=\"nofollow noopener\" target=\"_blank\"\u003ebash broken : cannnot escape * · Issue #1347 · Alexpux/MINGW-packages\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eにもあるように、msys2は引数展開を行うため、\u003ccode\u003eCMAKE_INSTALL_PREFIX\u003c/code\u003eは\u003ccode\u003eC:\\msys2\\mingw64\u003c/code\u003eになってしまう(msys2の場所依存)。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"解決策\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解決策\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ePKGBUILD_build()\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e  \u003cspan class=\"nv\"\u003eMSYS2_ARG_CONV_EXCL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"-DCMAKE_INSTALL_PREFIX=\"\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eMINGW_PREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e/bin/cmake.exe \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-G\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"MSYS Makefiles\"\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-DCMAKE_INSTALL_PREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eMINGW_PREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e-DLIB_TYPE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eSHARED \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    ../lp_solve_5.5\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e展開を阻止しましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eビルド出力より抜粋\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e-- Install configuration: \"\"\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/lib/liblpsolve55.dll.a\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/bin/liblpsolve55.dll\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_bit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_crash.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_explicit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_fortify.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_Hash.h\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# 問題\n\nPKGBUILDを書いて`makepkg`してパッケージをインストールしたら、`/msys64/msys64/mingw64`がinstall prefixになってしまった。`/msys64/msys64/`とは一体・・・。\n\n```plain:ビルド出力より抜粋\n-- Install configuration: \"\"\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/lib/liblpsolve55.dll.a\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/bin/liblpsolve55.dll\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_bit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_crash.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_explicit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_fortify.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/msys64/mingw64/include/lpsolve/lp_Hash.h\n```\n\n# 原因\n\nPKGBUILDの`build()`でcmakeを呼び出していたが、\n\n```bash:PKGBUILD_build()\n  ${MINGW_PREFIX}/bin/cmake.exe \\\n    -G\"MSYS Makefiles\" \\\n    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \\\n    -DLIB_TYPE=SHARED \\\n    ../lp_solve_5.5\n```\n\nのように呼び出していた。このとき`MINGW_PREFIX`は`/mingw64`である。\n\nしかし、\n\n- [MSYS2小ネタ集 - Qiita](https://qiita.com/ubnt_intrepid/items/0d9ea1c792dd2049d71c)\n- [bash broken : cannnot escape * · Issue #1347 · Alexpux/MINGW-packages](https://github.com/Alexpux/MINGW-packages/issues/1347)\n\nにもあるように、msys2は引数展開を行うため、`CMAKE_INSTALL_PREFIX`は`C:\\msys2\\mingw64`になってしまう(msys2の場所依存)。\n\n# 解決策\n\n```bash:PKGBUILD_build()\n  MSYS2_ARG_CONV_EXCL=\"-DCMAKE_INSTALL_PREFIX=\" \\\n  ${MINGW_PREFIX}/bin/cmake.exe \\\n    -G\"MSYS Makefiles\" \\\n    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \\\n    -DLIB_TYPE=SHARED \\\n    ../lp_solve_5.5\n````\n\n展開を阻止しましょう。\n\n```plain:ビルド出力より抜粋\n-- Install configuration: \"\"\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/lib/liblpsolve55.dll.a\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/bin/liblpsolve55.dll\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_bit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_crash.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_explicit.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_fortify.h\n-- Installing: C:/msys64/home/yumetodo/patches/mingw-w64-lpsolve/pkg/mingw-w64-x86_64-lpsolve/mingw64/include/lpsolve/lp_Hash.h\n```\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-08-13T12:48:13+09:00","group":null,"id":"af5d079c44421046c0ea","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"CMake","versions":[]},{"name":"pkgbuild","versions":[]},{"name":"msys2","versions":[]},{"name":"makepkg","versions":[]}],"title":"msys2でPKGBUILDを書くときにcmakeを使う際は引数展開にご注意を。","updated_at":"2019-04-02T11:41:22+09:00","url":"https://qiita.com/yumetodo/items/af5d079c44421046c0ea","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e諸事情あってWebassemblyを使ってみたくなった。ざっと見た感じWindowsで触るのは苦痛そうなので素直にUbuntu18.04から触っている。\u003c/p\u003e\n\n\u003cp\u003eさて、C++17で\u003ccode\u003estd::optional\u003c/code\u003eが追加されたが、これをWebassemblyで使いたい。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estd::vector\u003c/code\u003eなんかだと\u003ccode\u003eemscripten::register_vector\u003c/code\u003eがあってこれを使えばいいが、optionalには用意されていない。\u003c/p\u003e\n\n\u003cp\u003eならば自分で書くか。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"参考にするもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考にするもの\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003eemscripten::register_vector\u003c/code\u003eを参考に書くことにする。実装は\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/kripken/emscripten/blob/8654549be4f7d8ea8fe8970229bf8767b4a5d154/system/include/emscripten/bind.h#L1460-L1499\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/kripken/emscripten/blob/8654549be4f7d8ea8fe8970229bf8767b4a5d154/system/include/emscripten/bind.h#L1460-L1499\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにある。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"できたもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたもの\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eregister_optional.hpp\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#ifndef EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n#define EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n#include \u0026lt;optional\u0026gt;\n#include \u0026lt;emscripten/bind.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eemscripten\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eclass_\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eregister_optional\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eemscripten\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_value\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_value\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eemscripten\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eclass_\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOptionalType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"n\"\u003econstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"has_value\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_value\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"value\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"reset\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif //EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eもっとメンバ関数あるだろとか言わない。\u003c/p\u003e\n\n\u003cp\u003eなんか\u003ccode\u003eregister_vector\u003c/code\u003eはだいぶ面倒なことしていたけど、lambda式は関数ポインタに変換できるし、noexcept指定もそこで外せるのでヘルパー関数はいらない。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使いかた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%84%E3%81%8B%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使いかた\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eindex.cpp\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \"register_optional.hpp\"\n\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eOptionalTest\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eoptional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullopt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mf\"\u003e7.2\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEMSCRIPTEN_BINDINGS\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_class_example\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eemscripten\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eclass_\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eOptionalTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"OptionalTest\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclass_function\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"foo\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eOptionalTest\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eregister_optional\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"optional\u0026lt;double\u0026gt;\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eみたいに書くと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eem++ -std=c++17 -O2 -s DISABLE_EXCEPTION_CATCHING=0 --bind -o index.js index.cpp\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようなコマンドで\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eindex.html\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003echarset=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"UTF-8\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003ebind_test\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;script\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eModule\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eonRuntimeInitialized\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eready\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eloaded\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003einteractive\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ecomplete\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003eincludes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereadyState\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"nx\"\u003eloaded\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eDOMContentLoaded\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eloaded\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003eready\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOptionalTest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eOptionalTest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efoo\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehas_value\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n                        \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                        \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerText\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003enone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/script\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;script \u003c/span\u003e\u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"index.js\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"foo\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eaaa\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこんなHTMLおいておけばいい感じに使える。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003e一体これなにに使いたかったかというと、\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://yumetodo.github.io/individual_number_check_digit_calcurator/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eマイナンバーのチェックデジットをWebassemblyで計算する\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれ。C++から例外投げるのは捕捉が面倒そうだったのでoptionalを使いたかった。\u003c/p\u003e\n\n\u003cp\u003eマイナンバーのチェックデジット自体は前に\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/yumetodo/items/600ca0df422010cbc4c1\" id=\"reference-e552c5eda7e1d186bc8f\"\u003eC++でマイナンバーのチェックデジットを計算する\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eで書いているんですが。\u003c/p\u003e\n","body":"# はじめに\n\n諸事情あってWebassemblyを使ってみたくなった。ざっと見た感じWindowsで触るのは苦痛そうなので素直にUbuntu18.04から触っている。\n\nさて、C++17で`std::optional`が追加されたが、これをWebassemblyで使いたい。\n\n`std::vector`なんかだと`emscripten::register_vector`があってこれを使えばいいが、optionalには用意されていない。\n\nならば自分で書くか。\n\n# 参考にするもの\n\n`emscripten::register_vector`を参考に書くことにする。実装は\n\nhttps://github.com/kripken/emscripten/blob/8654549be4f7d8ea8fe8970229bf8767b4a5d154/system/include/emscripten/bind.h#L1460-L1499\n\nにある。\n\n# できたもの\n\n```cpp:register_optional.hpp\n#ifndef EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n#define EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n#include \u003coptional\u003e\n#include \u003cemscripten/bind.h\u003e\ntemplate\u003ctypename T\u003e\nemscripten::class_\u003cstd::optional\u003cT\u003e\u003e register_optional(const char* name) {\n    using emscripten::val;\n    using OptionalType = std::optional\u003cT\u003e;\n    bool (*has_value)(const OptionalType\u0026) = [](const OptionalType\u0026 op){ return op.has_value(); };\n    val (*value)(const OptionalType\u0026) = [](const OptionalType\u0026 op) { return val(op.value()); };\n    void (*reset)(OptionalType\u0026) = [](OptionalType\u0026 op) { op.reset(); };\n    return emscripten::class_\u003cOptionalType\u003e(name)\n        .template constructor\u003c\u003e()\n        .function(\"has_value\", has_value)\n        .function(\"value\", value)\n        .function(\"reset\", reset)\n        ;\n}\n#endif //EMSCRIPTEN_BINDINGS_REGISTER_STD_OPTIONAL_HPP_\n```\n\nもっとメンバ関数あるだろとか言わない。\n\nなんか`register_vector`はだいぶ面倒なことしていたけど、lambda式は関数ポインタに変換できるし、noexcept指定もそこで外せるのでヘルパー関数はいらない。\n\n# 使いかた\n\n```cpp:index.cpp\n#include \"register_optional.hpp\"\nclass OptionalTest{\npublic:\n    static std::optional\u003cdouble\u003e foo(int n) {\n        if(n == 0){\n            return std::nullopt;\n        }\n        else{\n            return { 7.2 / n};\n        }\n    }\n};\nEMSCRIPTEN_BINDINGS(my_class_example) {\n    emscripten::class_\u003cOptionalTest\u003e(\"OptionalTest\")\n        .constructor\u003c\u003e()\n        .class_function(\"foo\", \u0026OptionalTest::foo);\n    register_optional\u003cdouble\u003e(\"optional\u003cdouble\u003e\");\n}\n```\n\nみたいに書くと\n\n```\nem++ -std=c++17 -O2 -s DISABLE_EXCEPTION_CATCHING=0 --bind -o index.js index.cpp\n```\n\nのようなコマンドで\n\n```html:index.html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003ebind_test\u003c/title\u003e\n    \u003cscript\u003e\n        var Module = {};\n        Module.onRuntimeInitialized = () =\u003e {\n                function ready(loaded) {\n                    if (['interactive', 'complete'].includes(document.readyState)) {\n                        loaded();\n                    } else {\n                        document.addEventListener('DOMContentLoaded', loaded);\n                    }\n                }\n                ready(() =\u003e {\n                    console.log(Module.OptionalTest);\n                    const op = Module.OptionalTest.foo(2);\n                    console.log(op);\n                    const foo = document.getElementById(\"foo\");\n                    if(op.has_value()){\n                        foo.innerText = op.value();\n                    }\n                    else{\n                        foo.innerText = \"none\";\n                    }\n                })\n            }\n    \u003c/script\u003e\n    \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cp id=\"foo\"\u003eaaa\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nこんなHTMLおいておけばいい感じに使える。\n\n# 余談\n\n一体これなにに使いたかったかというと、\n\n[マイナンバーのチェックデジットをWebassemblyで計算する](https://yumetodo.github.io/individual_number_check_digit_calcurator/)\n\nこれ。C++から例外投げるのは捕捉が面倒そうだったのでoptionalを使いたかった。\n\nマイナンバーのチェックデジット自体は前に\n\n[C++でマイナンバーのチェックデジットを計算する](https://qiita.com/yumetodo/items/600ca0df422010cbc4c1)\n\nで書いているんですが。\n","coediting":false,"comments_count":0,"created_at":"2018-08-09T15:50:55+09:00","group":null,"id":"32eb162faa78f36009a6","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"Emscripten","versions":[]},{"name":"C++17","versions":[]},{"name":"WebAssembly","versions":[]}],"title":"Webassemblyでもstd::optionalが使いたいのでemscripten binding書きます","updated_at":"2018-08-09T20:10:27+09:00","url":"https://qiita.com/yumetodo/items/32eb162faa78f36009a6","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"c-now-and-tomorrow\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c-now-and-tomorrow\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++ Now and Tomorrow\u003c/h1\u003e\n\n\u003cp\u003e2018年7月23日、東京大手町のMorgan Stanleyにて\u003ca href=\"http://www.morganstanley.co.jp/ja/people/students-graduates/events-programs/2018-bjarne-stroustrup-now-and-tomorrow\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++ Now and Tomorrow\u003c/a\u003eが開催されました。\u003c/p\u003e\n\n\u003cp\u003eCities Ckylineをやっていたら家を出るのが遅くなって、16:00開始なのに東京駅に16:37に着きました。そこからOtemachi Financial City South Towerまではすぐについたんですが、受付が大量にあるオフィスビルあるあるに引っかかってさまよいにさまよった挙げ句、会場入りは17:00でした。\u003c/p\u003e\n\n\u003cp\u003e入るとBjarne Stroustrup氏が、C++におけるジェネリクスとC++20のconceptの話をしていました。\u003c/p\u003e\n\n\u003cp\u003eその後、別の人が金融・株分野での高速な動作の要求される世界の紹介があり、質疑応答、解散、のち個別に質問がありました。\u003c/p\u003e\n\n\u003cp\u003e本当は質疑応答でC++のNetworkingと金融の話を聞こうと思ってたんですが時間の関係で私の前の人で打ち切られてしまったのでそれはまあ誰かが聞いてくれるでしょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"char8_t型とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char8_t%E5%9E%8B%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar8_t\u003c/code\u003e型とは\u003c/h1\u003e\n\n\u003cp\u003e\u003cdel\u003e大学の試験が終わったら追記します\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e別の記事として執筆しました\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/54e1a8230dbf513ea85b\" id=\"reference-629bf5ca736141df8871\"\u003eC++標準化委員会、ついに文字とは何かを理解する: char8_t\u003c/a\u003e\u003cbr\u003e\n\u003ccode\u003echar8_t\u003c/code\u003e型はC++20に入りましたね！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問いかけようにも英語力がない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E3%81%84%E3%81%8B%E3%81%91%E3%82%88%E3%81%86%E3%81%AB%E3%82%82%E8%8B%B1%E8%AA%9E%E5%8A%9B%E3%81%8C%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問いかけようにも英語力がない\u003c/h1\u003e\n\n\u003cp\u003e英語は辞書があれば読めるけど、会話とか無理。圧倒的無理。英検2級なんてそんなもん。\u003c/p\u003e\n\n\u003cp\u003eまあいくつかキーワードを紙に書いて見せたりしながら質問したんですが。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"注意\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B3%A8%E6%84%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e注意\u003c/h1\u003e\n\n\u003cp\u003eそういうわけで下記内容はちゃんと私が聞き取れていたのか、一切の保証はありません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"本題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%AC%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e本題\u003c/h1\u003e\n\n\u003cp\u003eなぜ\u003ccode\u003echar8_t\u003c/code\u003e型はC++にないのでしょうか？グダグダな問答はもはや言語化不能なので割愛して整理して紹介します。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"char16_tchar32_tはutf-16utf-32を保証するためのものではない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#char16_tchar32_t%E3%81%AFutf-16utf-32%E3%82%92%E4%BF%9D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%82%82%E3%81%AE%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eはUTF-16/UTF-32を保証するためのものではない\u003c/h2\u003e\n\n\u003cp\u003eC++11で\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eが導入されましたが、これはUTF-16/UTF-32を保証するためのものではなく、16bit、32bitの文字型であることを示すものであると言うのがBjarne Stroustrup氏の主張と思われます。\u003c/p\u003e\n\n\u003cp\u003e実際C++規格では\u003ccode\u003echar16_t\u003c/code\u003e/\u003ccode\u003echar32_t\u003c/code\u003eはUTF-16/UTF-32を保証しません。\u003ccode\u003e__STDC_UTF_16__\u003c/code\u003e/\u003ccode\u003e__STDC_UTF_32__\u003c/code\u003eが定義されているときのみUTF-16/UTF-32を保証します。\u003c/p\u003e\n\n\u003cp\u003eすると\u003ccode\u003echar8_t\u003c/code\u003eというのは8bitの文字列型と捉えるべきということになり、それってすでに\u003ccode\u003echar\u003c/code\u003eがあるじゃんとなってしまう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"8bitな文字エンコードはutf-8だけじゃないよね\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#8bit%E3%81%AA%E6%96%87%E5%AD%97%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AFutf-8%E3%81%A0%E3%81%91%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%82%88%E3%81%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e8bitな文字エンコードはUTF-8だけじゃないよね？\u003c/h2\u003e\n\n\u003cp\u003eBjarne Stroustrup氏曰く、日本語にはSJISがあるし、そもそもASCIIあるやん。なんでUTF-8だけ？という感じのことを言っていたように思う。\u003c/p\u003e\n\n\u003cp\u003eC++がUTF-8に媚をうっちゃまずいとかそういうことだろうか。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"文字エンコードの保証はlibraryで\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%87%E5%AD%97%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E4%BF%9D%E8%A8%BC%E3%81%AFlibrary%E3%81%A7\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e文字エンコードの保証はlibraryで\u003c/h2\u003e\n\n\u003cp\u003eUTF-8を保証する\u003ccode\u003echar8_t\u003c/code\u003eがあればC++17で追加されたfilesystem libraryの\u003ccode\u003eu8path\u003c/code\u003eみたいにoverloadできないものを作らなくて済むやん？という感じのことを聞いたところ、そういうのはlibraryで。という回答が。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"感想\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%84%9F%E6%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e感想\u003c/h1\u003e\n\n\u003cp\u003eそれでもUTF-8を保証する型はほしいので積極的に声を上げ続けて行きたい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003echar8_t\u003c/code\u003eってどう発音すればいいの？なんていう質問をしたら、「ちゃー、エイト、てぃー」と発音してくれた。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# C++ Now and Tomorrow\n\n2018年7月23日、東京大手町のMorgan Stanleyにて[C++ Now and Tomorrow](http://www.morganstanley.co.jp/ja/people/students-graduates/events-programs/2018-bjarne-stroustrup-now-and-tomorrow)が開催されました。\n\nCities Ckylineをやっていたら家を出るのが遅くなって、16:00開始なのに東京駅に16:37に着きました。そこからOtemachi Financial City South Towerまではすぐについたんですが、受付が大量にあるオフィスビルあるあるに引っかかってさまよいにさまよった挙げ句、会場入りは17:00でした。\n\n入るとBjarne Stroustrup氏が、C++におけるジェネリクスとC++20のconceptの話をしていました。\n\nその後、別の人が金融・株分野での高速な動作の要求される世界の紹介があり、質疑応答、解散、のち個別に質問がありました。\n\n本当は質疑応答でC++のNetworkingと金融の話を聞こうと思ってたんですが時間の関係で私の前の人で打ち切られてしまったのでそれはまあ誰かが聞いてくれるでしょう。\n\n# `char8_t`型とは\n\n~~大学の試験が終わったら追記します~~\n\n別の記事として執筆しました\n[C++標準化委員会、ついに文字とは何かを理解する: char8_t](https://qiita.com/yumetodo/items/54e1a8230dbf513ea85b)\n`char8_t`型はC++20に入りましたね！\n\n# 問いかけようにも英語力がない\n\n英語は辞書があれば読めるけど、会話とか無理。圧倒的無理。英検2級なんてそんなもん。\n\nまあいくつかキーワードを紙に書いて見せたりしながら質問したんですが。\n\n# 注意\n\nそういうわけで下記内容はちゃんと私が聞き取れていたのか、一切の保証はありません。\n\n# 本題\n\nなぜ`char8_t`型はC++にないのでしょうか？グダグダな問答はもはや言語化不能なので割愛して整理して紹介します。\n\n## `char16_t`/`char32_t`はUTF-16/UTF-32を保証するためのものではない\n\nC++11で`char16_t`/`char32_t`が導入されましたが、これはUTF-16/UTF-32を保証するためのものではなく、16bit、32bitの文字型であることを示すものであると言うのがBjarne Stroustrup氏の主張と思われます。\n\n実際C++規格では`char16_t`/`char32_t`はUTF-16/UTF-32を保証しません。`__STDC_UTF_16__`/`__STDC_UTF_32__`が定義されているときのみUTF-16/UTF-32を保証します。\n\nすると`char8_t`というのは8bitの文字列型と捉えるべきということになり、それってすでに`char`があるじゃんとなってしまう。\n\n## 8bitな文字エンコードはUTF-8だけじゃないよね？\n\nBjarne Stroustrup氏曰く、日本語にはSJISがあるし、そもそもASCIIあるやん。なんでUTF-8だけ？という感じのことを言っていたように思う。\n\nC++がUTF-8に媚をうっちゃまずいとかそういうことだろうか。\n\n## 文字エンコードの保証はlibraryで\n\nUTF-8を保証する`char8_t`があればC++17で追加されたfilesystem libraryの`u8path`みたいにoverloadできないものを作らなくて済むやん？という感じのことを聞いたところ、そういうのはlibraryで。という回答が。\n\n# 感想\n\nそれでもUTF-8を保証する型はほしいので積極的に声を上げ続けて行きたい。\n\n# 余談\n\n`char8_t`ってどう発音すればいいの？なんていう質問をしたら、「ちゃー、エイト、てぃー」と発音してくれた。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":2,"created_at":"2018-07-23T19:48:59+09:00","group":null,"id":"2f2d95e8fabd78a5d0c8","likes_count":24,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"C++17","versions":[]},{"name":"C++20","versions":[]},{"name":"cppnow","versions":[]}],"title":"C++ Now and TomorrowでBjarne Stroustrup氏になぜchar8_t型がないのか聞いてきた","updated_at":"2019-04-02T11:44:49+09:00","url":"https://qiita.com/yumetodo/items/2f2d95e8fabd78a5d0c8","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/yumetodo/items/c683acfa571dd5f9306a\" id=\"reference-4f0cc8bc4ddd060fe393\"\u003eC++17のif constexprがあると嬉しかったシーンを具体的に\u003c/a\u003e\u003cbr\u003e\nの記事でも言ったとおり、諸事情あって\u003cbr\u003e\n前に\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/bf2bc5c1d49d5aec3efa\" id=\"reference-6159f27078c03749ff4e\"\u003eC++でPStade.Oven(pipeline)風味なstringのsplitを作ってみた\u003c/a\u003e\u003cbr\u003e\n作ったC++でPStade.Oven(pipeline)風味なstringのsplitするやつをstd::basic_string_viewに対応させる必要が出てきた。\u003cbr\u003e\n\u003ca href=\"/kazatsuyu\" class=\"user-mention js-hovercard\" title=\"kazatsuyu\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kazatsuyu\"\u003e@kazatsuyu\u003c/a\u003e 氏にコメントで指摘されていた件に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eそれはともかく、せっかく遅延評価でオーバーヘッドを減らしたので、いっそのことlvalue受け取った時はC++17で標準入り予定のstd::basic_string_viewを使ってコピーのオーバーヘッドもなくせるようにしましょうそうしましょう。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e重い腰を上げて動き始めたわけだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結果\u003c/h1\u003e\n\n\u003cp\u003e基本的にこのライブラリは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e文字列 | split(区切り文字or区切りの集合文字列)/*あとこの後ろに色々つけれる*/\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように使うわけで、つまり元となる文字列と区切りの集合文字列双方に\u003ccode\u003estd::basic_string_view\u003c/code\u003eが使えるようになった。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \"../include/string_split.hpp\"\n#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eliterals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring_view\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"arikitari na world!\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003es_1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\u003cspan class=\"c1\"\u003e//\"na\"\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"arikitari na_world!\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\" _\"\u003c/span\u003e\u003cspan class=\"n\"\u003esw\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/*stdout:\n    arikitari \n    na\n    world!\n    */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"対応方法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e対応方法\u003c/h1\u003e\n\n\u003cp\u003eVS2015だとtemplate引数でのSFINAEが若干バグ踏みやすいのでC++14版は戻り値でSFINAEする。このためSTRING_SPLIT_HAS_CXX17_STRING_VIEWマクロを以下のように作って実装を切り替える。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#if defined(_MSC_VER)\n#   if _MSC_VER \u0026gt;= 1910 \u0026amp;\u0026amp; _MSVC_LANG \u0026gt;= 201703\n#       define STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#   endif\n#elif defined(__clang__)\n#   if __clang_major__ \u0026gt;= 4 \u0026amp;\u0026amp; __cplusplus \u0026gt;= 201703\n#       define STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#   endif\n#elif defined(__GNUC__)\n#   if (__GNUC__ \u0026gt; 7 || (__GNUC__ == 7 \u0026amp;\u0026amp; __GNUC_MINOR__ \u0026gt;= 1)) \u0026amp;\u0026amp; __cplusplus \u0026gt;= 201703\n#       define STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#   endif\n#endif\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"c1\"\u003e//区切り文字複数の時\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef STRING_SPLIT_HAS_CXX17_STRING_VIEW\n\u003c/span\u003e    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econtract_str_type_and_delim_type_without_single_char_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003esplit_helper\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003esplit_helper\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econtract_delim_type_without_single_char\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enpos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enpos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_not_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereserve\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evector_emplace_make_substr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evector_emplace_make_substr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにtemplate引数やら引数を書くところを切り替える。\u003c/p\u003e\n\n\u003cp\u003e結果として実装部分よりはるかに長くなってしまったぜ・・・やばい。とくにこいつ\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"c1\"\u003e//区切り文字複数, has chain convert funcの時\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef STRING_SPLIT_HAS_CXX17_STRING_VIEW\n\u003c/span\u003e    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003econjunction_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econtract_str_type_and_delim_type_without_single_char\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enegation\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_void\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einvoke_result_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003esplit_helper_conv_func\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einvoke_result_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003esplit_helper_conv_func\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econjunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econtract_delim_type_without_single_char\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eDelimType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_c_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_stl_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enegation\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_void\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einvoke_result_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einvoke_result_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb_str\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e        \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003einvoke_result_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFuncType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enpos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eStrType\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enpos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_not_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind_first_of\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edelim\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereserve\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eemplace_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efound\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eemplace_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSFINAEする箇所が長すぎる。つらい。\u003c/p\u003e\n\n\u003cp\u003eとにかくそんなやつを書いていた。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"同時に行った他の作業\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%90%8C%E6%99%82%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%9F%E4%BB%96%E3%81%AE%E4%BD%9C%E6%A5%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e同時に行った他の作業\u003c/h1\u003e\n\n\u003cp\u003e最初作ったことはcmakeスキルが低すぎてGNUMakeとvs両対応させるのにそれぞれ設定を書いていたが、cmake力も上がったし、メンテだるいわでcmakeに書き換えた。\u003c/p\u003e\n\n\u003cp\u003ecoverageをcmakeからやらせるのに\u003cbr\u003e\n\u003ca href=\"https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake\u003c/a\u003e\u003cbr\u003e\nからコードを拝借して改造した( \u003ca href=\"https://github.com/yumetodo/string_split/pull/5/commits/8fbe6efcc4446895a2721a9dac6c41fd58d1dcc0\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003e8fbe6ef\u003c/code\u003e\u003c/a\u003e)。\u003cbr\u003e\nもとのコードではgenhtmlをつねに呼び出すようになっていたが、genhtmlはCIでは呼び出しても意味がないというかそういうのはcoveralls.ioにやらしているので、そこを分離した。\u003c/p\u003e\n\n\u003cp\u003ecoveralls.ioに結果を送るのにlcoverallsコマンドを使うわけだが、前はMakefileの中で呼んでいた。これをtravisのscriptの中で直に呼び出すように書き換えた。どうせそこ以外では使わん。\u003c/p\u003e\n\n\u003cp\u003eただこのときTravisのカレントディレクトリがどう変遷するか意味不明でやや苦戦した。\u003cbr\u003e\nというかTravisにかぎらずCIってカレントディレクトリがどこかまじでいっつもわからん。\u003cbr\u003e\n結局どうにか\u003ca href=\"https://github.com/yumetodo/string_split/pull/5/commits/aa8d6a6714f653d0ae29e81db49ccf164f459cf1\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003eaa8d6a6\u003c/code\u003e\u003c/a\u003eで解決した。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/string_split/pull/5\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/string_split/pull/5\u003c/a\u003e\u003cbr\u003e\n70commit(+2,385 −1,850)にわたる大きな変更となった。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$ cat ./include/string_split.hpp | wc -l\n952\n$ cat ./test/*.cpp | wc -l\n1414\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n[C++17のif constexprがあると嬉しかったシーンを具体的に](https://qiita.com/yumetodo/items/c683acfa571dd5f9306a)\nの記事でも言ったとおり、諸事情あって\n前に\n[C++でPStade.Oven(pipeline)風味なstringのsplitを作ってみた](https://qiita.com/yumetodo/items/bf2bc5c1d49d5aec3efa)\n作ったC++でPStade.Oven(pipeline)風味なstringのsplitするやつをstd::basic_string_viewに対応させる必要が出てきた。\n@kazatsuyu 氏にコメントで指摘されていた件に\n\n\u003eそれはともかく、せっかく遅延評価でオーバーヘッドを減らしたので、いっそのことlvalue受け取った時はC++17で標準入り予定のstd::basic_string_viewを使ってコピーのオーバーヘッドもなくせるようにしましょうそうしましょう。\n\n重い腰を上げて動き始めたわけだ。\n\n# 結果\n\n基本的にこのライブラリは\n\n```\n文字列 | split(区切り文字or区切りの集合文字列)/*あとこの後ろに色々つけれる*/\n```\n\nのように使うわけで、つまり元となる文字列と区切りの集合文字列双方に`std::basic_string_view`が使えるようになった。\n\n```cpp\n#include \"../include/string_split.hpp\"\n#include \u003ciostream\u003e\nint main()\n{\n    using namespace std::literals;\n    std::string_view s1 = \"arikitari na world!\";\n    const auto s_1 = s1 | split(' ')[1];//\"na\"\n    std::string s2 = \"arikitari na_world!\";\n    s2 | split(\" _\"sw) \u003e\u003e [](std::string\u0026\u0026 s) {\n        std::cout \u003c\u003c s \u003c\u003c std::endl;\n    };\n    /*stdout:\n    arikitari \n    na\n    world!\n    */\n}\n```\n\n# 対応方法\n\nVS2015だとtemplate引数でのSFINAEが若干バグ踏みやすいのでC++14版は戻り値でSFINAEする。このためSTRING_SPLIT_HAS_CXX17_STRING_VIEWマクロを以下のように作って実装を切り替える。\n\n```cpp\n#if defined(_MSC_VER)\n#\tif _MSC_VER \u003e= 1910 \u0026\u0026 _MSVC_LANG \u003e= 201703\n#\t\tdefine STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#\tendif\n#elif defined(__clang__)\n#\tif __clang_major__ \u003e= 4 \u0026\u0026 __cplusplus \u003e= 201703\n#\t\tdefine STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#\tendif\n#elif defined(__GNUC__)\n#\tif (__GNUC__ \u003e 7 || (__GNUC__ == 7 \u0026\u0026 __GNUC_MINOR__ \u003e= 1)) \u0026\u0026 __cplusplus \u003e= 201703\n#\t\tdefine STRING_SPLIT_HAS_CXX17_STRING_VIEW 1\n#\tendif\n#endif\n```\n\nつまり\n\n```cpp\n\t//区切り文字複数の時\n#ifdef STRING_SPLIT_HAS_CXX17_STRING_VIEW\n\ttemplate\u003c\n\t\ttypename StrType, typename DelimType, bool is_c_str, bool is_stl_string,\n\t\tenable_if_t\u003ctype_traits::contract_str_type_and_delim_type_without_single_char_v\u003cStrType, DelimType, is_c_str, is_stl_string\u003e, std::nullptr_t\u003e = nullptr\n\t\u003e\n\tauto operator| (const StrType\u0026 str, const split_helper\u003cDelimType, false, is_c_str, is_stl_string\u003e\u0026 info) -\u003e vector\u003cStrType\u003e\n\t{\n#else\n\ttemplate\u003ctypename CharType, typename DelimType, bool is_c_str, bool is_stl_string\u003e\n\tauto operator| (const b_str\u003cCharType\u003e\u0026 str, const split_helper\u003cDelimType, false, is_c_str, is_stl_string\u003e\u0026 info)\n\t\t-\u003e enable_if_t\u003c\n\t\t\ttype_traits::contract_delim_type_without_single_char\u003cCharType, DelimType, is_c_str, is_stl_string\u003e::value,\n\t\t\tvector\u003cb_str\u003cCharType\u003e\u003e\n\t\t\u003e\n\t{\n\t\tusing StrType = b_str\u003cCharType\u003e;\n#endif\n\t\tvector\u003cStrType\u003e re;\n\t\tsize_t current = 0;\n\t\tfor (\n\t\t\tsize_t found = str.find_first_of(info.delim, current);\n\t\t\tcurrent != StrType::npos \u0026\u0026 found != StrType::npos;\n\t\t\tcurrent = str.find_first_not_of(info.delim, found + 1), found = str.find_first_of(info.delim, current)\n\t\t) {\n\t\t\tif (re.capacity() \u003c re.size() + 1) re.reserve((std::numeric_limits\u003csize_t\u003e::max() / 2 \u003c re.size()) ? std::numeric_limits\u003csize_t\u003e::max() : re.size() * 2);\n\t\t\tvector_emplace_make_substr(re, str, current, found - current);\n\t\t}\n\t\tvector_emplace_make_substr(re, str, current, str.size() - current);\n\t\treturn re;\n\t}\n```\n\nのようにtemplate引数やら引数を書くところを切り替える。\n\n結果として実装部分よりはるかに長くなってしまったぜ・・・やばい。とくにこいつ\n\n```cpp\n\t//区切り文字複数, has chain convert funcの時\n#ifdef STRING_SPLIT_HAS_CXX17_STRING_VIEW\n\ttemplate\u003c\n\t\ttypename StrType, typename DelimType, typename FuncType,\n\t\tbool is_c_str, bool is_stl_string,\n\t\tenable_if_t\u003cconjunction_v\u003c\n\t\t\ttype_traits::contract_str_type_and_delim_type_without_single_char\u003cStrType, DelimType, is_c_str, is_stl_string\u003e,\n\t\t\ttype_traits::negation\u003cis_void\u003cinvoke_result_t\u003cFuncType, StrType\u003e\u003e\u003e\n\t\t\u003e, std::nullptr_t\u003e = nullptr\n\t\u003e\n\tauto operator| (const StrType\u0026 str, const split_helper_conv_func\u003cDelimType, FuncType, false, is_c_str, is_stl_string\u003e\u0026 info)\n\t\t-\u003e vector\u003cinvoke_result_t\u003cFuncType, StrType\u003e\u003e\n\t{\n#else\n\ttemplate\u003c\n\t\ttypename CharType, typename DelimType, typename FuncType,\n\t\tbool is_c_str, bool is_stl_string\n\t\u003e\n\tauto operator| (const b_str\u003cCharType\u003e\u0026 str, const split_helper_conv_func\u003cDelimType, FuncType, false, is_c_str, is_stl_string\u003e\u0026 info)\n\t\t-\u003e enable_if_t\u003c\n\t\t\ttype_traits::conjunction\u003c\n\t\t\t\ttype_traits::contract_delim_type_without_single_char\u003cCharType, DelimType, is_c_str, is_stl_string\u003e,\n\t\t\t\ttype_traits::negation\u003cis_void\u003cinvoke_result_t\u003cFuncType, b_str\u003cCharType\u003e\u003e\u003e\u003e\n\t\t\t\u003e::value,\n\t\t\tvector\u003cinvoke_result_t\u003cFuncType, b_str\u003cCharType\u003e\u003e\u003e\n\t\t\u003e\n\t{\n\t\tusing StrType = b_str\u003cCharType\u003e;\n#endif\n\t\tvector\u003cinvoke_result_t\u003cFuncType, StrType\u003e\u003e re;\n\t\tsize_t current = 0;\n\t\tfor (\n\t\t\tsize_t found = str.find_first_of(info.delim, current);\n\t\t\tcurrent != StrType::npos \u0026\u0026 found != StrType::npos;\n\t\t\tcurrent = str.find_first_not_of(info.delim, found + 1), found = str.find_first_of(info.delim, current)\n\t\t) {\n\t\t\tif (re.capacity() \u003c re.size() + 1) re.reserve((std::numeric_limits\u003csize_t\u003e::max() / 2 \u003c re.size()) ? std::numeric_limits\u003csize_t\u003e::max() : re.size() * 2);\n\t\t\tre.emplace_back(info.f(str.substr(current, found - current)));\n\t\t}\n\t\tre.emplace_back(info.f(str.substr(current, str.size() - current)));\n\t\treturn re;\n\t}\n```\n\nSFINAEする箇所が長すぎる。つらい。\n\nとにかくそんなやつを書いていた。\n\n# 同時に行った他の作業\n\n最初作ったことはcmakeスキルが低すぎてGNUMakeとvs両対応させるのにそれぞれ設定を書いていたが、cmake力も上がったし、メンテだるいわでcmakeに書き換えた。\n\ncoverageをcmakeからやらせるのに\nhttps://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake\nからコードを拝借して改造した( [`8fbe6ef`](https://github.com/yumetodo/string_split/pull/5/commits/8fbe6efcc4446895a2721a9dac6c41fd58d1dcc0))。\nもとのコードではgenhtmlをつねに呼び出すようになっていたが、genhtmlはCIでは呼び出しても意味がないというかそういうのはcoveralls.ioにやらしているので、そこを分離した。\n\ncoveralls.ioに結果を送るのにlcoverallsコマンドを使うわけだが、前はMakefileの中で呼んでいた。これをtravisのscriptの中で直に呼び出すように書き換えた。どうせそこ以外では使わん。\n\nただこのときTravisのカレントディレクトリがどう変遷するか意味不明でやや苦戦した。\nというかTravisにかぎらずCIってカレントディレクトリがどこかまじでいっつもわからん。\n結局どうにか[`aa8d6a6`](https://github.com/yumetodo/string_split/pull/5/commits/aa8d6a6714f653d0ae29e81db49ccf164f459cf1)で解決した。\n\n# まとめ\n\nhttps://github.com/yumetodo/string_split/pull/5\n70commit(+2,385 −1,850)にわたる大きな変更となった。\n\n```\n$ cat ./include/string_split.hpp | wc -l\n952\n$ cat ./test/*.cpp | wc -l\n1414\n```\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-07-14T20:05:19+09:00","group":null,"id":"9d766fda7882a4548799","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"string","versions":[]},{"name":"C++17","versions":[]}],"title":"前に作ったC++でPStade.Oven(pipeline)風味なstringのsplitするやつをstring_viewに対応させた","updated_at":"2019-04-02T11:47:20+09:00","url":"https://qiita.com/yumetodo/items/9d766fda7882a4548799","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e最近全然記事を書いていないので小ネタでも記事を書こうと思い筆を取るなどした。\u003c/p\u003e\n\n\u003cp\u003eif constexprについては、cpprefjpにて\u003cbr\u003e\n\u003ca href=\"https://cpprefjp.github.io/lang/cpp17/if_constexpr.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eif constexpr 文 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003cbr\u003e\nを書いたが、未だにC++14時代にも対応したライブラリを作っているのでいまいち使う機会に恵まれなかった。\u003c/p\u003e\n\n\u003cp\u003eが、Minecraftというゲームにおいて、鉱石を採掘する際の手法としてチャンク依拠風車型ブランチマイニングというのを\u003ca href=\"https://twitter.com/KizahashiLuca\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@KizahashiLuca\u003c/a\u003e氏が提唱しているのだが\u003cbr\u003e\n\u003ca href=\"https://kizahashiluca.github.io/chunk_dependent_windmill_like_branch_mining_calcurator/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eチャンク依拠風車型ブランチマイニングの計算\u003c/a\u003e\u003cbr\u003e\nこの手法のさらなる研究のためにMinecraftの生成済みワールドのセーブデータであるNBTを読み取ってパースして仮想的に自動採掘する必要ができている。でいりぃ氏という方がJavaでとりあえず作ったのだが(非公開)C++で書いてみたい。\u003cbr\u003e\n\u003ca href=\"https://bitbucket.org/yumetodo/branchminingsimulator/src/master/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eyumetodo / branchminingsimulator — Bitbucket\u003c/a\u003e\u003cbr\u003e\nしかし文字列を操作する必要がある。それも\u003ccode\u003estd::basic_string_view\u003c/code\u003eを使ってメモリーアロケーションを可能な限り排除して。\u003c/p\u003e\n\n\u003cp\u003eというわけで、\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/bf2bc5c1d49d5aec3efa\" id=\"reference-21a66e06e2cdcaa02716\"\u003eC++でPStade.Oven(pipeline)風味なstringのsplitを作ってみた\u003c/a\u003e\u003cbr\u003e\nで紹介した文字列分割ライブラリを\u003ccode\u003estd::basic_string_view\u003c/code\u003eに対応させる必要が出てきた。\u003cbr\u003e\n\u003ca href=\"/kazatsuyu\" class=\"user-mention js-hovercard\" title=\"kazatsuyu\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kazatsuyu\"\u003e@kazatsuyu\u003c/a\u003e 氏にコメントで指摘されていた件に重い腰を上げて動き始めたわけだ。\u003c/p\u003e\n\n\u003cp\u003eマクロで環境を判定して自動で\u003ccode\u003estd::basic_string_view\u003c/code\u003eが使えれば対応するように目下製作中だが\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/string_split/pull/5\" rel=\"nofollow noopener\" target=\"_blank\"\u003eFeat: support string_view by yumetodo · Pull Request #5 · yumetodo/string_split\u003c/a\u003e\u003cbr\u003e\n\u003ccode\u003estd::basic_string_view\u003c/code\u003eが使えるならそういえばif constexprが使える。ということはテストケースが少しだけシンプルに書ける。そんなことがあった。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"状況\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8A%B6%E6%B3%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e状況\u003c/h1\u003e\n\n\u003cp\u003eC++で単体テストを書いていると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e例はiutestをテストフレームワークに使用\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eStringViewSplit\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiutest\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eTest\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eIUTEST_TYPED_TEST_CASE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStringViewSplit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiutest\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eTypes\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar16_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar32_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e型リストを使ったテストを書くこともある。基本的にはこの型リスト全てについてテストが通るように書くのだが、処理系依存な処理を避けるために一時的に一部の型を除外したい時がある。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c14時代の対処法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c14%E6%99%82%E4%BB%A3%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++14時代の対処法\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++14\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003eStringSplitLvalue_SplitByStlStr\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;!\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_same\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_char\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003echar_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitarina_sekai_wspace\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitarina\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esekai\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewspace\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIUTEST_ASSERT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eequal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_same\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCharType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_char\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eIUTEST_TYPED_TEST\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStringSplitLvalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSplitByStlStr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003echar_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTypeParam\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitari_na_world_underscore\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitari\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ena\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eworld\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003espace_underscore\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIUTEST_ASSERT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eequal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eStringSplitLvalue_SplitByStlStr\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewithout_char\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSFINAEで場合分けするヘルパー関数を作ることになる。\u003c/p\u003e\n\n\u003cp\u003eいや、今回の例ならtemplate関数の完全特殊化でもタグディスパッチでもいいけど。\u003c/p\u003e\n\n\u003cp\u003eいずれにせよテストケースの外に書かないといけなくて辛い。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c17時代の対処法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c17%E6%99%82%E4%BB%A3%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++17時代の対処法\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c++\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++17\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eIUTEST_TYPED_TEST\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eStringViewSplit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSplitByStlStr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003echar_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTypeParam\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string_view\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitari_na_world_underscore\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string_view\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitari\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ena\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eworld\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003espace_underscore\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eIUTEST_ASSERT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eequal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere1_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ere1_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_same_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string_view\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitarina_sekai_wspace\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string_view\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitarina\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esekai\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econstant\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ewspace\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003echar_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eIUTEST_ASSERT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eequal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ere2_1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ere2_2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eすっきり。ついでに\u003ccode\u003estd::is_same_v\u003c/code\u003eも使える。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003eそれはそうと文字列リテラルにtemplateパラメータがほしい。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"s\"\u003e\"arikitari na sekai\"\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003echar16_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eみたいなやつ。これがないと予めすべての文字列型について文字列リテラルをどこかに書いておいて参照するみたいな迂遠なことしないといけない。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n最近全然記事を書いていないので小ネタでも記事を書こうと思い筆を取るなどした。\n\nif constexprについては、cpprefjpにて\n[if constexpr 文 - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp17/if_constexpr.html)\nを書いたが、未だにC++14時代にも対応したライブラリを作っているのでいまいち使う機会に恵まれなかった。\n\nが、Minecraftというゲームにおいて、鉱石を採掘する際の手法としてチャンク依拠風車型ブランチマイニングというのを[@KizahashiLuca](https://twitter.com/KizahashiLuca)氏が提唱しているのだが\n[チャンク依拠風車型ブランチマイニングの計算](https://kizahashiluca.github.io/chunk_dependent_windmill_like_branch_mining_calcurator/)\nこの手法のさらなる研究のためにMinecraftの生成済みワールドのセーブデータであるNBTを読み取ってパースして仮想的に自動採掘する必要ができている。でいりぃ氏という方がJavaでとりあえず作ったのだが(非公開)C++で書いてみたい。\n[yumetodo / branchminingsimulator — Bitbucket](https://bitbucket.org/yumetodo/branchminingsimulator/src/master/)\nしかし文字列を操作する必要がある。それも`std::basic_string_view`を使ってメモリーアロケーションを可能な限り排除して。\n\nというわけで、\n[C++でPStade.Oven(pipeline)風味なstringのsplitを作ってみた](https://qiita.com/yumetodo/items/bf2bc5c1d49d5aec3efa)\nで紹介した文字列分割ライブラリを`std::basic_string_view`に対応させる必要が出てきた。\n@kazatsuyu 氏にコメントで指摘されていた件に重い腰を上げて動き始めたわけだ。\n\nマクロで環境を判定して自動で`std::basic_string_view`が使えれば対応するように目下製作中だが\n[Feat: support string_view by yumetodo · Pull Request #5 · yumetodo/string_split](https://github.com/yumetodo/string_split/pull/5)\n`std::basic_string_view`が使えるならそういえばif constexprが使える。ということはテストケースが少しだけシンプルに書ける。そんなことがあった。\n\n# 状況\n\nC++で単体テストを書いていると\n\n```cpp:例はiutestをテストフレームワークに使用\ntemplate\u003ctypename T\u003e\nstruct StringViewSplit : public ::iutest::Test {};\nIUTEST_TYPED_TEST_CASE(StringViewSplit, ::iutest::Types\u003cchar, wchar_t, char16_t, char32_t\u003e);\n```\n\n型リストを使ったテストを書くこともある。基本的にはこの型リスト全てについてテストが通るように書くのだが、処理系依存な処理を避けるために一時的に一部の型を除外したい時がある。\n\n# C++14時代の対処法\n\n```cpp:C++14\nnamespace StringSplitLvalue_SplitByStlStr {\n\ttemplate\u003ctypename CharType, std::enable_if_t\u003c!std::is_same\u003cCharType, char\u003e::value, std::nullptr_t\u003e = nullptr\u003e\n\tvoid without_char()\n\t{\n\t\tusing char_type = CharType;\n\t\tconst std::basic_string\u003cchar_type\u003e s2 = constant::arikitarina_sekai_wspace\u003cchar_type\u003e();\n\t\tconst std::basic_string\u003cchar_type\u003e re2_1[] = { constant::arikitarina\u003cchar_type\u003e(), constant::sekai\u003cchar_type\u003e() };\n\t\tconst auto re2_2 = s2 | split(std::basic_string\u003cchar_type\u003e(constant::wspace\u003cchar_type\u003e()));\n\t\tIUTEST_ASSERT_TRUE(std::equal(std::begin(re2_1), std::end(re2_1), re2_2.begin(), re2_2.end()));\n\t}\n\ttemplate\u003ctypename CharType, std::enable_if_t\u003cstd::is_same\u003cCharType, char\u003e::value, std::nullptr_t\u003e = nullptr\u003e\n\tvoid without_char() {}\n}\nIUTEST_TYPED_TEST(StringSplitLvalue, SplitByStlStr)\n{\n\tusing char_type = TypeParam;\n\tconst std::basic_string\u003cchar_type\u003e s1 = constant::arikitari_na_world_underscore\u003cchar_type\u003e();\n\tconst std::basic_string\u003cchar_type\u003e re1_1[] = { constant::arikitari\u003cchar_type\u003e(), constant::na\u003cchar_type\u003e(), constant::world\u003cchar_type\u003e() };\n\tconst auto re1_2 = s1 | split(std::basic_string\u003cchar_type\u003e(constant::space_underscore\u003cchar_type\u003e()));\n\tIUTEST_ASSERT_TRUE(std::equal(std::begin(re1_1), std::end(re1_1), re1_2.begin(), re1_2.end()));\n\tStringSplitLvalue_SplitByStlStr::without_char\u003cchar_type\u003e();\n}\n```\n\nSFINAEで場合分けするヘルパー関数を作ることになる。\n\nいや、今回の例ならtemplate関数の完全特殊化でもタグディスパッチでもいいけど。\n\nいずれにせよテストケースの外に書かないといけなくて辛い。\n\n# C++17時代の対処法\n\n```c++:C++17\nIUTEST_TYPED_TEST(StringViewSplit, SplitByStlStr)\n{\n\tusing char_type = TypeParam;\n\tconst std::basic_string_view\u003cchar_type\u003e s1 = constant::arikitari_na_world_underscore\u003cchar_type\u003e();\n\tconst std::basic_string_view\u003cchar_type\u003e re1_1[] = { constant::arikitari\u003cchar_type\u003e(), constant::na\u003cchar_type\u003e(), constant::world\u003cchar_type\u003e() };\n\tconst auto re1_2 = s1 | split(std::basic_string\u003cchar_type\u003e(constant::space_underscore\u003cchar_type\u003e()));\n\tIUTEST_ASSERT_TRUE(std::equal(std::begin(re1_1), std::end(re1_1), re1_2.begin(), re1_2.end()));\n\tif constexpr(!std::is_same_v\u003cchar_type, char\u003e) {\n\t\tconst std::basic_string_view\u003cchar_type\u003e s2 = constant::arikitarina_sekai_wspace\u003cchar_type\u003e();\n\t\tconst std::basic_string_view\u003cchar_type\u003e re2_1[] = { constant::arikitarina\u003cchar_type\u003e(), constant::sekai\u003cchar_type\u003e() };\n\t\tconst auto re2_2 = s2 | split(std::basic_string\u003cchar_type\u003e(constant::wspace\u003cchar_type\u003e()));\n\t\tIUTEST_ASSERT_TRUE(std::equal(std::begin(re2_1), std::end(re2_1), re2_2.begin(), re2_2.end()));\n\t}\n}\n```\n\nすっきり。ついでに`std::is_same_v`も使える。\n\n# 余談\n\nそれはそうと文字列リテラルにtemplateパラメータがほしい。\n\n```cpp\n\"arikitari na sekai\"\u003cchar16_t\u003e\n```\n\nみたいなやつ。これがないと予めすべての文字列型について文字列リテラルをどこかに書いておいて参照するみたいな迂遠なことしないといけない。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-07-11T02:17:59+09:00","group":null,"id":"c683acfa571dd5f9306a","likes_count":12,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++17","versions":[]}],"title":"C++17のif constexprがあると嬉しかったシーンを具体的に","updated_at":"2019-04-02T11:49:02+09:00","url":"https://qiita.com/yumetodo/items/c683acfa571dd5f9306a","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eこれまで私はずっとbashを使ってきた。なぜならば多くの環境でデフォルトのシェルだからだ。\u003c/p\u003e\n\n\u003cp\u003e無論zshの存在は知っていたが、面倒そうだったので敬遠していた。\u003c/p\u003e\n\n\u003cp\u003eところがどうもfishという素晴らしいシェルがあるらしい。\u003c/p\u003e\n\n\u003cp\u003e使ってみよう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"先行研究\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%88%E8%A1%8C%E7%A0%94%E7%A9%B6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e先行研究\u003c/h1\u003e\n\n\u003cp\u003eMSYS2でfishを使う - Qiita\u003cbr\u003e\n\u003ca href=\"https://qiita.com/sgur/items/6735815c860589ab4c5a\" class=\"autolink\" id=\"reference-b2b6fedfa48c380f0903\"\u003ehttps://qiita.com/sgur/items/6735815c860589ab4c5a\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという記事があるが、これでは不十分であった。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"導入\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%B0%8E%E5%85%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e導入\u003c/h1\u003e\n\n\u003cp\u003eもちろんmsys2ではpacmanが利用できるので素直に\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003epacman \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e fish\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとするだけでいい。\u003c/p\u003e\n\n\u003cp\u003eためしにfishを使うだけならこのあと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003efish\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとして遊ぶと良い。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e設定\u003c/h1\u003e\n\n\u003cp\u003emsys2では多くの環境変数などの設定が必要だ。ログインシェルとして使う場合、これらを自力で設定する必要がある。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"usretcfishconfigfish\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#usretcfishconfigfish\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e/usr/etc/fish/config.fish\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e/usr/etc/fish/config.fish\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# from /etc/profile\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif \u003c/span\u003estatus \u003cspan class=\"nt\"\u003e--is-login\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eMSYS2_PATH /usr/local/bin /usr/bin /bin\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eMANPATH /usr/local/man /usr/share/fish/man /usr/share/man /usr/man /share/man \u003cspan class=\"nv\"\u003e$MANPATH\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e INFOPATH /usr/local/info /usr/share/info /usr/info /share/info \u003cspan class=\"nv\"\u003e$INFOPATH\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$MSYS2_PATH_TYPE\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n        switch \u003cspan class=\"nv\"\u003e$MSYS2_PATH_TYPE\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e strict\n                \u003cspan class=\"c\"\u003e# Do not inherit any path configuration, and allow for full customization\u003c/span\u003e\n                \u003cspan class=\"c\"\u003e# of external path. This is supposed to be used in special cases such as\u003c/span\u003e\n                \u003cspan class=\"c\"\u003e# debugging without need to change this file, but not daily usage.\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e ORIGINAL_PATH\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e inherit\n                \u003cspan class=\"c\"\u003e# Inherit previous path. Note that this will make all of the Windows path\u003c/span\u003e\n                \u003cspan class=\"c\"\u003e# available in current shell, with possible interference in project builds.\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eORIGINAL_PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'*'\u003c/span\u003e\n                \u003cspan class=\"c\"\u003e# Do not inherit any path configuration but configure a default Windows path\u003c/span\u003e\n                \u003cspan class=\"c\"\u003e# suitable for normal usage with minimal external interference.\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eWIN_ROOT \u003cspan class=\"o\"\u003e(\u003c/span\u003e/usr/bin/env \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e cygpath \u003cspan class=\"nt\"\u003e-Wu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eORIGINAL_PATH \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32 \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32/Wbem \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32/WindowsPowerShell/v1.0\n        end\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# Do not inherit any path configuration but configure a default Windows path\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e# suitable for normal usage with minimal external interference.\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset \u003c/span\u003eWIN_ROOT \u003cspan class=\"o\"\u003e(\u003c/span\u003e/usr/bin/env \u003cspan class=\"nv\"\u003ePATH\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e cygpath \u003cspan class=\"nt\"\u003e-Wu\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset \u003c/span\u003eORIGINAL_PATH \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32 \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32/Wbem \u003cspan class=\"nv\"\u003e$WIN_ROOT\u003c/span\u003e/System32/WindowsPowerShell/v1.0\n    end\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"nv\"\u003e$MSYSTEM\u003c/span\u003e\n        switch \u003cspan class=\"nv\"\u003e$MSYSTEM\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e MINGW32\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eMINGW_MOUNT_POINT /mingw32\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/bin \u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ORIGINAL_PATH\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PKG_CONFIG_PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/lib/pkgconfig \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/pkgconfig\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eACLOCAL_PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/aclocal /usr/share/aclocal\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MANPATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/man \u003cspan class=\"nv\"\u003e$MANPATH\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e MINGW64\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eMINGW_MOUNT_POINT /mingw64\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/bin \u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ORIGINAL_PATH\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PKG_CONFIG_PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/lib/pkgconfig \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/pkgconfig\n                \u003cspan class=\"nb\"\u003eset \u003c/span\u003eACLOCAL_PATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/aclocal /usr/share/aclocal\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MANPATH \u003cspan class=\"nv\"\u003e$MINGW_MOUNT_POINT\u003c/span\u003e/share/man \u003cspan class=\"nv\"\u003e$MANPATH\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e MSYS\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e /opt/bin:\u003cspan class=\"nv\"\u003e$ORIGINAL_PATH\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PKG_CONFIG_PATH /usr/lib/pkgconfig /usr/share/pkgconfig /lib/pkgconfig\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MANPATH \u003cspan class=\"nv\"\u003e$MANPATH\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'*'\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$MSYS2_PATH\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ORIGINAL_PATH\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MANPATH \u003cspan class=\"nv\"\u003e$MANPATH\u003c/span\u003e\n        end\n    end\n\n    \u003cspan class=\"c\"\u003e# from /etc/msystem\u003c/span\u003e\n    switch \u003cspan class=\"nv\"\u003e$MSYSTEM\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e MINGW32\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_PREFIX /mingw32\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CARCH i686\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CHOST i686-w64-mingw32\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_CHOST \u003cspan class=\"nv\"\u003e$MSYSTEM_CHOST\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_PREFIX \u003cspan class=\"nv\"\u003e$MSYSTEM_PREFIX\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_PACKAGE_PREFIX mingw-w64-\u003cspan class=\"nv\"\u003e$MSYSTEM_CARCH\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e CONFIG_SITE \u003cspan class=\"nv\"\u003e$MSYSTEM_PREFIX\u003c/span\u003e/etc/config.site\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e MINGW64\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_PREFIX /mingw64\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CARCH x86_64\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CHOST x86_64-w64-mingw32\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_CHOST \u003cspan class=\"nv\"\u003e$MSYSTEM_CHOST\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_PREFIX \u003cspan class=\"nv\"\u003e$MSYSTEM_PREFIX\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MINGW_PACKAGE_PREFIX mingw-w64-\u003cspan class=\"nv\"\u003e$MSYSTEM_CARCH\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e CONFIG_SITE \u003cspan class=\"nv\"\u003e$MSYSTEM_PREFIX\u003c/span\u003e/etc/config.site\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"s1\"\u003e'*'\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_PREFIX /usr\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CARCH \u003cspan class=\"nv\"\u003e$HOSTTYPE\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e MSYSTEM_CHOST \u003cspan class=\"nv\"\u003e$MACHTYPE\u003c/span\u003e\n            \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e CONFIG_SITE /etc/config.site\n    end\n\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e SYSCONFDIR /etc\n\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eORIGINAL_TMP \u003cspan class=\"nv\"\u003e$TMP\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eORIGINAL_TEMP \u003cspan class=\"nv\"\u003e$TEMP\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e TMP\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e TEMP\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e tmp \u003cspan class=\"o\"\u003e(\u003c/span\u003ecygpath \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ORIGINAL_TMP\u003c/span\u003e 2\u0026gt; /dev/null\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e temp \u003cspan class=\"o\"\u003e(\u003c/span\u003ecygpath \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ORIGINAL_TEMP\u003c/span\u003e 2\u0026gt; /dev/null\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e TMP /tmp\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e TEMP /tmp\n\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003ep \u003cspan class=\"s2\"\u003e\"/proc/registry/HKEY_CURRENT_USER/Software/Microsoft/Windows NT/CurrentVersion/Windows/Device\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nv\"\u003e$p\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eread \u003c/span\u003ePRINTER \u0026lt; \u003cspan class=\"nv\"\u003e$p\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PRINTER \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$PRINTER\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/,.*$//g'\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    end\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e p\n\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ACLOCAL_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e ACLOCAL_PATH \u003cspan class=\"nv\"\u003e$ACLOCAL_PATH\u003c/span\u003e\n    end\n\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_COLLATE C\n    \u003cspan class=\"k\"\u003efor \u003c/span\u003epostinst \u003cspan class=\"k\"\u003ein\u003c/span\u003e /etc/post-install/\u003cspan class=\"k\"\u003e*\u003c/span\u003e.post\n        \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"nv\"\u003e$postinst\u003c/span\u003e\n            sh \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"nv\"\u003e$postinst\u003c/span\u003e\n        end\n    end\n\n    \u003cspan class=\"c\"\u003e# from /etc/profile.d/lang.sh\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LC_ALL\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e or \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LANG\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e or \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_CTYPE \u003cspan class=\"o\"\u003e(\u003c/span\u003e/usr/bin/locale \u003cspan class=\"nt\"\u003e-uU\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_NUMERIC \u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_TIME \u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_COLLATE \u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_MONETARY \u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e LC_MESSAGES \u003cspan class=\"nv\"\u003e$LC_CTYPE\u003c/span\u003e\n    end\n\n    \u003cspan class=\"c\"\u003e# from /etc/profile.d/perlbin.sh\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e /usr/bin/site_perl\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e /usr/bin/site_perl\n    end\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e /usr/lib/perl5/site_perl/bin\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e /usr/lib/perl5/site_perl/bin\n    end\n\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e /usr/bin/vendor_perl\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e /usr/bin/vendor_perl\n    end\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e /usr/lib/perl5/vendor_perl/bin\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e /usr/lib/perl5/vendor_perl/bin\n    end\n\n    \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e /usr/bin/core_perl\n        \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gx\u003c/span\u003e PATH \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e /usr/bin/core_perl\n    end\nend\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこのような設定ファイルを書けばいい。先行研究で上げた記事のものだと、\u003ccode\u003e$MSYS2_PATH_TYPE\u003c/code\u003eやlocale、\u003ccode\u003e/etc/msystem\u003c/code\u003e相当の内容、perl絡みの設定が抜け落ちている。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"configfishfunctionsfish_promptfish\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#configfishfunctionsfish_promptfish\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e~/.config/fish/functions/fish_prompt.fish\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e下で紹介しているように、\u003ccode\u003eomf/theme-agnoster\u003c/code\u003eを導入すると\u003ccode\u003e~/.config/fish/functions/fish_prompt.fish\u003c/code\u003eが生成されている。\u003c/p\u003e\n\n\u003cp\u003eこの下の方に書かれている\u003ccode\u003efunction fish_prompt\u003c/code\u003eの中に\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"diff\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gd\"\u003e--- /home/yumetodo/.config/fish/functions/fish_prompt.fish-old    2018-06-22 11:20:35.783796900 +0900\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ /home/yumetodo/.config/fish/functions/fish_prompt.fish      2018-06-21 20:10:49.662732400 +0900\n\u003c/span\u003e\n@@ -219,13 +219,14 @@\n # ===========================\n\n function fish_prompt\n   set -g RETVAL $status\n   prompt_status\n   prompt_virtual_env\n   prompt_user\n\u003cspan class=\"gi\"\u003e+  prompt_segment black magenta $MSYSTEM\n\u003c/span\u003e   prompt_dir\n   type -q hg;  and prompt_hg\n   type -q git; and prompt_git\n   type -q svn; and prompt_svn\n   prompt_finish\n end\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように書き足すと\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F258c0ee1-8d1e-d315-ab55-af598a59d034.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=707f00c6c316cf0fee2d5e4affd1ad2a\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F258c0ee1-8d1e-d315-ab55-af598a59d034.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=707f00c6c316cf0fee2d5e4affd1ad2a\" alt=\"キャプチャ.PNG\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/258c0ee1-8d1e-d315-ab55-af598a59d034.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F258c0ee1-8d1e-d315-ab55-af598a59d034.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=d2072152018d18acd42ef6a4508e6732 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eのように\u003ccode\u003eMINGW64\u003c/code\u003eとかを表示させられる。\u003c/p\u003e\n\n\u003cp\u003eなお私はConEmu使いなので\u003ccode\u003ex-term256\u003c/code\u003eとかが使えないため、\u003ccode\u003eprompt_segment\u003c/code\u003eにhexを渡すことはできない。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"configfishconfigfish\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#configfishconfigfish\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e~/.config/fish/config.fish\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003e適宜aliasを貼ったりするとよい。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e~/.config/fish/config.fish\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003egnuplot\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"gnuplot -p\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003eag\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'ag -S --stats --pager \"less -F\"'\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003eagh\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'ag --hidden'\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003esubl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"'/c/Program Files/Sublime Text 3/sublime_text.exe'\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003effmpeg\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"C:/program1/aviutl100/exe_files/ffmpeg.exe\"\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e theme_display_user no\n\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-g\u003c/span\u003e theme_hide_hostname \u003cspan class=\"nb\"\u003eyes\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003etheme_display_user\u003c/code\u003eと\u003ccode\u003etheme_hide_hostname\u003c/code\u003eをいじることで\u003ccode\u003euuu@hhh\u003c/code\u003eみたいな表記を表示させるか決められる。上のはデフォルト設定と同じだ。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"configfishfunctionscodefish\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#configfishfunctionscodefish\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003e~/.config/fish/functions/code.fish\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003ealiasを\u003ccode\u003e~/.config/fish/config.fish\u003c/code\u003eに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ealias \u003c/span\u003e\u003cspan class=\"nv\"\u003ecode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"'C:/Program Files/Microsoft VS Code/bin/code'\"\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように貼っても\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e/usr/bin/env: `bash': No such file or directory\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとか言われて起動しない。そこでカスタム関数を追加する。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e~/.config/fish/functions/code.fish\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efunction \u003c/span\u003ecode \u003cspan class=\"nt\"\u003e--description\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"start Visual Studio Code\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eNAME \u003cspan class=\"s2\"\u003e\"Code\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eVSCODE_PATH \u003cspan class=\"s2\"\u003e\"/c/Program Files/Microsoft VS Code\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eELECTRON \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$VSCODE_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$NAME\u003c/span\u003e\u003cspan class=\"s2\"\u003e.exe\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset \u003c/span\u003eCLI \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$VSCODE_PATH\u003c/span\u003e\u003cspan class=\"s2\"\u003e/resources/app/out/cli.js\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eenv \u003c/span\u003e\u003cspan class=\"nv\"\u003eELECTRON_RUN_AS_NODE\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ELECTRON\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$CLI\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"nv\"\u003e$argv\u003c/span\u003e\nend\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eVSCODE_PATH\u003c/code\u003eは\u003ccode\u003ecode.exe\u003c/code\u003eのあるパスだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"conemuの設定\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#conemu%E3%81%AE%E8%A8%AD%E5%AE%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eConEmuの設定\u003c/h1\u003e\n\n\u003cp\u003e私はcmderからConEmuを使っているのでこいつからfishを呼べるようにする。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eStartUp\u003c/code\u003e\u0026gt;\u003ccode\u003eTasks\u003c/code\u003eに\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fad65cff2-c5a5-d7fc-7e3a-1dbbee7d400f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e8ba500d1c30decf10ecf2b2622de454\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fad65cff2-c5a5-d7fc-7e3a-1dbbee7d400f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e8ba500d1c30decf10ecf2b2622de454\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/ad65cff2-c5a5-d7fc-7e3a-1dbbee7d400f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fad65cff2-c5a5-d7fc-7e3a-1dbbee7d400f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4fbed9628dd7ac3a8d32d1ac60134987 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e-new_console:d:C:\\msys64\\home\\%USERNAME% set CHERE_INVOKING=1 \u0026amp; set MSYSTEM=MINGW64 \u0026amp; set XDG_RUNTIME_DIR=/tmp/fish.%USERNAME% \u0026amp; %ConEmuDrive%\\msys64\\usr\\bin\\fish.exe --login -i -new_console:C:\"%ConEmuDrive%\\msys64\\msys2.ico\"\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eを書けば良い。\u003ccode\u003eXDG_RUNTIME_DIR\u003c/code\u003eは多分必要なはず。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"pluginで遊ぶ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#plugin%E3%81%A7%E9%81%8A%E3%81%B6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ePluginで遊ぶ\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ecurl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher\nfisher install 0rax/fish-bd omf/theme-agnoster edc/bass z\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなどとするとテーマが手に入ったり便利な機能が追加されるのでよい。\u003c/p\u003e\n\n\u003cp\u003efisher コマンドについては\u003cbr\u003e\n\u003ca href=\"https://github.com/fisherman/fisherman\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/fisherman/fisherman\u003c/a\u003e\u003cbr\u003e\nが公式repoで、検索すればいろいろな情報が手にはいる。\u003c/p\u003e\n\n\u003cp\u003eなおテーマを入れるに際し、フォントをいじってみたいな話が書かれているが、\u003cstrong\u003e私は心の目でフォント合成することにした\u003c/strong\u003eのでその設定は行わない。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"fishのマニュアル\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#fish%E3%81%AE%E3%83%9E%E3%83%8B%E3%83%A5%E3%82%A2%E3%83%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003efishのマニュアル\u003c/h1\u003e\n\n\u003cp\u003e下手にググる前に\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://fishshell.com/docs/current/tutorial.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://fishshell.com/docs/current/tutorial.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを読むべし。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"manが使えない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#man%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003emanが使えない\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eman: can't execute iconv: No such file or directory\nman: can't execute less: No such file or directory\nman: コマンドはステータス 255 で終了しました: /usr/lib/man-db/zsoelim | /usr/lib/man-db/manconv -f UTF-8:ISO-8859-1 -t ISO-8859-1//IGNORE | tbl | nroff -mandoc -rLL=264n -rLT=264n -Tascii8\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなどと言われる。わけがわからない。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"その他\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその他\u003c/h2\u003e\n\n\u003cp\u003epacmanやらなんかビルドするときやらになんか微妙に足りてなかったりしてうまくいかないので、利用を諦めbashに戻るなどした。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\nこれまで私はずっとbashを使ってきた。なぜならば多くの環境でデフォルトのシェルだからだ。\n\n無論zshの存在は知っていたが、面倒そうだったので敬遠していた。\n\nところがどうもfishという素晴らしいシェルがあるらしい。\n\n使ってみよう。\n\n# 先行研究\n\nMSYS2でfishを使う - Qiita\nhttps://qiita.com/sgur/items/6735815c860589ab4c5a\n\nという記事があるが、これでは不十分であった。\n\n# 導入\n\nもちろんmsys2ではpacmanが利用できるので素直に\n\n```bash\n$ pacman -S fish\n```\n\nとするだけでいい。\n\nためしにfishを使うだけならこのあと\n\n```bash\n$ fish\n```\n\nとして遊ぶと良い。\n# 設定\n\nmsys2では多くの環境変数などの設定が必要だ。ログインシェルとして使う場合、これらを自力で設定する必要がある。\n\n## `/usr/etc/fish/config.fish`\n\n```zsh:/usr/etc/fish/config.fish\n# from /etc/profile\nif status --is-login\n\tset MSYS2_PATH /usr/local/bin /usr/bin /bin\n\tset MANPATH /usr/local/man /usr/share/fish/man /usr/share/man /usr/man /share/man $MANPATH\n\tset -gx INFOPATH /usr/local/info /usr/share/info /usr/info /share/info $INFOPATH\n\n\tif test -n \"$MSYS2_PATH_TYPE\"\n\t\tswitch $MSYS2_PATH_TYPE\n\t\t\tcase strict\n\t\t\t\t# Do not inherit any path configuration, and allow for full customization\n\t\t\t\t# of external path. This is supposed to be used in special cases such as\n\t\t\t\t# debugging without need to change this file, but not daily usage.\n\t\t\t\tset -e ORIGINAL_PATH\n\t\t\tcase inherit\n\t\t\t\t# Inherit previous path. Note that this will make all of the Windows path\n\t\t\t\t# available in current shell, with possible interference in project builds.\n\t\t\t\tset ORIGINAL_PATH $PATH\n\t\t\tcase '*'\n\t\t\t\t# Do not inherit any path configuration but configure a default Windows path\n\t\t\t\t# suitable for normal usage with minimal external interference.\n\t\t\t\tset WIN_ROOT (/usr/bin/env PATH=$MSYS2_PATH cygpath -Wu)\n\t\t\t\tset ORIGINAL_PATH $WIN_ROOT/System32 $WIN_ROOT $WIN_ROOT/System32/Wbem $WIN_ROOT/System32/WindowsPowerShell/v1.0\n\t\tend\n\telse\n\t\t# Do not inherit any path configuration but configure a default Windows path\n\t\t# suitable for normal usage with minimal external interference.\n\t\tset WIN_ROOT (/usr/bin/env PATH=$MSYS2_PATH cygpath -Wu)\n\t\tset ORIGINAL_PATH $WIN_ROOT/System32 $WIN_ROOT $WIN_ROOT/System32/Wbem $WIN_ROOT/System32/WindowsPowerShell/v1.0\n\tend\n\tif test -n $MSYSTEM\n\t\tswitch $MSYSTEM\n\t\t\tcase MINGW32\n\t\t\t\tset MINGW_MOUNT_POINT /mingw32\n\t\t\t\tset -gx PATH $MINGW_MOUNT_POINT/bin $MSYS2_PATH $ORIGINAL_PATH\n\t\t\t\tset -gx PKG_CONFIG_PATH $MINGW_MOUNT_POINT/lib/pkgconfig $MINGW_MOUNT_POINT/share/pkgconfig\n\t\t\t\tset ACLOCAL_PATH $MINGW_MOUNT_POINT/share/aclocal /usr/share/aclocal\n\t\t\t\tset -gx MANPATH $MINGW_MOUNT_POINT/share/man $MANPATH\n\t\t\tcase MINGW64\n\t\t\t\tset MINGW_MOUNT_POINT /mingw64\n\t\t\t\tset -gx PATH $MINGW_MOUNT_POINT/bin $MSYS2_PATH $ORIGINAL_PATH\n\t\t\t\tset -gx PKG_CONFIG_PATH $MINGW_MOUNT_POINT/lib/pkgconfig $MINGW_MOUNT_POINT/share/pkgconfig\n\t\t\t\tset ACLOCAL_PATH $MINGW_MOUNT_POINT/share/aclocal /usr/share/aclocal\n\t\t\t\tset -gx MANPATH $MINGW_MOUNT_POINT/share/man $MANPATH\n\t\t\tcase MSYS\n\t\t\t\tset -gx PATH $MSYS2_PATH /opt/bin:$ORIGINAL_PATH\n\t\t\t\tset -gx PKG_CONFIG_PATH /usr/lib/pkgconfig /usr/share/pkgconfig /lib/pkgconfig\n\t\t\t\tset -gx MANPATH $MANPATH\n\t\t\tcase '*'\n\t\t\t\tset -gx PATH $MSYS2_PATH $ORIGINAL_PATH\n\t\t\t\tset -gx MANPATH $MANPATH\n\t\tend\n\tend\n\n\t# from /etc/msystem\n\tswitch $MSYSTEM\n\t\tcase MINGW32\n\t\t\tset -gx MSYSTEM_PREFIX /mingw32\n\t\t\tset -gx MSYSTEM_CARCH i686\n\t\t\tset -gx MSYSTEM_CHOST i686-w64-mingw32\n\t\t\tset -gx MINGW_CHOST $MSYSTEM_CHOST\n\t\t\tset -gx MINGW_PREFIX $MSYSTEM_PREFIX\n\t\t\tset -gx MINGW_PACKAGE_PREFIX mingw-w64-$MSYSTEM_CARCH\n\t\t\tset -gx CONFIG_SITE $MSYSTEM_PREFIX/etc/config.site\n\t\tcase MINGW64\n\t\t\tset -gx MSYSTEM_PREFIX /mingw64\n\t\t\tset -gx MSYSTEM_CARCH x86_64\n\t\t\tset -gx MSYSTEM_CHOST x86_64-w64-mingw32\n\t\t\tset -gx MINGW_CHOST $MSYSTEM_CHOST\n\t\t\tset -gx MINGW_PREFIX $MSYSTEM_PREFIX\n\t\t\tset -gx MINGW_PACKAGE_PREFIX mingw-w64-$MSYSTEM_CARCH\n\t\t\tset -gx CONFIG_SITE $MSYSTEM_PREFIX/etc/config.site\n\t\tcase '*'\n\t\t\tset -gx MSYSTEM_PREFIX /usr\n\t\t\tset -gx MSYSTEM_CARCH $HOSTTYPE\n\t\t\tset -gx MSYSTEM_CHOST $MACHTYPE\n\t\t\tset -gx CONFIG_SITE /etc/config.site\n\tend\n\n\tset -gx SYSCONFDIR /etc\n\n\tset ORIGINAL_TMP $TMP\n\tset ORIGINAL_TEMP $TEMP\n\tset -e TMP\n\tset -e TEMP\n\tset -gx tmp (cygpath -w $ORIGINAL_TMP 2\u003e /dev/null)\n\tset -gx temp (cygpath -w $ORIGINAL_TEMP 2\u003e /dev/null)\n\tset -gx TMP /tmp\n\tset -gx TEMP /tmp\n\n\tset p \"/proc/registry/HKEY_CURRENT_USER/Software/Microsoft/Windows NT/CurrentVersion/Windows/Device\"\n\tif test -e $p\n\t\tread PRINTER \u003c $p\n\t\tset -gx PRINTER (echo $PRINTER | sed -e 's/,.*$//g')\n\tend\n\tset -e p\n\n\tif test -n \"$ACLOCAL_PATH\"\n\t\tset -gx ACLOCAL_PATH $ACLOCAL_PATH\n\tend\n\n\tset -gx LC_COLLATE C\n\tfor postinst in /etc/post-install/*.post\n\t\tif test -e $postinst\n\t\t\tsh -c $postinst\n\t\tend\n\tend\n\n\t# from /etc/profile.d/lang.sh\n\tif test -n \"$LC_ALL\"; or test -n \"$LANG\"; or test -n \"$LC_CTYPE\"\n\t\tset -gx LC_CTYPE (/usr/bin/locale -uU)\n\t\tset -gx LC_NUMERIC $LC_CTYPE\n\t\tset -gx LC_TIME $LC_CTYPE\n\t\tset -gx LC_COLLATE $LC_CTYPE\n\t\tset -gx LC_MONETARY $LC_CTYPE\n\t\tset -gx LC_MESSAGES $LC_CTYPE\n\tend\n\n\t# from /etc/profile.d/perlbin.sh\n\tif test -d /usr/bin/site_perl\n\t\tset -gx PATH $PATH /usr/bin/site_perl\n\tend\n\tif test -d /usr/lib/perl5/site_perl/bin\n\t\tset -gx PATH $PATH /usr/lib/perl5/site_perl/bin\n\tend\n\n\tif test -d /usr/bin/vendor_perl\n\t\tset -gx PATH $PATH /usr/bin/vendor_perl\n\tend\n\tif test -d /usr/lib/perl5/vendor_perl/bin\n\t\tset -gx PATH $PATH /usr/lib/perl5/vendor_perl/bin\n\tend\n\n\tif test -d /usr/bin/core_perl\n\t\tset -gx PATH $PATH /usr/bin/core_perl\n\tend\nend\n```\n\nこのような設定ファイルを書けばいい。先行研究で上げた記事のものだと、`$MSYS2_PATH_TYPE`やlocale、`/etc/msystem`相当の内容、perl絡みの設定が抜け落ちている。\n\n## `~/.config/fish/functions/fish_prompt.fish`\n\n下で紹介しているように、`omf/theme-agnoster`を導入すると`~/.config/fish/functions/fish_prompt.fish`が生成されている。\n\nこの下の方に書かれている`function fish_prompt`の中に\n\n```diff\n--- /home/yumetodo/.config/fish/functions/fish_prompt.fish-old    2018-06-22 11:20:35.783796900 +0900\n+++ /home/yumetodo/.config/fish/functions/fish_prompt.fish      2018-06-21 20:10:49.662732400 +0900\n\n@@ -219,13 +219,14 @@\n # ===========================\n\n function fish_prompt\n   set -g RETVAL $status\n   prompt_status\n   prompt_virtual_env\n   prompt_user\n+  prompt_segment black magenta $MSYSTEM\n   prompt_dir\n   type -q hg;  and prompt_hg\n   type -q git; and prompt_git\n   type -q svn; and prompt_svn\n   prompt_finish\n end\n```\n\nのように書き足すと\n\n![キャプチャ.PNG](https://qiita-image-store.s3.amazonaws.com/0/94177/258c0ee1-8d1e-d315-ab55-af598a59d034.png)\n\nのように`MINGW64`とかを表示させられる。\n\nなお私はConEmu使いなので`x-term256`とかが使えないため、`prompt_segment`にhexを渡すことはできない。\n\n## `~/.config/fish/config.fish`\n\n適宜aliasを貼ったりするとよい。\n\n```zsh:~/.config/fish/config.fish\nalias gnuplot=\"gnuplot -p\"\nalias ag='ag -S --stats --pager \"less -F\"'\nalias agh='ag --hidden'\nalias subl=\"'/c/Program Files/Sublime Text 3/sublime_text.exe'\"\nalias ffmpeg=\"C:/program1/aviutl100/exe_files/ffmpeg.exe\"\n\nset -g theme_display_user no\nset -g theme_hide_hostname yes\n```\n\n`theme_display_user`と`theme_hide_hostname`をいじることで`uuu@hhh`みたいな表記を表示させるか決められる。上のはデフォルト設定と同じだ。\n\n## `~/.config/fish/functions/code.fish`\n\naliasを`~/.config/fish/config.fish`に\n\n```zsh\nalias code=\"'C:/Program Files/Microsoft VS Code/bin/code'\"\n```\n\nのように貼っても\n\n```\n/usr/bin/env: `bash': No such file or directory\n```\n\nとか言われて起動しない。そこでカスタム関数を追加する。\n\n```zsh:~/.config/fish/functions/code.fish\nfunction code --description \"start Visual Studio Code\"\n    set NAME \"Code\"\n    set VSCODE_PATH \"/c/Program Files/Microsoft VS Code\"\n    set ELECTRON \"$VSCODE_PATH/$NAME.exe\"\n    set CLI \"$VSCODE_PATH/resources/app/out/cli.js\"\n    env ELECTRON_RUN_AS_NODE=1 \"$ELECTRON\" \"$CLI\" $argv\nend\n```\n`VSCODE_PATH`は`code.exe`のあるパスだ。\n\n\n# ConEmuの設定\n\n私はcmderからConEmuを使っているのでこいつからfishを呼べるようにする。\n\n`StartUp`\u003e`Tasks`に\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/ad65cff2-c5a5-d7fc-7e3a-1dbbee7d400f.png)\n\n```\n-new_console:d:C:\\msys64\\home\\%USERNAME% set CHERE_INVOKING=1 \u0026 set MSYSTEM=MINGW64 \u0026 set XDG_RUNTIME_DIR=/tmp/fish.%USERNAME% \u0026 %ConEmuDrive%\\msys64\\usr\\bin\\fish.exe --login -i -new_console:C:\"%ConEmuDrive%\\msys64\\msys2.ico\"\n```\n\nを書けば良い。`XDG_RUNTIME_DIR`は多分必要なはず。\n\n# Pluginで遊ぶ\n\n```\ncurl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher\nfisher install 0rax/fish-bd omf/theme-agnoster edc/bass z\n```\n\nなどとするとテーマが手に入ったり便利な機能が追加されるのでよい。\n\nfisher コマンドについては\nhttps://github.com/fisherman/fisherman\nが公式repoで、検索すればいろいろな情報が手にはいる。\n\nなおテーマを入れるに際し、フォントをいじってみたいな話が書かれているが、**私は心の目でフォント合成することにした**のでその設定は行わない。\n\n# fishのマニュアル\n\n下手にググる前に\n\nhttps://fishshell.com/docs/current/tutorial.html\n\nを読むべし。\n\n# 問題\n\n## manが使えない\n\n```\nman: can't execute iconv: No such file or directory\nman: can't execute less: No such file or directory\nman: コマンドはステータス 255 で終了しました: /usr/lib/man-db/zsoelim | /usr/lib/man-db/manconv -f UTF-8:ISO-8859-1 -t ISO-8859-1//IGNORE | tbl | nroff -mandoc -rLL=264n -rLT=264n -Tascii8\n```\n\nなどと言われる。わけがわからない。\n\n## その他\n\npacmanやらなんかビルドするときやらになんか微妙に足りてなかったりしてうまくいかないので、利用を諦めbashに戻るなどした。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-06-22T11:32:52+09:00","group":null,"id":"2aed71ca2f3850b49b21","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"fish","versions":[]},{"name":"msys2","versions":[]}],"title":"もうちょっと真面目にMSYS2でfishを使う","updated_at":"2019-04-02T11:50:34+09:00","url":"https://qiita.com/yumetodo/items/2aed71ca2f3850b49b21","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"claspとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#clasp%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eclaspとは\u003c/h1\u003e\n\n\u003cp\u003eこれまでGoogle Spread Sheetに紐付いたGoogle Apps Scriptの更新はオンラインエディタ以外の方法で更新することができなかった。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/google/clasp\" rel=\"nofollow noopener\" target=\"_blank\"\u003egoogle/clasp\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eはそれを解決するツールだ。2018年1月だから比較的最近だ(執筆時2018年4月)\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5\" id=\"reference-aadaea02a69daffe389f\"\u003eGoogle Apps Script をローカル環境で快適に開発するためのテンプレートを作りました\u003c/a\u003e\u003cbr\u003e\nなんていう記事も出ている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"google-apps-scriptの制約\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#google-apps-script%E3%81%AE%E5%88%B6%E7%B4%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGoogle Apps Scriptの制約\u003c/h1\u003e\n\n\u003cp\u003eまあ上げだせばきりがないが、最大の制約は、呼び出し可能な関数が\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(){}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように\u003ccode\u003efunction\u003c/code\u003eキーワードを用いてglobalスコープで定義された関数しか呼び出せない。\u003c/p\u003e\n\n\u003cp\u003e当然Google Spread Sheetに紐付いたGoogle Apps Scriptでも同じで、そうでないとGoogle Spread Sheetから呼び出せない。\u003c/p\u003e\n\n\u003cp\u003e上の記事のテンプレートでは\u003ca href=\"https://github.com/fossamagna/gas-webpack-plugin\" rel=\"nofollow noopener\" target=\"_blank\"\u003egas-webpack-plugin\u003c/a\u003eを用いてこれを回避している。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003egas-webpack-plugin\u003c/code\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(){}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように、\u003ccode\u003efunction\u003c/code\u003eキーワードを用いて空っぽの関数を定義し、あとで\u003ccode\u003eglobal\u003c/code\u003e変数経由で実装を挿入するということをやってくれる。\u003c/p\u003e\n\n\u003cp\u003eさあ、\u003ccode\u003eclasp push\u003c/code\u003eすればGoogle Spread Sheetからこの関数を呼び出せるはずだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"google-spread-sheetから呼び出せない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#google-spread-sheet%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%9B%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGoogle Spread Sheetから呼び出せない\u003c/h1\u003e\n\n\u003cp\u003eところがそうは問屋がおろさない。\u003c/p\u003e\n\n\u003cp\u003eどうも関数名をGoogle Spread Sheet側でキャッシュしているらしく、\u003ccode\u003eclasp push\u003c/code\u003eしてもこのキャッシュが更新されない。\u003cstrong\u003e反映するにはオンラインエディタを開いてどうでもいい編集をして一度保存する必要がある\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fwww.plantuml.com%2Fplantuml%2Fpng%2FSoWkIImgAStDuKhEIImkqBLppyzFpqbrB2We3aukoYmeiL8eA2tEu8881nSKfIQc16UaffResc48EISMPwHQARoSjkZPr0rFryvuEcV5yqMxNgpgvSAkL1VJ3A1rp-SlVTpK-RXfykEc3Yuqr-2nzN7ZoiUDROyRbpzkQdhHkVvnOylpxIjUpWQAh0OQzBXnyUF6PL2NJUXztDZpic4Mq2PYB02PlGfaJ6FtuyRf8BSrhdisUykpQHk0nZnkR0ARFVznu-J7ZIiUDqs264p700CveQaRw4bCNPZH2RTjufx7ZPkVjky2UWaZ4714pDO9p-RDUR5_ojFUBLmEgNafm5G30000?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3cc7e78587da57bac4a1a27af2d13e17\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fwww.plantuml.com%2Fplantuml%2Fpng%2FSoWkIImgAStDuKhEIImkqBLppyzFpqbrB2We3aukoYmeiL8eA2tEu8881nSKfIQc16UaffResc48EISMPwHQARoSjkZPr0rFryvuEcV5yqMxNgpgvSAkL1VJ3A1rp-SlVTpK-RXfykEc3Yuqr-2nzN7ZoiUDROyRbpzkQdhHkVvnOylpxIjUpWQAh0OQzBXnyUF6PL2NJUXztDZpic4Mq2PYB02PlGfaJ6FtuyRf8BSrhdisUykpQHk0nZnkR0ARFVznu-J7ZIiUDqs264p700CveQaRw4bCNPZH2RTjufx7ZPkVjky2UWaZ4714pDO9p-RDUR5_ojFUBLmEgNafm5G30000?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=3cc7e78587da57bac4a1a27af2d13e17\" alt=\"UML sequence\" data-canonical-src=\"http://www.plantuml.com/plantuml/png/SoWkIImgAStDuKhEIImkqBLppyzFpqbrB2We3aukoYmeiL8eA2tEu8881nSKfIQc16UaffResc48EISMPwHQARoSjkZPr0rFryvuEcV5yqMxNgpgvSAkL1VJ3A1rp-SlVTpK-RXfykEc3Yuqr-2nzN7ZoiUDROyRbpzkQdhHkVvnOylpxIjUpWQAh0OQzBXnyUF6PL2NJUXztDZpic4Mq2PYB02PlGfaJ6FtuyRf8BSrhdisUykpQHk0nZnkR0ARFVznu-J7ZIiUDqs264p700CveQaRw4bCNPZH2RTjufx7ZPkVjky2UWaZ4714pDO9p-RDUR5_ojFUBLmEgNafm5G30000\" srcset=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fwww.plantuml.com%2Fplantuml%2Fpng%2FSoWkIImgAStDuKhEIImkqBLppyzFpqbrB2We3aukoYmeiL8eA2tEu8881nSKfIQc16UaffResc48EISMPwHQARoSjkZPr0rFryvuEcV5yqMxNgpgvSAkL1VJ3A1rp-SlVTpK-RXfykEc3Yuqr-2nzN7ZoiUDROyRbpzkQdhHkVvnOylpxIjUpWQAh0OQzBXnyUF6PL2NJUXztDZpic4Mq2PYB02PlGfaJ6FtuyRf8BSrhdisUykpQHk0nZnkR0ARFVznu-J7ZIiUDqs264p700CveQaRw4bCNPZH2RTjufx7ZPkVjky2UWaZ4714pDO9p-RDUR5_ojFUBLmEgNafm5G30000?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=33a541eaf08e86c77983623c5a3ef908 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e雑にUMLのシーケンス図を書くとこんな感じ？(想像です)\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"issue投げた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#issue%E6%8A%95%E3%81%92%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eIssue投げた\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/google/clasp/issues/108\" rel=\"nofollow noopener\" target=\"_blank\"\u003eAdding global function is not reflected to Google Spread Sheet by clasp push to Apps Script bounded with Google Spread Sheet · Issue #108 · google/clasp\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eいや、Issueのタイトルからもう英語崩壊しとるから。もうちょっと英語力をですね・・・\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# claspとは\n\nこれまでGoogle Spread Sheetに紐付いたGoogle Apps Scriptの更新はオンラインエディタ以外の方法で更新することができなかった。\n\n[google/clasp](https://github.com/google/clasp)\n\nはそれを解決するツールだ。2018年1月だから比較的最近だ(執筆時2018年4月)\n\n[Google Apps Script をローカル環境で快適に開発するためのテンプレートを作りました](https://qiita.com/howdy39/items/0e799a9bfc1d3bccf6e5)\nなんていう記事も出ている。\n\n\n# Google Apps Scriptの制約\n\nまあ上げだせばきりがないが、最大の制約は、呼び出し可能な関数が\n\n```js\nfunction foo(){}\n```\n\nのように`function`キーワードを用いてglobalスコープで定義された関数しか呼び出せない。\n\n当然Google Spread Sheetに紐付いたGoogle Apps Scriptでも同じで、そうでないとGoogle Spread Sheetから呼び出せない。\n\n上の記事のテンプレートでは[gas-webpack-plugin](https://github.com/fossamagna/gas-webpack-plugin)を用いてこれを回避している。\n\n`gas-webpack-plugin`は\n\n\n```js\nfunction foo(){}\n```\n\nのように、`function`キーワードを用いて空っぽの関数を定義し、あとで`global`変数経由で実装を挿入するということをやってくれる。\n\nさあ、`clasp push`すればGoogle Spread Sheetからこの関数を呼び出せるはずだ。\n\n# Google Spread Sheetから呼び出せない\n\nところがそうは問屋がおろさない。\n\nどうも関数名をGoogle Spread Sheet側でキャッシュしているらしく、`clasp push`してもこのキャッシュが更新されない。**反映するにはオンラインエディタを開いてどうでもいい編集をして一度保存する必要がある**。\n\n![UML sequence](http://www.plantuml.com/plantuml/png/SoWkIImgAStDuKhEIImkqBLppyzFpqbrB2We3aukoYmeiL8eA2tEu8881nSKfIQc16UaffResc48EISMPwHQARoSjkZPr0rFryvuEcV5yqMxNgpgvSAkL1VJ3A1rp-SlVTpK-RXfykEc3Yuqr-2nzN7ZoiUDROyRbpzkQdhHkVvnOylpxIjUpWQAh0OQzBXnyUF6PL2NJUXztDZpic4Mq2PYB02PlGfaJ6FtuyRf8BSrhdisUykpQHk0nZnkR0ARFVznu-J7ZIiUDqs264p700CveQaRw4bCNPZH2RTjufx7ZPkVjky2UWaZ4714pDO9p-RDUR5_ojFUBLmEgNafm5G30000)\n\n雑にUMLのシーケンス図を書くとこんな感じ？(想像です)\n\n# Issue投げた\n\n[Adding global function is not reflected to Google Spread Sheet by clasp push to Apps Script bounded with Google Spread Sheet · Issue #108 · google/clasp](https://github.com/google/clasp/issues/108)\n\nいや、Issueのタイトルからもう英語崩壊しとるから。もうちょっと英語力をですね・・・\n\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":1,"created_at":"2018-04-13T02:36:04+09:00","group":null,"id":"78970b83919b26193109","likes_count":8,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"GoogleAppsScript","versions":[]},{"name":"GoogleSpreadSheet","versions":[]},{"name":"clasp","versions":[]}],"title":"Google Spread Sheetに紐付いたGoogle Apps Scriptの更新をclaspでするときにglobal関数の追加が反映されない","updated_at":"2019-04-02T11:51:31+09:00","url":"https://qiita.com/yumetodo/items/78970b83919b26193109","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"注意\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B3%A8%E6%84%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e注意\u003c/h1\u003e\n\n\u003cp\u003e筆者は\u003ccode\u003eSHGetFileInfo\u003c/code\u003e関数を使ったことがありません。なのにそれについての記事を書きます、あれ？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"発端\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%99%BA%E7%AB%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e発端\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eSHGetFileInfo で取得した HIMAGELIST って、解放せんでええのか？\u003c/p\u003e— そらみみ (@soramimi_jp) \u003ca href=\"https://twitter.com/soramimi_jp/status/981903885043351552?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2018年4月5日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eたまたまこのツイートが目に入った。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eSHGetFileInfo\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eDWORD_PTR\u003c/span\u003e \u003cspan class=\"nf\"\u003eSHGetFileInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"n\"\u003e_In_\u003c/span\u003e    \u003cspan class=\"n\"\u003eLPCTSTR\u003c/span\u003e    \u003cspan class=\"n\"\u003epszPath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e      \u003cspan class=\"n\"\u003edwFileAttributes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"n\"\u003e_Inout_\u003c/span\u003e \u003cspan class=\"n\"\u003eSHFILEINFO\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epsfi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eUINT\u003c/span\u003e       \u003cspan class=\"n\"\u003ecbFileInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eUINT\u003c/span\u003e       \u003cspan class=\"n\"\u003euFlags\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb762179.aspx\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://msdn.microsoft.com/ja-jp/library/windows/desktop/bb762179.aspx\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこの関数を使って大きいサイズ(48 x 48)のアイコンを取得する方法がある(後述)。\u003cbr\u003e\n\u003ccode\u003eSHGFI_SYSICONINDEX\u003c/code\u003eフラグを渡して戻り値を\u003ccode\u003eHIMAGELIST\u003c/code\u003eにキャストしてゴニョゴニョすると\u003ccode\u003eHICON\u003c/code\u003eが得られるのですが、この\u003ccode\u003eHIMAGELIST\u003c/code\u003eはどう後始末すればいいのでしょうか？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"一般的なhimagelistの扱い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AAhimagelist%E3%81%AE%E6%89%B1%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e一般的な\u003ccode\u003eHIMAGELIST\u003c/code\u003eの扱い方\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eImageList_Create で確保した HIMAGELIST は ImageList_Destroy で解放するってのはわかるけど、SHGetFileInfo が返した HIMAGELIST は解放していいのかなぁ？\u003c/p\u003e— そらみみ (@soramimi_jp) \u003ca href=\"https://twitter.com/soramimi_jp/status/981912099935825921?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2018年4月5日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb761522(v=vs.85).aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003eImageList_Create\u003c/code\u003e\u003c/a\u003eで確保して\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761524(v=vs.85).aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003eImageList_Destroy\u003c/code\u003e\u003c/a\u003eで開放という流れです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"shgetfileinfoで手に入れたhimagelistはimagelist_destroyで開放するべからず\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#shgetfileinfo%E3%81%A7%E6%89%8B%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%9Fhimagelist%E3%81%AFimagelist_destroy%E3%81%A7%E9%96%8B%E6%94%BE%E3%81%99%E3%82%8B%E3%81%B9%E3%81%8B%E3%82%89%E3%81%9A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eSHGetFileInfo\u003c/code\u003eで手に入れた\u003ccode\u003eHIMAGELIST\u003c/code\u003eは\u003ccode\u003eImageList_Destroy\u003c/code\u003eで開放するべからず\u003c/h1\u003e\n\n\u003cp\u003eところで\u003ccode\u003eSHGetFileInfo\u003c/code\u003eのMSDNをよく見ると\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e\u003cbr\u003e\nOnce you have a handle to a system image list, you can use the Image List API to manipulate it like any other image list. Because \u003cstrong\u003esystem image lists are created on a per-process basis, you should treat them as read-only objects. Writing to a system image list may overwrite or delete one of the system images, making it unavailable or incorrect for the remainder of the process.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとあります。つまり\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eプロセスごとにimage listが生成される\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eSHGetFileInfo\u003c/code\u003eはそれへのポインタ\u003c/li\u003e\n\u003cli\u003eだからRead-Onlyで扱う\u003c/li\u003e\n\u003cli\u003e変更操作をしたら同じプロセスからの以降の操作はどうなっても知らんよ\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eということで、結論としては\u003ccode\u003eImageList_Destroy\u003c/code\u003eで開放するべからず、となります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"サンプルコード\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eサンプルコード\u003c/h1\u003e\n\n\u003cp\u003e動作未検証。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;windows.h\u0026gt;\n#include \u0026lt;Shellapi.h\u0026gt;\n#include \u0026lt;Commctrl.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eIconSize\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLarge\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"c1\"\u003e//SHGFI_LARGEICON \u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSmall\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"c1\"\u003e//SHGFI_SMALLICON\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eExtraLarge\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHICON\u003c/span\u003e \u003cspan class=\"nf\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eITEMIDLIST\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epidFIle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIconSize\u003c/span\u003e \u003cspan class=\"n\"\u003eiconSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSHFILEINFO\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eHIMAGELIST\u003c/span\u003e \u003cspan class=\"n\"\u003ehImgList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHIMAGELIST\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSHGetFileInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLPCSTR\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epidFIle\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSHFILEINFO\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eSHGFI_PIDL\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSHGFI_SYSICONINDEX\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSHGFI_ICON\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiconSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e　\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1u\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIconSize\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eExtraLarge\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eiconSizeType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eImageList_GetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehImgList\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eILD_TRANSPARENT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eHICON\u003c/span\u003e \u003cspan class=\"nf\"\u003eGetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIconSize\u003c/span\u003e \u003cspan class=\"n\"\u003eiconSizeType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSHFILEINFO\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eHIMAGELIST\u003c/span\u003e \u003cspan class=\"n\"\u003ehImgList\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eHIMAGELIST\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSHGetFileInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSHFILEINFO\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eSHGFI_SYSICONINDEX\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eSHGFI_ICON\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiconSize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1u\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIconSize\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eExtraLarge\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eiconSizeType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eImageList_GetIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehImgList\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eILD_TRANSPARENT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esfi\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eiIcon\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"参考サイト\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e参考サイト\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.kab-studio.biz/Programing/Codian/ShellExtension/08.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eファイルアトリビュート|kab-studio\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.geocities.jp/asumaroyuumaro/program/tips/SHGetImageList.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDelphi システムイメージリストから任意サイズのアイコンを取得する\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.geocities.jp/iooiau/tips/bigicon.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eプログラミングTips : ファイルの大きなアイコンを取得する\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb762179.aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eSHGetFileInfo function (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761548(v=vs.85).aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eImageList_GetIcon function (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761524(v=vs.85).aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eImageList_Destroy function (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb759792.aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eSHFILEINFO structure (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb775230(v=vs.85).aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eIMAGELISTDRAWFLAGS (Windows)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/829075/who-is-responsible-for-clearing-up-memory-from-image-lists\" rel=\"nofollow noopener\" target=\"_blank\"\u003ewinapi - Who is responsible for clearing up memory from image lists? - Stack Overflow\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# 注意\n\n筆者は`SHGetFileInfo`関数を使ったことがありません。なのにそれについての記事を書きます、あれ？\n\n# 発端\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eSHGetFileInfo で取得した HIMAGELIST って、解放せんでええのか？\u003c/p\u003e\u0026mdash; そらみみ (@soramimi_jp) \u003ca href=\"https://twitter.com/soramimi_jp/status/981903885043351552?ref_src=twsrc%5Etfw\"\u003e2018年4月5日\u003c/a\u003e\u003c/blockquote\u003e\n\nたまたまこのツイートが目に入った。\n\n```c:SHGetFileInfo\nDWORD_PTR SHGetFileInfo(\n  _In_    LPCTSTR    pszPath,\n          DWORD      dwFileAttributes,\n  _Inout_ SHFILEINFO *psfi,\n          UINT       cbFileInfo,\n          UINT       uFlags\n);\n```\n\nhttps://msdn.microsoft.com/ja-jp/library/windows/desktop/bb762179.aspx\n\nこの関数を使って大きいサイズ(48 x 48)のアイコンを取得する方法がある(後述)。\n`SHGFI_SYSICONINDEX`フラグを渡して戻り値を`HIMAGELIST`にキャストしてゴニョゴニョすると`HICON`が得られるのですが、この`HIMAGELIST`はどう後始末すればいいのでしょうか？\n\n# 一般的な`HIMAGELIST`の扱い方\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eImageList_Create で確保した HIMAGELIST は ImageList_Destroy で解放するってのはわかるけど、SHGetFileInfo が返した HIMAGELIST は解放していいのかなぁ？\u003c/p\u003e\u0026mdash; そらみみ (@soramimi_jp) \u003ca href=\"https://twitter.com/soramimi_jp/status/981912099935825921?ref_src=twsrc%5Etfw\"\u003e2018年4月5日\u003c/a\u003e\u003c/blockquote\u003e\n\n[`ImageList_Create`](https://msdn.microsoft.com/en-us/library/windows/desktop/bb761522(v=vs.85).aspx)で確保して[`ImageList_Destroy`](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761524(v=vs.85).aspx)で開放という流れです。\n\n\n# `SHGetFileInfo`で手に入れた`HIMAGELIST`は`ImageList_Destroy`で開放するべからず\n\nところで`SHGetFileInfo`のMSDNをよく見ると\n\n\u003e**Note**\n\u003eOnce you have a handle to a system image list, you can use the Image List API to manipulate it like any other image list. Because **system image lists are created on a per-process basis, you should treat them as read-only objects. Writing to a system image list may overwrite or delete one of the system images, making it unavailable or incorrect for the remainder of the process.**\n\nとあります。つまり\n\n- プロセスごとにimage listが生成される\n- `SHGetFileInfo`はそれへのポインタ\n- だからRead-Onlyで扱う\n- 変更操作をしたら同じプロセスからの以降の操作はどうなっても知らんよ\n\nということで、結論としては`ImageList_Destroy`で開放するべからず、となります。\n\n# サンプルコード\n\n動作未検証。\n\n```cpp\n#include \u003cwindows.h\u003e\n#include \u003cShellapi.h\u003e\n#include \u003cCommctrl.h\u003e\nenum class IconSize : unsigned int {\n    Large = 0,//SHGFI_LARGEICON \n    Small = 1,//SHGFI_SMALLICON\n    ExtraLarge = 2,\n};\nHICON GetIcon(const ITEMIDLIST* pidFIle, IconSize iconSize)\n{\n    SHFILEINFO sfi;\n    HIMAGELIST hImgList = reinterpret_cast\u003cHIMAGELIST\u003e(::SHGetFileInfo(\n        reinterpret_cast\u003cLPCSTR\u003e(pidFIle), 0, \u0026sfi, sizeof(SHFILEINFO),\n        SHGFI_PIDL | SHGFI_SYSICONINDEX | SHGFI_ICON | (static_cast\u003cunsigned int\u003e(iconSize)　\u0026 1u)\n    ));\n    return (IconSize::ExtraLarge == iconSizeType) ? \n        ImageList_GetIcon(hImgList, sfi.iIcon, ILD_TRANSPARENT)\n        : sfi.iIcon;\n}\nHICON GetIcon(const char* path, IconSize iconSizeType)\n{\n    SHFILEINFO sfi;\n    HIMAGELIST hImgList = reinterpret_cast\u003cHIMAGELIST\u003e(::SHGetFileInfo(\n        path, 0, \u0026sfi, sizeof(SHFILEINFO),\n        SHGFI_SYSICONINDEX | SHGFI_ICON | (static_cast\u003cunsigned int\u003e(iconSize) \u0026 1u)\n    ));\n    return (IconSize::ExtraLarge == iconSizeType) ? \n        ImageList_GetIcon(hImgList, sfi.iIcon, ILD_TRANSPARENT)\n        : sfi.iIcon;\n}\n```\n\n## 参考サイト\n\n- [ファイルアトリビュート|kab-studio](http://www.kab-studio.biz/Programing/Codian/ShellExtension/08.html)\n- [Delphi システムイメージリストから任意サイズのアイコンを取得する](http://www.geocities.jp/asumaroyuumaro/program/tips/SHGetImageList.html)\n- [プログラミングTips : ファイルの大きなアイコンを取得する](http://www.geocities.jp/iooiau/tips/bigicon.html)\n- [SHGetFileInfo function (Windows)](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb762179.aspx)\n- [ImageList_GetIcon function (Windows)](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761548(v=vs.85).aspx)\n- [ImageList_Destroy function (Windows)](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb761524(v=vs.85).aspx)\n- [SHFILEINFO structure (Windows)](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb759792.aspx)\n- [IMAGELISTDRAWFLAGS (Windows)](https://msdn.microsoft.com/ja-jp/library/windows/desktop/bb775230(v=vs.85).aspx)\n- [winapi - Who is responsible for clearing up memory from image lists? - Stack Overflow](https://stackoverflow.com/questions/829075/who-is-responsible-for-clearing-up-memory-from-image-lists)\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-04-06T02:06:20+09:00","group":null,"id":"93f71e51669227d57ca6","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"C","versions":[]},{"name":"Win32API","versions":[]}],"title":"SHGetFileInfoで手に入れたHIMAGELISTはImageList_Destroyで開放するべからず","updated_at":"2019-04-02T15:01:10+09:00","url":"https://qiita.com/yumetodo/items/93f71e51669227d57ca6","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://qiita.com/aimof/items/bb786c112f7dcc3be6c9\" id=\"reference-ea7e1bd1edf3a0d8c119\"\u003e(a==1\u0026amp;\u0026amp;a==2\u0026amp;\u0026amp;a==3)を常にtrueにするStackOverflowの問題を解いたQiita記事まとめ\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとかいうよくわからん記事がでている。流行りに乗ってみるか。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"独自の縛り\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8B%AC%E8%87%AA%E3%81%AE%E7%B8%9B%E3%82%8A\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e独自の縛り\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eコンパイル時に評価\u003c/li\u003e\n\u003cli\u003eC++11\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"コード\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコード\u003c/h1\u003e\n\n\u003cp\u003eまあコンパイル時と言ってもただのoperator overloadだ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eA\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e他の言語しか知らない人のために解説しておくと、\u003ccode\u003estatic_assert\u003c/code\u003eは第1引数が偽のとき、第2引数の文字列を含むコンパイルエラーを出すものだ。エラーが出なければtrueになったといえる。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"\u003e [(a==1\u0026\u0026a==2\u0026\u0026a==3)を常にtrueにするStackOverflowの問題を解いたQiita記事まとめ](https://qiita.com/aimof/items/bb786c112f7dcc3be6c9)\n\nとかいうよくわからん記事がでている。流行りに乗ってみるか。\n\n# 独自の縛り\n\n- コンパイル時に評価\n- C++11\n\n# コード\n\nまあコンパイル時と言ってもただのoperator overloadだ。\n\n```cpp\nstruct A { bool a; };\nconstexpr bool operator==(A, int) noexcept { return true; }\nconstexpr A a{};\nstatic_assert(a == 1 \u0026\u0026 a == 2 \u0026\u0026 a == 3, \"\");\nint main(){}\n```\n\n他の言語しか知らない人のために解説しておくと、`static_assert`は第1引数が偽のとき、第2引数の文字列を含むコンパイルエラーを出すものだ。エラーが出なければtrueになったといえる。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2018-01-23T02:18:55+09:00","group":null,"id":"bbeed7258cd22fd8bb7c","likes_count":10,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]}],"title":"C++でもコンパイル時にa == 1 \u0026\u0026 a == 2 \u0026\u0026 a == 3をtrueにしてみたい","updated_at":"2019-04-02T15:01:50+09:00","url":"https://qiita.com/yumetodo/items/bbeed7258cd22fd8bb7c","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"きっかけ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eきっかけ\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.itmedia.co.jp/business/articles/1712/22/news108.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e「Qiita」運営会社、スマホゲームのエイチームが買収 - ITmedia ビジネスオンライン\u003c/a\u003e\u003cbr\u003e\nというニュースが昨年末駆け巡った。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiitadon.com/@htomine/99216874302686683\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe3a558a9-b452-07cd-62fe-a3ab7f27a175.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=1001213c7a2b3a5457077f84c8987662\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/e3a558a9-b452-07cd-62fe-a3ab7f27a175.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe3a558a9-b452-07cd-62fe-a3ab7f27a175.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2b17e04f5c5541020be2447e46016010 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiitadon.com/@htomine/99216682584735231\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fdd0dc79d-4058-2010-f5ba-d72f445b4cd2.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=01e7f8ae46587568492a7167842a659b\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/dd0dc79d-4058-2010-f5ba-d72f445b4cd2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fdd0dc79d-4058-2010-f5ba-d72f445b4cd2.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=080f9f1c78637eedb67db3462fe186ff 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eまあすぐQiitaがどうこうなったりはしないだろうが、なにごともバックアップは必要だ。そもそもみんなだいすきpixivだって新宿某所をゴジラに襲われたらデータ全ロスするわけで、我々が愛用するインフラなんて結構脆かったりする。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"先行事例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%88%E8%A1%8C%E4%BA%8B%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e先行事例\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/sta/items/5074df5fcb81d890897b\" id=\"reference-2e58c7f3927d25191c7f\"\u003eQiita API v2 を使って自身の全投稿をエクスポートする Python スクリプトを書いた - Qiita\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなんて記事を見つけた。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003ePython 2である\u003c/li\u003e\n\u003cli\u003e画像のダウンロードをやってくれない\u003c/li\u003e\n\u003cli\u003e投稿数が100を超えて取得できない\u003c/li\u003e\n\u003cli\u003eHTMLデータやコメントなどのMarkdown以外のデータを保存してくれない\u003c/li\u003e\n\u003cli\u003ePythonわからない\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eという不満があった。自分がよくわかってるのはC++かJavaScriptだ。しかしC++でHTTPS通信とか地獄すぎる。JavaScriptしかないやろ。しかも\u003ccode\u003easync\u003c/code\u003e/\u003ccode\u003eawait\u003c/code\u003eがある。これはいい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"つくった\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eつくった\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/qiita_export_all\" rel=\"nofollow noopener\" target=\"_blank\"\u003eyumetodo/qiita_export_all: Qiitaの記事を画像とコメントも含めて全部DLする\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使い方\u003c/h1\u003e\n\n\u003cp\u003e細かいことはREADMEをみてもらうとして、\u003ccode\u003egit clone\u003c/code\u003eして\u003ccode\u003enpm start\u003c/code\u003eすると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e.\n├── img\n│   ├── 0_7.png\n│   ├── 1_7.png\n┊   ┊\n├── items\n│   ├── [ネタ]私のTLのみんながpure HTMLが何かを理解してくれない件\n│   │   ├── comments\n│   │   │   ├── 2017-02-02T145121+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T153542+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T160946+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T173054+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   └── 2017-02-02T181039+0900\n│   │   │       ├── index.html\n│   │   │       ├── info.json\n│   │   │       └── README.md\n│   │   ├── index.html\n│   │   ├── info.json\n│   │   └── README.md\n┊   ┊\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようなものができる。\u003c/p\u003e\n\n\u003cp\u003eなんでこんなDirectory構造かというと、GitHubでは\u003ccode\u003eREADME.md\u003c/code\u003eはDirectoryを開いたときに下に表示してくれるのでこうしている。まああと、そっくりそのまま\u003ca href=\"https://github.com/GitbookIO/gitbook\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGitBook\u003c/a\u003eにしてしまうとかもできる気がする。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# きっかけ\n\n[「Qiita」運営会社、スマホゲームのエイチームが買収 - ITmedia ビジネスオンライン](http://www.itmedia.co.jp/business/articles/1712/22/news108.html)\nというニュースが昨年末駆け巡った。\n\n[![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/e3a558a9-b452-07cd-62fe-a3ab7f27a175.png)](https://qiitadon.com/@htomine/99216874302686683)\n[![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/dd0dc79d-4058-2010-f5ba-d72f445b4cd2.png)](https://qiitadon.com/@htomine/99216682584735231)\n\nまあすぐQiitaがどうこうなったりはしないだろうが、なにごともバックアップは必要だ。そもそもみんなだいすきpixivだって新宿某所をゴジラに襲われたらデータ全ロスするわけで、我々が愛用するインフラなんて結構脆かったりする。\n\n# 先行事例\n\n[Qiita API v2 を使って自身の全投稿をエクスポートする Python スクリプトを書いた - Qiita](https://qiita.com/sta/items/5074df5fcb81d890897b)\n\nなんて記事を見つけた。\n\n# 問題\n\n- Python 2である\n- 画像のダウンロードをやってくれない\n- 投稿数が100を超えて取得できない\n- HTMLデータやコメントなどのMarkdown以外のデータを保存してくれない\n- Pythonわからない\n\nという不満があった。自分がよくわかってるのはC++かJavaScriptだ。しかしC++でHTTPS通信とか地獄すぎる。JavaScriptしかないやろ。しかも`async`/`await`がある。これはいい。\n\n# つくった\n\n[yumetodo/qiita_export_all: Qiitaの記事を画像とコメントも含めて全部DLする](https://github.com/yumetodo/qiita_export_all)\n\n# 使い方\n\n細かいことはREADMEをみてもらうとして、`git clone`して`npm start`すると\n\n```plain\n.\n├── img\n│   ├── 0_7.png\n│   ├── 1_7.png\n┊   ┊\n├── items\n│   ├── [ネタ]私のTLのみんながpure HTMLが何かを理解してくれない件\n│   │   ├── comments\n│   │   │   ├── 2017-02-02T145121+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T153542+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T160946+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   ├── 2017-02-02T173054+0900\n│   │   │   │   ├── index.html\n│   │   │   │   ├── info.json\n│   │   │   │   └── README.md\n│   │   │   └── 2017-02-02T181039+0900\n│   │   │       ├── index.html\n│   │   │       ├── info.json\n│   │   │       └── README.md\n│   │   ├── index.html\n│   │   ├── info.json\n│   │   └── README.md\n┊   ┊\n```\n\nのようなものができる。\n\nなんでこんなDirectory構造かというと、GitHubでは`README.md`はDirectoryを開いたときに下に表示してくれるのでこうしている。まああと、そっくりそのまま[GitBook](https://github.com/GitbookIO/gitbook)にしてしまうとかもできる気がする。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":11,"created_at":"2018-01-02T13:53:11+09:00","group":null,"id":"ea9ecb5a30dbd120f955","likes_count":11,"private":false,"reactions_count":0,"tags":[{"name":"Qiita","versions":[]},{"name":"JavaScript","versions":[]},{"name":"Node.js","versions":[]},{"name":"QiitaAPI","versions":[]}],"title":"Qiita API v2 を使って自身の全投稿をエクスポートするJavascriptを書いた","updated_at":"2019-04-02T16:43:29+09:00","url":"https://qiita.com/yumetodo/items/ea9ecb5a30dbd120f955","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"文字-advent-calendar-2017\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%96%87%E5%AD%97-advent-calendar-2017\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e文字 Advent Calendar 2017\u003c/h1\u003e\n\n\u003cp\u003eこの記事は文字 Advent Calendar 2017 24日目の記事です\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;\u0026lt; 20日目|なにか || 22日目|なにか \u0026gt;\u0026gt;\u003c/p\u003e\n\n\u003cp\u003e過疎りすぎぃ！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eコンピューターで全漢字使用可に ６万字コード化 | NHKニュース\u003cbr\u003e\n\u003ca href=\"https://web.archive.org/web/20171224092202/https://www3.nhk.or.jp/news/html/20171224/k10011270111000.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www3.nhk.or.jp/news/html/20171224/k10011270111000.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eというニュースが出たが、突っ込みどころしかない。素人でもこれだけツッコミポイントがあるぞってことを示すために記事にした。\u003c/p\u003e\n\n\u003cp\u003e専門家の方、さらなるつっこみや、この記事に対するツッコミをお願いします！\u003c/p\u003e\n\n\u003cp\u003eなお以下ニュース映像のキャプチャが出てきますが、著作権法上の引用が成立していると理解しています。\u003c/p\u003e\n\n\u003cp\u003eなおUnicodeの異字体セレクタの概念については説明しません。異字体セレクタの検索には\u003cbr\u003e\n異体字セレクタセレクタ (α v0.3)\u003cbr\u003e\n\u003ca href=\"https://747.github.io/vsselector/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://747.github.io/vsselector/\u003c/a\u003e\u003cbr\u003e\nが便利です。\u003c/p\u003e\n\n\u003cp\u003e外字とはUnicodeに収録されていない文字をU+E000〜U+F8FF、U+000F0000〜U+000FFFFD、U+00100000〜U+0010FFFDに割り当てて利用している文字のことです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"unicode-100がisoで発行された\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#unicode-100%E3%81%8Ciso%E3%81%A7%E7%99%BA%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUnicode 10.0がISOで発行された\u003c/h1\u003e\n\n\u003cp\u003eそもそもこのニュースは一体何の話をしているのかというと、Unicode 10.0がISOで発行されたという内容です。一文字もそれらしい言葉が出ないのでさっぱり検索可能性がない！\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eコンピューターで全漢字使用可に ６万字コード化 \u003ca href=\"https://t.co/TijiguG9YB\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/TijiguG9YB\u003c/a\u003e IPAの文字情報基盤に登録されている文字が全部Unicodeに入ったという話、なんでいまニュースになってるのかは誰にもわかってない\u003c/p\u003e— バル (@baru_san) \u003ca href=\"https://twitter.com/baru_san/status/944880252198588416?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eUnicodeとISO 10646の関係が分かる人にか分からない事情がある。 \u003ca href=\"https://t.co/JWrflw0nsn\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/JWrflw0nsn\u003c/a\u003e\u003c/p\u003e— 小熊善之 (@0guma) \u003ca href=\"https://twitter.com/0guma/status/944881801104834560?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eまともな今回のニュース記事は\u003cbr\u003e\nISO/IEC 10646:2017発行 | yasuokaの日記 | スラド\u003cbr\u003e\n\u003ca href=\"https://srad.jp/~yasuoka/journal/617471/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://srad.jp/~yasuoka/journal/617471/\u003c/a\u003e\u003cbr\u003e\nで確認されたし。\u003c/p\u003e\n\n\u003cp\u003eつまるところ\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e要は半年前に発行されたUnicode 10.0のISO版が、やっと発行されたということだ。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eという言葉に今回のニュースは集約される。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記mj文字集合がunicode100で網羅された\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98mj%E6%96%87%E5%AD%97%E9%9B%86%E5%90%88%E3%81%8Cunicode100%E3%81%A7%E7%B6%B2%E7%BE%85%E3%81%95%E3%82%8C%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[追記]MJ文字集合がUnicode10.0で網羅された\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e文字情報基盤整備事業で扱ってるMJ文字集合(約6万字)が6月に発表されたUnicode10.0のCJK統合漢字拡張Fで網羅されたってのが一つと、今回ISO/IEC 10646:2017の改訂版が発表されてUnicode10.0の内容がISO規格としても定められた、っていうのの2つがあるってことかな\u003c/p\u003e— ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945127592591376385?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年12月25日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e広く使われているJIS漢字は約1万字だけど、MJ文字集合は行政で用いられる戸籍統一文字(約5万6千字)と住基統一文字(約2万1千字)を含んでるから、これを網羅してるフォント(IPAmj明朝とか)を使えば、行政で困ることは無くなる、という話がまずあって、\u003c/p\u003e— ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945130490268225536?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年12月25日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eそのMJ文字集合を国際的な文字集合の規格としてUnicodeの文字に入れるように提案してたのが、Unicode10.0及びISO/IEC 10646:2017によって今年ようやく規格化された、ということか\u003c/p\u003e— ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945130500410114048?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年12月25日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eどうやらもう一個話題があったそうだ。つまり我々が見るべきは\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.ipa.go.jp/about/press/20171225.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eプレス発表　「文字情報基盤整備事業」で推進していた漢字6万文字の国際規格化が完了：IPA 独立行政法人 情報処理推進機構\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eのようだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"全漢字使用可\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%A8%E6%BC%A2%E5%AD%97%E4%BD%BF%E7%94%A8%E5%8F%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e全漢字使用可\u003c/h1\u003e\n\n\u003cp\u003eまず「全漢字」の定義は？現在利用されているすべての漢字？だとすると6万字程度では収まらないですね。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eまぁそれはそうと、\"全漢字\" 使用可っての、だいぶ語弊があるよね。(ここまで書いて) 語弊があるどころか、登記統一文字で実際に複数の法人名に用例があるような字でも収録から外れてたり云々。\u003c/p\u003e— Tsukasa #01 [要出典] (@a4lg) \u003ca href=\"https://twitter.com/a4lg/status/944890172503613441?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDecember 24, 2017\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eウチにUnicode外の地名漢字用例つきで山ほどあるんだがー？\u003c/p\u003e— ひめ＠女体化したい (@sarasvati635) \u003ca href=\"https://twitter.com/sarasvati635/status/944892072804335618?ref_src=twsrc%5Etfw\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDecember 24, 2017\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e追記\u003c/p\u003e\n\n\u003cp\u003eMJ文字集合のことを言いたいっぽい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"邉󠄂-u9089-ue0102\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%82%89%F3%A0%84%82-u9089-ue0102\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e邉󠄂 (U+9089 U+E0102)\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe5b61a66-b9fb-6237-0551-5bbabb249257.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=c55522ccb814b044d18bd9277da97e33\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe5b61a66-b9fb-6237-0551-5bbabb249257.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=c55522ccb814b044d18bd9277da97e33\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/e5b61a66-b9fb-6237-0551-5bbabb249257.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe5b61a66-b9fb-6237-0551-5bbabb249257.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=cce7310d506852a4338c2d7e115af7fe 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu9089-ue0102.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b86875061423654974279d5cae686cfc\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu9089-ue0102.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b86875061423654974279d5cae686cfc\" alt=\"邉󠄂\" data-canonical-src=\"http://glyphwiki.org/glyph/u9089-ue0102.svg\" srcset=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu9089-ue0102.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3205890bf03fd939e90ea48eb0bbce9d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこの文字ですね。手元の環境だとうまいこと表示してくれないんですが。\u003c/p\u003e\n\n\u003cp\u003eUnicode 10.0関係ないですね。しかもすでに存在しているので外字でもない。\u003c/p\u003e\n\n\u003cp\u003eところで異字体セレクタが\u003ccode\u003eU+E0102\u003c/code\u003eと\u003ccode\u003eU+E0114\u003c/code\u003eの区別がつかないんですが、何が違うんです・・・？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"フォント作成の話と文字コード関係ない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90%E3%81%AE%E8%A9%B1%E3%81%A8%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eフォント作成の話と文字コード関係ない\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F08bee634-4aeb-d4e6-ae82-6732698decad.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=56e372b19522780899bfd32df147bd2a\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F08bee634-4aeb-d4e6-ae82-6732698decad.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=56e372b19522780899bfd32df147bd2a\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/08bee634-4aeb-d4e6-ae82-6732698decad.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F08bee634-4aeb-d4e6-ae82-6732698decad.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=1504fccf52efa0ff1328e03876438e4f 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eフォント作成の話と文字コード関係ないですよね？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"髙u9ad9と𠮷u20bb7と廣󠄁u5ee3-ue0101\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%AB%99u9ad9%E3%81%A8%F0%A0%AE%B7u20bb7%E3%81%A8%E5%BB%A3%F3%A0%84%81u5ee3-ue0101\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e髙(U+9AD9)と𠮷(U+20bb7)と廣󠄁(U+5EE3 U+E0101)\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2ef22593-ff61-8bf8-e828-31eb30c55d88.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=90a05c4ef8d80b8a0ef08b8008492c86\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2ef22593-ff61-8bf8-e828-31eb30c55d88.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=90a05c4ef8d80b8a0ef08b8008492c86\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/2ef22593-ff61-8bf8-e828-31eb30c55d88.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2ef22593-ff61-8bf8-e828-31eb30c55d88.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3c4090fff70c3f8ddb901c551afa3a73 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e髙はCJK統合漢字として\u003ccode\u003eU+9AD9\u003c/code\u003eにあります。\u003c/p\u003e\n\n\u003cp\u003eサロゲートペアの例として散々あちこちで使われている𠮷はUnicode3.2から\u003ccode\u003eU+20bb7\u003c/code\u003eにあります。\u003c/p\u003e\n\n\u003cp\u003e廣󠄁は\u003ccode\u003eU+5EE3\u003c/code\u003eの異字体セレクタが\u003ccode\u003eU+E0101\u003c/code\u003eとして登録されています。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu5ee3-ue0101.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=822815c5a584b68a6798f8a14c6e8a77\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu5ee3-ue0101.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=822815c5a584b68a6798f8a14c6e8a77\" alt=\"廣󠄁\" data-canonical-src=\"http://glyphwiki.org/glyph/u5ee3-ue0101.svg\" srcset=\"https://qiita-user-contents.imgix.net/http%3A%2F%2Fglyphwiki.org%2Fglyph%2Fu5ee3-ue0101.svg?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=fcdd34d0737a81178e5270d1616f2536 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eいずれもUnicode 10.0関係ないですね。しかもすでに存在しているので外字でもない。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"コード\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコード\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fa982d617-817d-2899-7ca3-c121415417ab.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4490b25e30c543e04f2fd77a83240c4c\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fa982d617-817d-2899-7ca3-c121415417ab.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4490b25e30c543e04f2fd77a83240c4c\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/a982d617-817d-2899-7ca3-c121415417ab.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fa982d617-817d-2899-7ca3-c121415417ab.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4e1353b56d5fd7935fa4d91e696556a0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eコードってなんぞ？codepointのことか？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"当初日本語の漢字は約1万字のみだった\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BD%93%E5%88%9D%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%BC%A2%E5%AD%97%E3%81%AF%E7%B4%841%E4%B8%87%E5%AD%97%E3%81%AE%E3%81%BF%E3%81%A0%E3%81%A3%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e当初日本語の漢字は約1万字のみだった\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2937c557-1bbe-8fdd-0693-295c0d494c14.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e07f758adb66fd6554882cd9870d68d4\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2937c557-1bbe-8fdd-0693-295c0d494c14.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e07f758adb66fd6554882cd9870d68d4\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/2937c557-1bbe-8fdd-0693-295c0d494c14.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F2937c557-1bbe-8fdd-0693-295c0d494c14.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4d9f138ce9defbca299a2e3c28fc550c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eそれ本当ですか・・・？\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://www.horagai.com/www/moji/Asakura3.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003eインターネットと漢字 3/4\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"bmp外への拡張\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#bmp%E5%A4%96%E3%81%B8%E3%81%AE%E6%8B%A1%E5%BC%B5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eBMP外への拡張\u003c/h2\u003e\n\n\u003cp\u003e　日本は統合漢字の継続的なメンテナンスの保証をもとめ、国際的に承認された。メンテナンスにはIRG（Ideographic Rapporter Groupe、漢字連絡会）があたることになった。\u003c/p\u003e\n\n\u003cp\u003e　中国は\u003cstrong\u003e1万字\u003c/strong\u003eの漢字追加を提案したが、そのスペースにはハングル完成形（注14）を収録することになってしまったので、まとまった空きとしてはハングルのはいっていた6千500字余のスペースしか残っていなかった。中国は1万字追加に固執したが、漢字合成の可能性を検討するという条件で妥協がはかられ、追加字数は1万字から6千500字余に圧縮された。これが後の拡張Aの原形である。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnicodeで1万なんて数字、これくらいしか私は聞いたことがないんですが、有識者の方、コメントお待ちしています。\u003c/p\u003e\n\n\u003cp\u003eCJK統合漢字はUnicode1.1では20,902字だったそうです。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e追記\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/wakufactory\" class=\"user-mention js-hovercard\" title=\"wakufactory\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"wakufactory\"\u003e@wakufactory\u003c/a\u003e さんより情報提供。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e1万字というのは、JIS X 0213の漢字だけ10050文字のことだと思います。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eえっ。我々はUnicodeの話をしていたはずでは・・・。このNH(ry！\u003c/p\u003e\n\n\u003cp\u003eなんか、このAdCの22日目、\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yuba/items/83a81a0de09a8d8655f1\" id=\"reference-a55395eb47223d73351e\"\u003e髙﨑さん、草彅さん、𠮷田さん、あなたの名前はこうして化ける\u003c/a\u003e\u003cbr\u003e\nの話と混ざっている感有りますね・・・。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"15年掛けてipaと経産省が\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#15%E5%B9%B4%E6%8E%9B%E3%81%91%E3%81%A6ipa%E3%81%A8%E7%B5%8C%E7%94%A3%E7%9C%81%E3%81%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e15年掛けてIPAと経産省が\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F0c14bf4e-2b73-d993-b578-0efb0fc9a1de.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7c8fb9f1db105971500fb899ff552b9c\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F0c14bf4e-2b73-d993-b578-0efb0fc9a1de.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7c8fb9f1db105971500fb899ff552b9c\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/0c14bf4e-2b73-d993-b578-0efb0fc9a1de.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F0c14bf4e-2b73-d993-b578-0efb0fc9a1de.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=3fb4c40f7011502c896f409b62ac796b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e15年というのはいつからいつですかね・・・？\u003c/p\u003e\n\n\u003cp\u003eUnicode1.1が1993年、Unicode10.0が今年2017年なんですが・・・。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e追記\u003c/p\u003e\n\n\u003cp\u003e上でも書いたように、MJ文字集合のことを言いたいんだろう。しかし\u003cbr\u003e\n\u003ca href=\"http://mojikiban.ipa.go.jp/2293.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e第1回 文字情報基盤ワーキンググループ | 文字情報基盤整備事業\u003c/a\u003e\u003cbr\u003e\nに記載されている沿革によれば\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://mojikiban.ipa.go.jp/contents/pdf/2013/20130919_1ki_s2.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://mojikiban.ipa.go.jp/contents/pdf/2013/20130919_1ki_s2.pdf\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://mojikiban.ipa.go.jp/contents/pdf/2013/20130919_1ki_s2.pdf\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fc933b401-e5de-89bb-9fec-882004c6e61c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=ec3f6c7e82715addc243a1e81f8d0f78\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/c933b401-e5de-89bb-9fec-882004c6e61c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fc933b401-e5de-89bb-9fec-882004c6e61c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7b393feadcaaba93921c1c412e34a9e9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e行政情報化推進基本計画 平成６年12月25日閣議決定\u003c/li\u003e\n\u003cli\u003ee-Japan 戦 略 II 平成１５年７月２日IT戦略本部決定\u003c/li\u003e\n\u003cli\u003e電子政府構築計画2003年 平成15年7月17日各府省CIO連絡会議決定\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとあり、どれとも合わない。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.ipa.go.jp/about/press/20171225.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eプレス発表　「文字情報基盤整備事業」で推進していた漢字6万文字の国際規格化が完了：IPA 独立行政法人 情報処理推進機構\u003c/a\u003e\u003cbr\u003e\nIPAでは、内閣官房IT総合戦略室、経済産業省と共に、「文字情報基盤整備事業」を\u003cstrong\u003e2010年9月\u003c/strong\u003eより推進してきました。この事業は、行政の実務で求められる人名や地名等の正確な表記をコンピュータで可能にするため、約6万文字の漢字について、文字フォントの整備や文字コードの国際規格化等を行ってきたものです。なお、国際規格化にあたっては、一般社団法人 情報処理学会 情報規格調査会SC2専門委員会と連携し、順次進めてきました。\u003c/p\u003e\n\n\u003cp\u003e 12月22日（日本時間）、文字コード国際規格書の最新版である、ISO/IEC 10646 (Universal Coded Character Set) 第5版がISO（国際標準化機構）より発行されたことが判りました。これにより、整備してきた約6万文字の漢字全ての国際規格化が完了したことになります。その結果、これら約6万文字全てをコンピュータで使用する際、統一的な文字コードで扱うことができるようになりました。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eプレリリース見てもやっぱり合わない。\u003c/p\u003e\n\n\u003cp\u003eそれともなにか？同プレリリースの\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eまた、IPAでは現在、戸籍等の業務で必要となる「変体仮名(*2)」の国際規格化も進めており、前述の国際規格書の追補版として2018年3月末までに発行される見込みです。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eより、「e-Japan 戦 略 II 平成１５年７月２日IT戦略本部決定」からその2018年3月末の15年だとでも言うのかい？NHKさん、未来に生きちゃいないだろうか・・・\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e更に追記\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/kazatsuyu\" class=\"user-mention js-hovercard\" title=\"kazatsuyu\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kazatsuyu\"\u003e@kazatsuyu\u003c/a\u003e さんより情報提供。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://ja.wikipedia.org/wiki/Unicode#%E5%90%84%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%9D%E3%81%AE%E7%89%B9%E5%BE%B4\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUnicode - Wikipedia#各バージョンとその特徴\u003c/a\u003e\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e制定年月日\u003c/th\u003e\n\u003cth\u003eバージョン番号\u003c/th\u003e\n\u003cth\u003e収録文字数\u003c/th\u003e\n\u003cth\u003e概要\u003c/th\u003e\n\u003cth\u003e日本語における主要な追加文字\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e2002年3月\u003c/td\u003e\n\u003ctd\u003eUnicode 3.2.0[17]\u003c/td\u003e\n\u003ctd\u003e95,221\u003c/td\u003e\n\u003ctd\u003eISO/IEC 10646-1:2000の追補Amd.1に対応\u003c/td\u003e\n\u003ctd\u003eJIS X 0213（正式対応）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2017年6月20日\u003c/td\u003e\n\u003ctd\u003eUnicode 10.0.0[33]\u003c/td\u003e\n\u003ctd\u003e136,690\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e変体仮名285文字追加\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e多分、この15年のことでしょうね。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eさらに追記\u003c/p\u003e\n\n\u003cp\u003eと思ったら違った。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/mashabow\" class=\"user-mention js-hovercard\" title=\"mashabow\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"mashabow\"\u003e@mashabow\u003c/a\u003e 氏の情報提供によれば\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e文字情報基盤整備事業の前身に\u003cstrong\u003e汎用電子情報交換環境整備プログラム\u003c/strong\u003eというのがありまして、これが2002年（平成14年）スタートです。なので、これを含めると15年になります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.jstage.jst.go.jp/article/johokanri/55/3/55_147/_html/-char/ja\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.jstage.jst.go.jp/article/johokanri/55/3/55_147/_html/-char/ja\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://www.ninjal.ac.jp/archives/hanyo/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.ninjal.ac.jp/archives/hanyo/\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eだとか。わかるかーーーー！なんで文字情報基盤整備事業の沿革のところにその文字がないんだ！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"行政の効率化\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A1%8C%E6%94%BF%E3%81%AE%E5%8A%B9%E7%8E%87%E5%8C%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e行政の効率化\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfaaa10f-b702-12e0-9817-96e7b0ff6a09.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9f83b501068fcb3573b258c763e3c879\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfaaa10f-b702-12e0-9817-96e7b0ff6a09.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9f83b501068fcb3573b258c763e3c879\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/cfaaa10f-b702-12e0-9817-96e7b0ff6a09.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfaaa10f-b702-12e0-9817-96e7b0ff6a09.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=81bbfc8c65f229a184a0511117bc33fb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e全漢字使用可でも述べたので割愛\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eNHKしっかりして！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# 文字 Advent Calendar 2017\n\nこの記事は文字 Advent Calendar 2017 24日目の記事です\n\n\u003c\u003c 20日目|なにか || 22日目|なにか \u003e\u003e\n\n過疎りすぎぃ！\n\n# はじめに\n\nコンピューターで全漢字使用可に ６万字コード化 | NHKニュース\n[https://www3.nhk.or.jp/news/html/20171224/k10011270111000.html](https://web.archive.org/web/20171224092202/https://www3.nhk.or.jp/news/html/20171224/k10011270111000.html)\n\nというニュースが出たが、突っ込みどころしかない。素人でもこれだけツッコミポイントがあるぞってことを示すために記事にした。\n\n専門家の方、さらなるつっこみや、この記事に対するツッコミをお願いします！\n\nなお以下ニュース映像のキャプチャが出てきますが、著作権法上の引用が成立していると理解しています。\n\nなおUnicodeの異字体セレクタの概念については説明しません。異字体セレクタの検索には\n異体字セレクタセレクタ (α v0.3)\nhttps://747.github.io/vsselector/\nが便利です。\n\n外字とはUnicodeに収録されていない文字をU+E000〜U+F8FF、U+000F0000〜U+000FFFFD、U+00100000〜U+0010FFFDに割り当てて利用している文字のことです。\n\n# Unicode 10.0がISOで発行された\n\nそもそもこのニュースは一体何の話をしているのかというと、Unicode 10.0がISOで発行されたという内容です。一文字もそれらしい言葉が出ないのでさっぱり検索可能性がない！\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eコンピューターで全漢字使用可に ６万字コード化 \u003ca href=\"https://t.co/TijiguG9YB\"\u003ehttps://t.co/TijiguG9YB\u003c/a\u003e IPAの文字情報基盤に登録されている文字が全部Unicodeに入ったという話、なんでいまニュースになってるのかは誰にもわかってない\u003c/p\u003e\u0026mdash; バル (@baru_san) \u003ca href=\"https://twitter.com/baru_san/status/944880252198588416?ref_src=twsrc%5Etfw\"\u003e2017年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eUnicodeとISO 10646の関係が分かる人にか分からない事情がある。 \u003ca href=\"https://t.co/JWrflw0nsn\"\u003ehttps://t.co/JWrflw0nsn\u003c/a\u003e\u003c/p\u003e\u0026mdash; 小熊善之 (@0guma) \u003ca href=\"https://twitter.com/0guma/status/944881801104834560?ref_src=twsrc%5Etfw\"\u003e2017年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\nまともな今回のニュース記事は\nISO/IEC 10646:2017発行 | yasuokaの日記 | スラド\nhttps://srad.jp/~yasuoka/journal/617471/\nで確認されたし。\n\nつまるところ\n\n\u003e要は半年前に発行されたUnicode 10.0のISO版が、やっと発行されたということだ。\n\nという言葉に今回のニュースは集約される。\n\n# [追記]MJ文字集合がUnicode10.0で網羅された\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e文字情報基盤整備事業で扱ってるMJ文字集合(約6万字)が6月に発表されたUnicode10.0のCJK統合漢字拡張Fで網羅されたってのが一つと、今回ISO/IEC 10646:2017の改訂版が発表されてUnicode10.0の内容がISO規格としても定められた、っていうのの2つがあるってことかな\u003c/p\u003e\u0026mdash; ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945127592591376385?ref_src=twsrc%5Etfw\"\u003e2017年12月25日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e広く使われているJIS漢字は約1万字だけど、MJ文字集合は行政で用いられる戸籍統一文字(約5万6千字)と住基統一文字(約2万1千字)を含んでるから、これを網羅してるフォント(IPAmj明朝とか)を使えば、行政で困ることは無くなる、という話がまずあって、\u003c/p\u003e\u0026mdash; ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945130490268225536?ref_src=twsrc%5Etfw\"\u003e2017年12月25日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eそのMJ文字集合を国際的な文字集合の規格としてUnicodeの文字に入れるように提案してたのが、Unicode10.0及びISO/IEC 10646:2017によって今年ようやく規格化された、ということか\u003c/p\u003e\u0026mdash; ワトソン (@WaTTson496) \u003ca href=\"https://twitter.com/WaTTson496/status/945130500410114048?ref_src=twsrc%5Etfw\"\u003e2017年12月25日\u003c/a\u003e\u003c/blockquote\u003e\n\nどうやらもう一個話題があったそうだ。つまり我々が見るべきは\n\n[プレス発表　「文字情報基盤整備事業」で推進していた漢字6万文字の国際規格化が完了：IPA 独立行政法人 情報処理推進機構](https://www.ipa.go.jp/about/press/20171225.html)\n\nのようだ。\n\n# 全漢字使用可\n\nまず「全漢字」の定義は？現在利用されているすべての漢字？だとすると6万字程度では収まらないですね。\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eまぁそれはそうと、\u0026quot;全漢字\u0026quot; 使用可っての、だいぶ語弊があるよね。(ここまで書いて) 語弊があるどころか、登記統一文字で実際に複数の法人名に用例があるような字でも収録から外れてたり云々。\u003c/p\u003e\u0026mdash; Tsukasa #01 [要出典] (@a4lg) \u003ca href=\"https://twitter.com/a4lg/status/944890172503613441?ref_src=twsrc%5Etfw\"\u003eDecember 24, 2017\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eウチにUnicode外の地名漢字用例つきで山ほどあるんだがー？\u003c/p\u003e\u0026mdash; ひめ＠女体化したい (@sarasvati635) \u003ca href=\"https://twitter.com/sarasvati635/status/944892072804335618?ref_src=twsrc%5Etfw\"\u003eDecember 24, 2017\u003c/a\u003e\u003c/blockquote\u003e\n\n---\n\n追記\n\nMJ文字集合のことを言いたいっぽい。\n\n# 邉󠄂 (U+9089 U+E0102)\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/e5b61a66-b9fb-6237-0551-5bbabb249257.png)\n\n![邉󠄂](http://glyphwiki.org/glyph/u9089-ue0102.svg)\n\nこの文字ですね。手元の環境だとうまいこと表示してくれないんですが。\n\nUnicode 10.0関係ないですね。しかもすでに存在しているので外字でもない。\n\nところで異字体セレクタが`U+E0102`と`U+E0114`の区別がつかないんですが、何が違うんです・・・？\n\n# フォント作成の話と文字コード関係ない\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/08bee634-4aeb-d4e6-ae82-6732698decad.png)\n\nフォント作成の話と文字コード関係ないですよね？\n\n# 髙(U+9AD9)と𠮷(U+20bb7)と廣󠄁(U+5EE3 U+E0101)\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/2ef22593-ff61-8bf8-e828-31eb30c55d88.png)\n\n髙はCJK統合漢字として`U+9AD9`にあります。\n\nサロゲートペアの例として散々あちこちで使われている𠮷はUnicode3.2から`U+20bb7`にあります。\n\n廣󠄁は`U+5EE3`の異字体セレクタが`U+E0101`として登録されています。\n\n![廣󠄁](http://glyphwiki.org/glyph/u5ee3-ue0101.svg)\n\nいずれもUnicode 10.0関係ないですね。しかもすでに存在しているので外字でもない。\n\n# コード\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/a982d617-817d-2899-7ca3-c121415417ab.png)\n\nコードってなんぞ？codepointのことか？\n\n# 当初日本語の漢字は約1万字のみだった\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/2937c557-1bbe-8fdd-0693-295c0d494c14.png)\n\nそれ本当ですか・・・？\n\n\u003e[インターネットと漢字 3/4](http://www.horagai.com/www/moji/Asakura3.htm)\n\u003e## BMP外への拡張\n\u003e\n\u003e　日本は統合漢字の継続的なメンテナンスの保証をもとめ、国際的に承認された。メンテナンスにはIRG（Ideographic Rapporter Groupe、漢字連絡会）があたることになった。\n\u003e\n\u003e　中国は**1万字**の漢字追加を提案したが、そのスペースにはハングル完成形（注14）を収録することになってしまったので、まとまった空きとしてはハングルのはいっていた6千500字余のスペースしか残っていなかった。中国は1万字追加に固執したが、漢字合成の可能性を検討するという条件で妥協がはかられ、追加字数は1万字から6千500字余に圧縮された。これが後の拡張Aの原形である。\n\nUnicodeで1万なんて数字、これくらいしか私は聞いたことがないんですが、有識者の方、コメントお待ちしています。\n\nCJK統合漢字はUnicode1.1では20,902字だったそうです。\n\n---\n\n追記\n\n@wakufactory さんより情報提供。\n\n\u003e1万字というのは、JIS X 0213の漢字だけ10050文字のことだと思います。\n\nえっ。我々はUnicodeの話をしていたはずでは・・・。このNH(ry！\n\nなんか、このAdCの22日目、\n[髙﨑さん、草彅さん、𠮷田さん、あなたの名前はこうして化ける](https://qiita.com/yuba/items/83a81a0de09a8d8655f1)\nの話と混ざっている感有りますね・・・。\n\n# 15年掛けてIPAと経産省が\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/0c14bf4e-2b73-d993-b578-0efb0fc9a1de.png)\n\n15年というのはいつからいつですかね・・・？\n\nUnicode1.1が1993年、Unicode10.0が今年2017年なんですが・・・。\n\n---\n\n追記\n\n上でも書いたように、MJ文字集合のことを言いたいんだろう。しかし\n[第1回 文字情報基盤ワーキンググループ | 文字情報基盤整備事業](http://mojikiban.ipa.go.jp/2293.html)\nに記載されている沿革によれば\n\n\u003ehttp://mojikiban.ipa.go.jp/contents/pdf/2013/20130919_1ki_s2.pdf\n\u003e[![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/c933b401-e5de-89bb-9fec-882004c6e61c.png)](http://mojikiban.ipa.go.jp/contents/pdf/2013/20130919_1ki_s2.pdf)\n\u003e\n- 行政情報化推進基本計画 平成６年12月25日閣議決定\n- e-Japan 戦 略 II 平成１５年７月２日IT戦略本部決定\n- 電子政府構築計画2003年 平成15年7月17日各府省CIO連絡会議決定\n\nとあり、どれとも合わない。\n\n\u003e[プレス発表　「文字情報基盤整備事業」で推進していた漢字6万文字の国際規格化が完了：IPA 独立行政法人 情報処理推進機構](https://www.ipa.go.jp/about/press/20171225.html)\n\u003eIPAでは、内閣官房IT総合戦略室、経済産業省と共に、「文字情報基盤整備事業」を**2010年9月**より推進してきました。この事業は、行政の実務で求められる人名や地名等の正確な表記をコンピュータで可能にするため、約6万文字の漢字について、文字フォントの整備や文字コードの国際規格化等を行ってきたものです。なお、国際規格化にあたっては、一般社団法人 情報処理学会 情報規格調査会SC2専門委員会と連携し、順次進めてきました。\n\u003e\n\u003e 12月22日（日本時間）、文字コード国際規格書の最新版である、ISO/IEC 10646 (Universal Coded Character Set) 第5版がISO（国際標準化機構）より発行されたことが判りました。これにより、整備してきた約6万文字の漢字全ての国際規格化が完了したことになります。その結果、これら約6万文字全てをコンピュータで使用する際、統一的な文字コードで扱うことができるようになりました。\n\nプレリリース見てもやっぱり合わない。\n\nそれともなにか？同プレリリースの\n\n\u003eまた、IPAでは現在、戸籍等の業務で必要となる「変体仮名(*2)」の国際規格化も進めており、前述の国際規格書の追補版として2018年3月末までに発行される見込みです。\n\nより、「e-Japan 戦 略 II 平成１５年７月２日IT戦略本部決定」からその2018年3月末の15年だとでも言うのかい？NHKさん、未来に生きちゃいないだろうか・・・\n\n---\n\n更に追記\n\n@kazatsuyu さんより情報提供。\n\n\u003e[Unicode - Wikipedia#各バージョンとその特徴](https://ja.wikipedia.org/wiki/Unicode#各バージョンとその特徴)\n\u003e\n\u003e| 制定年月日 | バージョン番号    | 収録文字数 | 概要                                  | 日本語における主要な追加文字 |\n|------------|-------------------|------------|---------------------------------------|------------------------------|\n| 2002年3月  | Unicode 3.2.0[17] | 95,221     | ISO/IEC 10646-1:2000の追補Amd.1に対応 | JIS X 0213（正式対応）       |\n| 2017年6月20日 | Unicode 10.0.0[33] | 136,690    |                                       | 変体仮名285文字追加          |\n\n多分、この15年のことでしょうね。\n\n---\n\nさらに追記\n\nと思ったら違った。\n\n@mashabow 氏の情報提供によれば\n\n\u003e文字情報基盤整備事業の前身に**汎用電子情報交換環境整備プログラム**というのがありまして、これが2002年（平成14年）スタートです。なので、これを含めると15年になります。\n\u003e\n\u003ehttps://www.jstage.jst.go.jp/article/johokanri/55/3/55_147/_html/-char/ja\n\u003ehttp://www.ninjal.ac.jp/archives/hanyo/\n\nだとか。わかるかーーーー！なんで文字情報基盤整備事業の沿革のところにその文字がないんだ！\n\n# 行政の効率化\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/94177/cfaaa10f-b702-12e0-9817-96e7b0ff6a09.png)\n\n全漢字使用可でも述べたので割愛\n\n# まとめ\n\nNHKしっかりして！\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":13,"created_at":"2017-12-25T01:12:56+09:00","group":null,"id":"91e5169bff5ea4a813de","likes_count":43,"private":false,"reactions_count":0,"tags":[{"name":"文字コード","versions":[]},{"name":"unicode","versions":[]},{"name":"nhk","versions":[]},{"name":"Unicode10.0","versions":[]}],"title":"Re:コンピューターで全漢字使用可に ６万字コード化 #NHKしっかりして","updated_at":"2019-04-02T17:17:39+09:00","url":"https://qiita.com/yumetodo/items/91e5169bff5ea4a813de","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"c-advent-calendar-2017\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c-advent-calendar-2017\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++ Advent Calendar 2017\u003c/h1\u003e\n\n\u003cp\u003eこの記事はC++ Advent Calendar 2017 21日目の記事です\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/_EnumHack/items/bf6a2209174331b056c1\" id=\"reference-c1850a992c5f8d8ebd0b\"\u003e\u0026lt;\u0026lt; 20日目|C++テンプレートはコードジェネレータ\u003c/a\u003e || \u003ca href=\"https://qiita.com/gnaggnoyil/items/6c9a1cc0c023899ede34\" id=\"reference-55aeb8a951a0957a1045\"\u003e22日目|C++のAllocatorとアロケータを使うcontainer \u0026gt;\u0026gt;\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eC++17の話であふれるかと思いきや意外とそうでもなかったですね。話題が広い。\u003c/p\u003e\n\n\u003cp\u003e遅刻してすみません。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e動的とか静的とかわかんない、という話から変数のスコープとかの話に前になった。\u003cbr\u003e\n\u003ca href=\"https://togetter.com/li/1153748\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++のメモリーの気持ちを考えたくなるまとめ - Togetterまとめ\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eというわけでその辺の話をしたい。\u003c/p\u003e\n\n\u003cp\u003e規格的に厳密な議論はこの記事では行わない。ボケボケとした脳みそでも40%くらい内容が理解できる記事を目指す。\u003c/p\u003e\n\n\u003cp\u003eちなみにC言語には当てはまらない話もあるのでC言語について知りたい場合は自分で規格書を読むなり他のサイトに行ってほしい。\u003c/p\u003e\n\n\u003cp\u003eまた特定のアーキテクチャに強く依存した話になるので、その辺を差し引いて読み進めてほしい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c規格ストレージの種類\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E8%A6%8F%E6%A0%BC%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8%E3%81%AE%E7%A8%AE%E9%A1%9E\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++規格:ストレージの種類\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#basic.start.term\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++11: Syntax and Feature 3.7 ストレージ(storage duration)\u003c/a\u003e\u003cbr\u003e\n規格上、ストレージという用語は正しくなく、ストレージの有効期間(storage duration)という用語が正しいのだが、本書では多くの箇所で、簡単にするため、単にストレージという言葉を使っている。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eという言葉に従いストレージという言葉をここでも使う。\u003c/p\u003e\n\n\u003cp\u003eなおC言語にはストレージの有効期間という定義はなく、単にstorage-class-specifier(\u003ccode\u003etypedef\u003c/code\u003e,\u003ccode\u003eextern\u003c/code\u003e, \u003ccode\u003estatic\u003c/code\u003e, \u003ccode\u003e_Thread_local\u003c/code\u003e(C11), \u003ccode\u003eauto\u003c/code\u003e, \u003ccode\u003eregister\u003c/code\u003e)の定義のみある。\u003c/p\u003e\n\n\u003cp\u003eちなみにこの項で述べるdynamic storageはSTLヘッダの\u003ccode\u003e\u0026lt;new\u0026gt;\u003c/code\u003eが必要だが、これは\u003ca href=\"https://stackoverflow.com/questions/42441683/c-freestanding-features\" rel=\"nofollow noopener\" target=\"_blank\"\u003efreestanding環境でも存在している\u003c/a\u003eので、このあと述べる4つの区分は、処理系がOS上か否かにかかわらず存在すると思われる。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"static-storage\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#static-storage\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estatic storage\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/*\n * staticキーワードをつけて宣言したローカル変数\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eFoo\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。クラス型でもいい\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eput_on_static_storage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。template関数内でも同じ。\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*\n * staticキーワードをつけて宣言したデータメンバー\n */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eHoge\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*\n * thread_localをつけずに宣言した名前空間スコープの変数\n */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eg_num1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eg_num2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。ここのstaticはリンゲージの指定だから関係ない\u003c/span\u003e\n\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eg_num3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。無名名前空間にあっても同じ。\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003ehoge\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enum1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。名前空間にあっても同じ。\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ。名前空間にあっても同じ。\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003estatic storageに該当する変数は上記に上げたものなどが該当する。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003emain\u003c/code\u003e関数から離脱した場合\u003ca href=\"https://cpprefjp.github.io/reference/cstdlib/exit.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::exit\u003c/code\u003e\u003c/a\u003eにその戻り値が渡されるが(return文省略時は0が戻り値)、\u003ccode\u003estd::exit\u003c/code\u003eの呼び出しのときに、static storageである変数の寿命が尽きる。この時static storageである変数がクラス型で破棄可能な場合デストラクタが呼び出される。なお\u003ca href=\"https://cpprefjp.github.io/reference/cstdlib/quick_exit.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::quick_exit\u003c/code\u003e\u003c/a\u003eが呼び出された場合はやはりstatic storageである変数の寿命が尽きるが、デストラクタは呼ばれない。\u003c/p\u003e\n\n\u003cp\u003eそのへんは\u003cbr\u003e\n\u003ca href=\"https://qiita.com/yumetodo/items/ba5bef7f64636ed2f439\" id=\"reference-3d122ded051816386fd5\"\u003e15秒で理解するmain関数からのreturnとexitとquick_exitとか\u003c/a\u003e\u003cbr\u003e\nを参照してほしい。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"thread-storage\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#thread-storage\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ethread storage\u003c/h2\u003e\n\n\u003cp\u003eこいつはC11/C++11で追加された。だから知らない人もいるかもしれない。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eスレッドローカルストレージ - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2010/10/threadlocal.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: どうも不思議なthread_localの仕様\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eあたりを参照してほしい。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;random\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003ethread_local\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e \u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eS\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003ethread_local\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eどこでもいいから\u003cstrong\u003e\u003ccode\u003ethread_local\u003c/code\u003eがくっついているやつ全部\u003c/strong\u003e。こいつらは断じてstatic storageではないから\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003estaticローカル変数で\u003ccode\u003ethread_local\u003c/code\u003eを使っている。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとかいう謎な文章を作り出さないように。\u003c/p\u003e\n\n\u003cp\u003eスレッドの生成時に作成され、スレッドの終了時に破棄される。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"automatic-storage\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#automatic-storage\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eautomatic storage\u003c/h2\u003e\n\n\u003cp\u003eまあふつう変数って言ったらこれだろ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_find_if_cond_f\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"nf\"\u003einferior_find_if\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これもautomatic storage\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これもautomatic storage\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einferior_find_if_cond_f\u003c/span\u003e \u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これもautomatic storage\u003c/span\u003e\n\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003einferior_find_if\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"dynamic-storage\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#dynamic-storage\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003edynamic storage\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"nf\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//until C++11\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++14\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++14\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//until C++11\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++14\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++14\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ealign_val_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//since C++17\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eC++17までで眺めると、C++には上記の\u003ccode\u003enew\u003c/code\u003e/\u003ccode\u003edelete\u003c/code\u003e演算子がある。サイズ付き、align、noexcept周りでごちゃごちゃしているが。\u003c/p\u003e\n\n\u003cp\u003edynamic storageとはこの\u003ccode\u003enew\u003c/code\u003e/\u003ccode\u003edelete\u003c/code\u003e演算子によって作成/破棄される領域をさす。\u003c/p\u003e\n\n\u003cp\u003e驚く人もいるかもしれないが、C++が\u003cstrong\u003eCから受け継いだ動的メモリ確保手段である\u003ca href=\"http://en.cppreference.com/w/cpp/memory/c/aligned_alloc\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::aligned_alloc\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e(C11/C++17)\u003cstrong\u003e,\u003ca href=\"http://en.cppreference.com/w/cpp/memory/c/calloc\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::calloc\u003c/code\u003e\u003c/a\u003e,\u003ca href=\"http://en.cppreference.com/w/cpp/memory/c/malloc\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::malloc\u003c/code\u003e\u003c/a\u003eおよび\u003ca href=\"http://en.cppreference.com/w/cpp/memory/c/realloc\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::realloc\u003c/code\u003e\u003c/a\u003e関数によって作成、\u003ca href=\"http://en.cppreference.com/w/cpp/memory/c/free\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::free\u003c/code\u003e\u003c/a\u003eによって破棄される領域はdynamic storageとは言わない\u003c/strong\u003e。これは単にC規格書で定義されているものについてC++規格書で改めて言及するのを避けただけではないかと私は思っている(C++規格書はC規格書を参照しているので)。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"処理系について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%87%A6%E7%90%86%E7%B3%BB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e処理系について\u003c/h1\u003e\n\n\u003cp\u003eここまでC++規格上の話をしてきたが、一旦離れて具体的な話をする。つまりはいくつかの処理系に偏った話になる。\u003c/p\u003e\n\n\u003cp\u003e規格の要件さえ満たせばどんな実装でもいいわけだが、もうすこし現実的な想定として、近代的なOSの上で動く、となると話が変わってくる。\u003c/p\u003e\n\n\u003cp\u003e近代的なOSはメモリーの管理を担当していて、ハードウェアと協調して\u003ca href=\"https://ja.wikipedia.org/wiki/%E4%BB%AE%E6%83%B3%E8%A8%98%E6%86%B6#.E4.BB.AE.E6.83.B3.E3.82.A2.E3.83.89.E3.83.AC.E3.82.B9.E7.A9.BA.E9.96.93.E7.AE.A1.E7.90.86\" rel=\"nofollow noopener\" target=\"_blank\"\u003e仮想アドレス空間管理\u003c/a\u003eを行っており、\u003cbr\u003e\nスタックオーバーフロー攻撃対策などのセキュリティ上の問題から\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E5%AE%9F%E8%A1%8C%E9%98%B2%E6%AD%A2\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDEP(データ実行防止)\u003c/a\u003eのような機能を実装していたり、\u003cbr\u003e\n\u003ca href=\"https://ja.wikipedia.org/wiki/Return-to-libc%E6%94%BB%E6%92%83\" rel=\"nofollow noopener\" target=\"_blank\"\u003ereturn-to-libc攻撃\u003c/a\u003e対策などのセキュリティ上の問題から\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E7%A9%BA%E9%96%93%E9%85%8D%E7%BD%AE%E3%81%AE%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E5%8C%96\" rel=\"nofollow noopener\" target=\"_blank\"\u003eASLR(アドレス空間配置ランダム化)\u003c/a\u003eを行ったりしている。\u003c/p\u003e\n\n\u003cp\u003eなにが言いたいかというとメモリーの割り当てや動的確保はOSの仕事だ、ということである。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://ja.wikipedia.org/w/index.php?curid=656535\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fja%2F5%2F55%2FVirtual_Memory_Ja_3.JPG?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=105590f531dd144d3ce4b7f64d8c4453\" alt=\"多重仮想記憶の概念図\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/ja/5/55/Virtual_Memory_Ja_3.JPG\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fja%2F5%2F55%2FVirtual_Memory_Ja_3.JPG?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ad01da9b00f279f629bd6e60eb93010b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nLicense: \u003ca href=\"https://ja.wikipedia.org/wiki/Wikipedia:Text_of_GNU_Free_Documentation_License\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGFDL\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行ファイルセクション\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%BB%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行ファイル:セクション\u003c/h1\u003e\n\n\u003cp\u003eこのあと述べるセグメントと混同しがちなのでここで。\u003c/p\u003e\n\n\u003cp\u003e実行ファイルのセクションとは、OSなどが実行可能なファイルのフォーマット(Windows:PE, Unix:elf)に含まれるもので、OSがそれを読み取って実行する際の必要なデータ(プログラム命令列、変数など)が区分されているものである\u003csup\u003e[要出典]\u003c/sup\u003e。\u003c/p\u003e\n\n\u003cp\u003eLinuxであれば、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ereadelf -SW \u0026lt;実行ファイル名\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとしてやると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eThere are 32 section headers, starting at offset 0x46f8:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\n  [ 1] .interp           PROGBITS        0000000000400270 000270 00001c 00   A  0   0  1\n  [ 2] .note.ABI-tag     NOTE            000000000040028c 00028c 000020 00   A  0   0  4\n  [ 3] .gnu.hash         GNU_HASH        00000000004002b0 0002b0 000044 00   A  4   0  8\n  [ 4] .dynsym           DYNSYM          00000000004002f8 0002f8 000348 18   A  5   1  8\n  [ 5] .dynstr           STRTAB          0000000000400640 000640 00045e 00   A  0   0  1\n  [ 6] .gnu.version      VERSYM          0000000000400a9e 000a9e 000046 02   A  4   0  2\n  [ 7] .gnu.version_r    VERNEED         0000000000400ae8 000ae8 000040 00   A  5   2  8\n  [ 8] .rela.dyn         RELA            0000000000400b28 000b28 000048 18   A  4   0  8\n  [ 9] .rela.plt         RELA            0000000000400b70 000b70 000228 18  AI  4  25  8\n  [10] .init             PROGBITS        0000000000400d98 000d98 00001a 00  AX  0   0  4\n  [11] .plt              PROGBITS        0000000000400dc0 000dc0 000180 10  AX  0   0 16\n  [12] .plt.got          PROGBITS        0000000000400f40 000f40 000008 00  AX  0   0  8\n  [13] .text             PROGBITS        0000000000400f50 000f50 001442 00  AX  0   0 16\n  [14] .fini             PROGBITS        0000000000402394 002394 000009 00  AX  0   0  4\n  [15] .rodata           PROGBITS        00000000004023a0 0023a0 00006b 00   A  0   0  4\n  [16] .eh_frame_hdr     PROGBITS        000000000040240c 00240c 00009c 00   A  0   0  4\n  [17] .eh_frame         PROGBITS        00000000004024a8 0024a8 0002b4 00   A  0   0  8\n  [18] .gcc_except_table PROGBITS        000000000040275c 00275c 0000e0 00   A  0   0  4\n  [19] .tbss             NOBITS          0000000000602db0 002db0 000004 00 WAT  0   0  4\n  [20] .init_array       INIT_ARRAY      0000000000602db0 002db0 000008 00  WA  0   0  8\n  [21] .fini_array       FINI_ARRAY      0000000000602db8 002db8 000008 00  WA  0   0  8\n  [22] .jcr              PROGBITS        0000000000602dc0 002dc0 000008 00  WA  0   0  8\n  [23] .dynamic          DYNAMIC         0000000000602dc8 002dc8 000230 10  WA  5   0  8\n  [24] .got              PROGBITS        0000000000602ff8 002ff8 000008 08  WA  0   0  8\n  [25] .got.plt          PROGBITS        0000000000603000 003000 0000d0 08  WA  0   0  8\n  [26] .data             PROGBITS        00000000006030d0 0030d0 00006c 00  WA  0   0 16\n  [27] .bss              NOBITS          0000000000603140 00313c 0000c8 00  WA  0   0 16\n  [28] .comment          PROGBITS        0000000000000000 00313c 000061 01  MS  0   0  1\n  [29] .shstrtab         STRTAB          0000000000000000 0045e0 000111 00      0   0  1\n  [30] .symtab           SYMTAB          0000000000000000 0031a0 000ae0 18     31  58  8\n  [31] .strtab           STRTAB          0000000000000000 003c80 000960 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのような情報が得られる。この\u003ccode\u003ereadelf\u003c/code\u003eの読み方については\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/7of9/items/ea97ee192cce927d1b27\" id=\"reference-9676ca650119f96e582d\"\u003elinux \u0026gt; .elfファイルのsection情報表示 \u0026gt; readelf -S [ファイル] - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://web.archive.org/web/20130102133222/http://mylinuxbook.com/readelf-command/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDive into ELF files using readelf command - MyLinuxBook | MyLinuxBook\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eを見てもらうとして、とにかくこの例では32個のセクションが存在している。\u003c/p\u003e\n\n\u003cp\u003eものすごく雑な説明をすると、\u003ccode\u003e.text\u003c/code\u003eにはプログラム命令列、\u003ccode\u003e.rdata\u003c/code\u003eには文字列リテラルと定数、\u003ccode\u003e.bss\u003c/code\u003eにはstatic storageの変数のうち初期値が明示的に0指定されている/無指定なために0になるものが含まれ、\u003ccode\u003e.data\u003c/code\u003eにはそれ以外のstatic storageの変数、\u003ccode\u003e.tbss\u003c/code\u003eにはthread storageの変数のうち前述の通り0になるもの、\u003ccode\u003e.tdata\u003c/code\u003eにはそれ以外のthread storageの変数が入る。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"実行時メモリー空間セグメント\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A1%8C%E6%99%82%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E7%A9%BA%E9%96%93%E3%82%BB%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実行時メモリー空間:セグメント\u003c/h1\u003e\n\n\u003cp\u003eセグメントというとFarポインタとNearポインタとかのセグメントを思い出す人もいるようだが、ここではメモリー空間の用途を\u003cstrong\u003e仮想的に\u003c/strong\u003e区分したものを指す。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://ja.wikipedia.org/w/index.php?curid=656535\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fja%2F5%2F55%2FVirtual_Memory_Ja_3.JPG?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=105590f531dd144d3ce4b7f64d8c4453\" alt=\"多重仮想記憶の概念図\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/ja/5/55/Virtual_Memory_Ja_3.JPG\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fja%2F5%2F55%2FVirtual_Memory_Ja_3.JPG?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ad01da9b00f279f629bd6e60eb93010b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\nLicense: \u003ca href=\"https://ja.wikipedia.org/wiki/Wikipedia:Text_of_GNU_Free_Documentation_License\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGFDL\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eセグメントは物理メモリー上の位置とその長さ、そして\u003cstrong\u003e権限\u003c/strong\u003eを持つ。権限というのは、例えば\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e実行可能か\u003c/li\u003e\n\u003cli\u003e書き込み可能か\u003c/li\u003e\n\u003cli\u003e読み出し可能か\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eと言った物がある。segmentation faultに代表されるようなハードウェア例外は、これを犯した時に発生する。\u003c/p\u003e\n\n\u003cp\u003eC/C++のプログラムのデータのうち何がどこに配置されるかは処理系に大きく依存するが、プログラム命令列は実行可能でかつ書き込み不可能なセグメントに置いてプログラム命令列を実行中に書き換えられないように\u003cstrong\u003e保護\u003c/strong\u003eしている可能性は十分にある、というかそうなっていると思うべきだ。\u003cbr\u003e\nまた定数の類でかつメモリー上に実体を持つものは書き込み不可能なセグメントに置かれている可能性が高い。つまり例えば文字列リテラルがそういうセグメントに配置された場合、それを書き換えようとすると、segmentation faultのようなハードウェア例外が飛ぶ可能性が高い。\u003c/p\u003e\n\n\u003cp\u003eそういえばARMは書き込み専用のセグメントを持っているみたいな話を聞いたことがあるんだが、本当だろうか？何に使うんだろうか。\u003c/p\u003e\n\n\u003cp\u003eこういうセグメントの管理をメモリー管理装置(\u003cstrong\u003eMMU\u003c/strong\u003e)と呼び、普通ハードウェア実装される。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cp\u003eC/C++でのstorageと実行ファイルのセクションやらメモリーセグメントは一対一対応するわけではないものの、なんとなく何がどこに配置されそうなのかイメージが湧いてきた。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY-SA 3.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://camo.qiitausercontent.com/c12f8f7e43ee01c8f4dedf0edd0f16d3f583be2d/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64302f43432d42592d53415f69636f6e2e737667\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://camo.qiitausercontent.com/c12f8f7e43ee01c8f4dedf0edd0f16d3f583be2d/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64302f43432d42592d53415f69636f6e2e737667\" alt=\"CC BY-SA 3.0\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# C++ Advent Calendar 2017\n\nこの記事はC++ Advent Calendar 2017 21日目の記事です\n\n[\u003c\u003c 20日目|C++テンプレートはコードジェネレータ](https://qiita.com/_EnumHack/items/bf6a2209174331b056c1) || [22日目|C++のAllocatorとアロケータを使うcontainer \u003e\u003e](https://qiita.com/gnaggnoyil/items/6c9a1cc0c023899ede34)\n\nC++17の話であふれるかと思いきや意外とそうでもなかったですね。話題が広い。\n\n遅刻してすみません。\n\n# はじめに\n\n動的とか静的とかわかんない、という話から変数のスコープとかの話に前になった。\n[C++のメモリーの気持ちを考えたくなるまとめ - Togetterまとめ](https://togetter.com/li/1153748)\n\nというわけでその辺の話をしたい。\n\n規格的に厳密な議論はこの記事では行わない。ボケボケとした脳みそでも40%くらい内容が理解できる記事を目指す。\n\nちなみにC言語には当てはまらない話もあるのでC言語について知りたい場合は自分で規格書を読むなり他のサイトに行ってほしい。\n\nまた特定のアーキテクチャに強く依存した話になるので、その辺を差し引いて読み進めてほしい。\n\n# C++規格:ストレージの種類\n\n\u003e[C++11: Syntax and Feature 3.7 ストレージ(storage duration)](http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#basic.start.term)\n\u003e規格上、ストレージという用語は正しくなく、ストレージの有効期間(storage duration)という用語が正しいのだが、本書では多くの箇所で、簡単にするため、単にストレージという言葉を使っている。\n\nという言葉に従いストレージという言葉をここでも使う。\n\nなおC言語にはストレージの有効期間という定義はなく、単にstorage-class-specifier(`typedef`,`extern`, `static`, `_Thread_local`(C11), `auto`, `register`)の定義のみある。\n\nちなみにこの項で述べるdynamic storageはSTLヘッダの`\u003cnew\u003e`が必要だが、これは[freestanding環境でも存在している](https://stackoverflow.com/questions/42441683/c-freestanding-features)ので、このあと述べる4つの区分は、処理系がOS上か否かにかかわらず存在すると思われる。\n\n## static storage\n\n```cpp\nstruct Foo {\n    int x;\n    int y;\n};\n/*\n * staticキーワードをつけて宣言したローカル変数\n */\nvoid f() {\n    static int n;//これ\n    static Foo foo;//これ。クラス型でもいい\n}\nnamespace detail {\n    template\u003ctypename T\u003e T\u0026 put_on_static_storage() {\n        static T storage;//これ。template関数内でも同じ。\n        return storage;\n    }\n}\n\n/*\n * staticキーワードをつけて宣言したデータメンバー\n */\nstruct Hoge {\n    static bool value;//これ\n};\n\n/*\n * thread_localをつけずに宣言した名前空間スコープの変数\n */\nint g_num1;//これ\nstatic int g_num2;//これ。ここのstaticはリンゲージの指定だから関係ない\nnamespace {\n    int g_num3;//これ。無名名前空間にあっても同じ。\n}\nnamespace hoge {\n    int num1;//これ。名前空間にあっても同じ。\n    static int num2;//これ。名前空間にあっても同じ。\n}\n```\n\nstatic storageに該当する変数は上記に上げたものなどが該当する。\n\n`main`関数から離脱した場合[`std::exit`](https://cpprefjp.github.io/reference/cstdlib/exit.html)にその戻り値が渡されるが(return文省略時は0が戻り値)、`std::exit`の呼び出しのときに、static storageである変数の寿命が尽きる。この時static storageである変数がクラス型で破棄可能な場合デストラクタが呼び出される。なお[`std::quick_exit`](https://cpprefjp.github.io/reference/cstdlib/quick_exit.html)が呼び出された場合はやはりstatic storageである変数の寿命が尽きるが、デストラクタは呼ばれない。\n\nそのへんは\n[15秒で理解するmain関数からのreturnとexitとquick_exitとか](https://qiita.com/yumetodo/items/ba5bef7f64636ed2f439)\nを参照してほしい。\n\n## thread storage\n\nこいつはC11/C++11で追加された。だから知らない人もいるかもしれない。\n\n- [スレッドローカルストレージ - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/lang/cpp11/thread_local_storage.html)\n- [本の虫: どうも不思議なthread_localの仕様](https://cpplover.blogspot.jp/2010/10/threadlocal.html)\n\nあたりを参照してほしい。\n\n```cpp\n#include \u003crandom\u003e\nthread_local std::mt19937 mt;\nstruct S\n{\n    static thread_local int x ; \n};\n```\n\nどこでもいいから**`thread_local`がくっついているやつ全部**。こいつらは断じてstatic storageではないから\n\n\u003estaticローカル変数で`thread_local`を使っている。\n\nとかいう謎な文章を作り出さないように。\n\nスレッドの生成時に作成され、スレッドの終了時に破棄される。\n\n## automatic storage\n\nまあふつう変数って言ったらこれだろ。\n\n```cpp\n#include \u003ciostream\u003e\nusing inferior_find_if_cond_f = bool (*)(int);\nstd::size_t inferior_find_if(\n    int* arr,//これもautomatic storage\n    std::size_t n,//これもautomatic storage\n    inferior_find_if_cond_f cond//これもautomatic storage\n){\n    std::size_t i;//これ\n    for(i = 0; i \u003c n; ++i) if(cond(arr[i])) return i;\n    return i;\n}\nint main(){\n    int arr[5] = { 3, 4, 1, 2, 5 };//これ\n    std::cout \u003c\u003c inferior_find_if(arr, 5, [](int n){ return n == 2; }) \u003c\u003c std::endl;\n}\n```\n\n## dynamic storage\n\n```cpp\nvoid* operator new(std::size_t);\nvoid* operator new(std::size_t, std::align_val_t);//since C++17\nvoid operator delete(void*);//until C++11\nvoid operator delete(void*) noexcept;//since C++14\nvoid operator delete(void*, std::size_t) noexcept;//since C++14\nvoid operator delete(void*, std::align_val_t) noexcept;//since C++17\nvoid operator delete(void*, std::size_t, std::align_val_t) noexcept;//since C++17\nvoid* operator new[](std::size_t);\nvoid* operator new[](std::size_t, std::align_val_t);//since C++17\nvoid operator delete[](void*);//until C++11\nvoid operator delete[](void*) noexcept;//since C++14\nvoid operator delete[](void*, std::size_t) noexcept;//since C++14\nvoid operator delete[](void*, std::align_val_t) noexcept;//since C++17\nvoid operator delete[](void*, std::size_t, std::align_val_t) noexcept;//since C++17\n```\n\nC++17までで眺めると、C++には上記の`new`/`delete`演算子がある。サイズ付き、align、noexcept周りでごちゃごちゃしているが。\n\ndynamic storageとはこの`new`/`delete`演算子によって作成/破棄される領域をさす。\n\n驚く人もいるかもしれないが、C++が**Cから受け継いだ動的メモリ確保手段である[`std::aligned_alloc`](http://en.cppreference.com/w/cpp/memory/c/aligned_alloc)**(C11/C++17)**,[`std::calloc`](http://en.cppreference.com/w/cpp/memory/c/calloc),[`std::malloc`](http://en.cppreference.com/w/cpp/memory/c/malloc)および[`std::realloc`](http://en.cppreference.com/w/cpp/memory/c/realloc)関数によって作成、[`std::free`](http://en.cppreference.com/w/cpp/memory/c/free)によって破棄される領域はdynamic storageとは言わない**。これは単にC規格書で定義されているものについてC++規格書で改めて言及するのを避けただけではないかと私は思っている(C++規格書はC規格書を参照しているので)。\n\n# 処理系について\n\nここまでC++規格上の話をしてきたが、一旦離れて具体的な話をする。つまりはいくつかの処理系に偏った話になる。\n\n規格の要件さえ満たせばどんな実装でもいいわけだが、もうすこし現実的な想定として、近代的なOSの上で動く、となると話が変わってくる。\n\n近代的なOSはメモリーの管理を担当していて、ハードウェアと協調して[仮想アドレス空間管理](https://ja.wikipedia.org/wiki/%E4%BB%AE%E6%83%B3%E8%A8%98%E6%86%B6#.E4.BB.AE.E6.83.B3.E3.82.A2.E3.83.89.E3.83.AC.E3.82.B9.E7.A9.BA.E9.96.93.E7.AE.A1.E7.90.86)を行っており、\nスタックオーバーフロー攻撃対策などのセキュリティ上の問題から[DEP(データ実行防止)](https://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E5%AE%9F%E8%A1%8C%E9%98%B2%E6%AD%A2)のような機能を実装していたり、\n[return-to-libc攻撃](https://ja.wikipedia.org/wiki/Return-to-libc%E6%94%BB%E6%92%83)対策などのセキュリティ上の問題から[ASLR(アドレス空間配置ランダム化)](https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E7%A9%BA%E9%96%93%E9%85%8D%E7%BD%AE%E3%81%AE%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E5%8C%96)を行ったりしている。\n\nなにが言いたいかというとメモリーの割り当てや動的確保はOSの仕事だ、ということである。\n\n[![多重仮想記憶の概念図](https://upload.wikimedia.org/wikipedia/ja/5/55/Virtual_Memory_Ja_3.JPG)](https://ja.wikipedia.org/w/index.php?curid=656535)\nLicense: [GFDL](https://ja.wikipedia.org/wiki/Wikipedia:Text_of_GNU_Free_Documentation_License)\n\n# 実行ファイル:セクション\n\nこのあと述べるセグメントと混同しがちなのでここで。\n\n実行ファイルのセクションとは、OSなどが実行可能なファイルのフォーマット(Windows:PE, Unix:elf)に含まれるもので、OSがそれを読み取って実行する際の必要なデータ(プログラム命令列、変数など)が区分されているものである\u003csup\u003e[要出典]\u003c/sup\u003e。\n\nLinuxであれば、\n\n```\nreadelf -SW \u003c実行ファイル名\u003e\n```\n\nとしてやると\n\n```\nThere are 32 section headers, starting at offset 0x46f8:\n\nSection Headers:\n  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0\n  [ 1] .interp           PROGBITS        0000000000400270 000270 00001c 00   A  0   0  1\n  [ 2] .note.ABI-tag     NOTE            000000000040028c 00028c 000020 00   A  0   0  4\n  [ 3] .gnu.hash         GNU_HASH        00000000004002b0 0002b0 000044 00   A  4   0  8\n  [ 4] .dynsym           DYNSYM          00000000004002f8 0002f8 000348 18   A  5   1  8\n  [ 5] .dynstr           STRTAB          0000000000400640 000640 00045e 00   A  0   0  1\n  [ 6] .gnu.version      VERSYM          0000000000400a9e 000a9e 000046 02   A  4   0  2\n  [ 7] .gnu.version_r    VERNEED         0000000000400ae8 000ae8 000040 00   A  5   2  8\n  [ 8] .rela.dyn         RELA            0000000000400b28 000b28 000048 18   A  4   0  8\n  [ 9] .rela.plt         RELA            0000000000400b70 000b70 000228 18  AI  4  25  8\n  [10] .init             PROGBITS        0000000000400d98 000d98 00001a 00  AX  0   0  4\n  [11] .plt              PROGBITS        0000000000400dc0 000dc0 000180 10  AX  0   0 16\n  [12] .plt.got          PROGBITS        0000000000400f40 000f40 000008 00  AX  0   0  8\n  [13] .text             PROGBITS        0000000000400f50 000f50 001442 00  AX  0   0 16\n  [14] .fini             PROGBITS        0000000000402394 002394 000009 00  AX  0   0  4\n  [15] .rodata           PROGBITS        00000000004023a0 0023a0 00006b 00   A  0   0  4\n  [16] .eh_frame_hdr     PROGBITS        000000000040240c 00240c 00009c 00   A  0   0  4\n  [17] .eh_frame         PROGBITS        00000000004024a8 0024a8 0002b4 00   A  0   0  8\n  [18] .gcc_except_table PROGBITS        000000000040275c 00275c 0000e0 00   A  0   0  4\n  [19] .tbss             NOBITS          0000000000602db0 002db0 000004 00 WAT  0   0  4\n  [20] .init_array       INIT_ARRAY      0000000000602db0 002db0 000008 00  WA  0   0  8\n  [21] .fini_array       FINI_ARRAY      0000000000602db8 002db8 000008 00  WA  0   0  8\n  [22] .jcr              PROGBITS        0000000000602dc0 002dc0 000008 00  WA  0   0  8\n  [23] .dynamic          DYNAMIC         0000000000602dc8 002dc8 000230 10  WA  5   0  8\n  [24] .got              PROGBITS        0000000000602ff8 002ff8 000008 08  WA  0   0  8\n  [25] .got.plt          PROGBITS        0000000000603000 003000 0000d0 08  WA  0   0  8\n  [26] .data             PROGBITS        00000000006030d0 0030d0 00006c 00  WA  0   0 16\n  [27] .bss              NOBITS          0000000000603140 00313c 0000c8 00  WA  0   0 16\n  [28] .comment          PROGBITS        0000000000000000 00313c 000061 01  MS  0   0  1\n  [29] .shstrtab         STRTAB          0000000000000000 0045e0 000111 00      0   0  1\n  [30] .symtab           SYMTAB          0000000000000000 0031a0 000ae0 18     31  58  8\n  [31] .strtab           STRTAB          0000000000000000 003c80 000960 00      0   0  1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n```\n\nのような情報が得られる。この`readelf`の読み方については\n\n- [linux \u003e .elfファイルのsection情報表示 \u003e readelf -S [ファイル] - Qiita](https://qiita.com/7of9/items/ea97ee192cce927d1b27)\n- [Dive into ELF files using readelf command - MyLinuxBook | MyLinuxBook](http://web.archive.org/web/20130102133222/http://mylinuxbook.com/readelf-command/)\n\nを見てもらうとして、とにかくこの例では32個のセクションが存在している。\n\nものすごく雑な説明をすると、`.text`にはプログラム命令列、`.rdata`には文字列リテラルと定数、`.bss`にはstatic storageの変数のうち初期値が明示的に0指定されている/無指定なために0になるものが含まれ、`.data`にはそれ以外のstatic storageの変数、`.tbss`にはthread storageの変数のうち前述の通り0になるもの、`.tdata`にはそれ以外のthread storageの変数が入る。\n\n# 実行時メモリー空間:セグメント\n\nセグメントというとFarポインタとNearポインタとかのセグメントを思い出す人もいるようだが、ここではメモリー空間の用途を**仮想的に**区分したものを指す。\n\n[![多重仮想記憶の概念図](https://upload.wikimedia.org/wikipedia/ja/5/55/Virtual_Memory_Ja_3.JPG)](https://ja.wikipedia.org/w/index.php?curid=656535)\nLicense: [GFDL](https://ja.wikipedia.org/wiki/Wikipedia:Text_of_GNU_Free_Documentation_License)\n\nセグメントは物理メモリー上の位置とその長さ、そして**権限**を持つ。権限というのは、例えば\n\n- 実行可能か\n- 書き込み可能か\n- 読み出し可能か\n\nと言った物がある。segmentation faultに代表されるようなハードウェア例外は、これを犯した時に発生する。\n\nC/C++のプログラムのデータのうち何がどこに配置されるかは処理系に大きく依存するが、プログラム命令列は実行可能でかつ書き込み不可能なセグメントに置いてプログラム命令列を実行中に書き換えられないように**保護**している可能性は十分にある、というかそうなっていると思うべきだ。\nまた定数の類でかつメモリー上に実体を持つものは書き込み不可能なセグメントに置かれている可能性が高い。つまり例えば文字列リテラルがそういうセグメントに配置された場合、それを書き換えようとすると、segmentation faultのようなハードウェア例外が飛ぶ可能性が高い。\n\nそういえばARMは書き込み専用のセグメントを持っているみたいな話を聞いたことがあるんだが、本当だろうか？何に使うんだろうか。\n\nこういうセグメントの管理をメモリー管理装置(**MMU**)と呼び、普通ハードウェア実装される。\n\n# まとめ\n\nC/C++でのstorageと実行ファイルのセクションやらメモリーセグメントは一対一対応するわけではないものの、なんとなく何がどこに配置されそうなのかイメージが湧いてきた。\n\n# License\n\n[CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/deed.ja)\n\n![CC BY-SA 3.0](https://camo.qiitausercontent.com/c12f8f7e43ee01c8f4dedf0edd0f16d3f583be2d/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64302f43432d42592d53415f69636f6e2e737667)\n","coediting":false,"comments_count":0,"created_at":"2017-12-22T21:04:19+09:00","group":null,"id":"067b2db266ae0779f030","likes_count":26,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"C++14","versions":[]},{"name":"C++17","versions":[]},{"name":"ELF","versions":[]}],"title":"C++のメモリーの話とストレージの有効期間の話をしようか","updated_at":"2019-05-11T00:25:57+09:00","url":"https://qiita.com/yumetodo/items/067b2db266ae0779f030","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null}]