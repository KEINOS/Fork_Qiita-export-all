[{"rendered_body":"\u003cp\u003eES6のconstを使い倒すレシピ2 - Object.freeze編 〜 JSおくのほそ道 #035 - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/hosomichi/items/84b05c1b0c09d26cd11e\" class=\"autolink\" id=\"reference-8b1181b46e33eb02311e\"\u003ehttp://qiita.com/hosomichi/items/84b05c1b0c09d26cd11e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという記事には\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" rel=\"nofollow noopener\" target=\"_blank\"\u003eMDNのObject.freeze\u003c/a\u003eページにもこのこのことに言及しており、子属性の凍結を汎用的に行えるdeepFreezeなる関数を提示してくれています。\u003cbr\u003e\nところがこのdeepFreezeは引数となるオブジェクト自体をfreezeして書き換えてしまい、新しいオブジェクトを返してくれるでもなかったので、ちょっと自分が使う用に書き換えてみました。一部lodashを使っています。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003edeepFreeze(カスタマイズ版)\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003elodash\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepFreeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eclone\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehasOwnProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisFrozen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepFreeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efreeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eという記述があります。ところが\u003c/p\u003e\n\n\u003cp\u003eLodash/Underscoreは必要ない（かも） - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\" class=\"autolink\" id=\"reference-1dd7f3086fa5512ca577\"\u003ehttp://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにもあるように、lodashはいらない気がします。無駄な依存はどんどん消しましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"_clone\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#_clone\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e_.clone()\u003c/h2\u003e\n\n\u003cp\u003ejavascript - ES6 equivalent to lodash _.clone (lodash failing to clone ES6 Proxy) - Stack Overflow\u003cbr\u003e\n\u003ca href=\"http://stackoverflow.com/questions/38215982/es6-equivalent-to-lodash-clone-lodash-failing-to-clone-es6-proxy\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://stackoverflow.com/questions/38215982/es6-equivalent-to-lodash-clone-lodash-failing-to-clone-es6-proxy\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eUsing ES6 Object.assign appears is a substitute for _.clone.\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ecopy\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eassign\u003c/span\u003e\u003cspan class=\"p\"\u003e({},\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// { a: 1 }\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eIt also appears to successfully clone a ES6 proxy, for which lodash failed and returned an \"undefined\" \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eというわけで、\u003ca href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow noopener\" target=\"_blank\"\u003eObject.assign\u003c/a\u003eを使えば置き換えられます。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50b8ade1f1099f230aed37c3fb53c121\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50b8ade1f1099f230aed37c3fb53c121\" alt=\"Chrome\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/chrome/chrome_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c7c957c5c58242330a02d17787c87f67 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0e6d594280162e15bf82847012fe3b07\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0e6d594280162e15bf82847012fe3b07\" alt=\"Firefox\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/firefox/firefox_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6fe22e4c02c6cf2e88004bdf846a0454 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4cc793c134b7286da1cf9363767ad5a9\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4cc793c134b7286da1cf9363767ad5a9\" alt=\"IE\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=d5d1b07f2ff1006b0abdbde38a808fd4 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f66969afbfd4ab1fdbc4d9df09eb5a72\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f66969afbfd4ab1fdbc4d9df09eb5a72\" alt=\"Edge\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/edge/edge_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=355fa0ead03dc836798af2f418a2f139 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=88cbf8ee8827c4976773453c8502d8ca\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=88cbf8ee8827c4976773453c8502d8ca\" alt=\"Opera\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/opera/opera_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5d7e1063d574c55865fc75adea15763e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=538dbfa1338ca70006c8e8fc1602446d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=538dbfa1338ca70006c8e8fc1602446d\" alt=\"Safari\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/safari/safari_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=da15d5914d79f5e841d3887f0cc1f5eb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e5✔\u003c/td\u003e\n\u003ctd\u003e4.0 ✔\u003c/td\u003e\n\u003ctd\u003e✗\u003c/td\u003e\n\u003ctd\u003e✔\u003c/td\u003e\n\u003ctd\u003e12\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e困るのがIE11で、IE11だけはまだ多くのところでサポートを切れないかと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/sindresorhus/object-assign\" rel=\"nofollow noopener\" target=\"_blank\"\u003esindresorhus/object-assign: ES2015 Object.assign() ponyfill\u003c/a\u003e\u003cbr\u003e\nにPolyfillがあり、MDNにも記載があります。のでそれを使う話になるかと思います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"_keys\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#_keys\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e_.keys\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\" class=\"autolink\"\u003ehttp://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eオブジェクト自身の列挙可能なプロパティの全ての名前を取得します。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e// Underscore/Lodash\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"na\"\u003eone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003etwo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003ethree\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// output: [\"one\", \"two\", \"three\"]\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Native\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"na\"\u003eone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003etwo\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"na\"\u003ethree\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eresult2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// output: [\"one\", \"two\", \"three\"]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50b8ade1f1099f230aed37c3fb53c121\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=50b8ade1f1099f230aed37c3fb53c121\" alt=\"Chrome\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/chrome/chrome_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fchrome%2Fchrome_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=c7c957c5c58242330a02d17787c87f67 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0e6d594280162e15bf82847012fe3b07\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0e6d594280162e15bf82847012fe3b07\" alt=\"Firefox\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/firefox/firefox_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Ffirefox%2Ffirefox_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=6fe22e4c02c6cf2e88004bdf846a0454 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4cc793c134b7286da1cf9363767ad5a9\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4cc793c134b7286da1cf9363767ad5a9\" alt=\"IE\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Farchive%2Finternet-explorer_9-11%2Finternet-explorer_9-11_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=d5d1b07f2ff1006b0abdbde38a808fd4 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f66969afbfd4ab1fdbc4d9df09eb5a72\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f66969afbfd4ab1fdbc4d9df09eb5a72\" alt=\"Edge\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/edge/edge_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fedge%2Fedge_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=355fa0ead03dc836798af2f418a2f139 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=88cbf8ee8827c4976773453c8502d8ca\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=88cbf8ee8827c4976773453c8502d8ca\" alt=\"Opera\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/opera/opera_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fopera%2Fopera_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5d7e1063d574c55865fc75adea15763e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003cth\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=538dbfa1338ca70006c8e8fc1602446d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=538dbfa1338ca70006c8e8fc1602446d\" alt=\"Safari\" data-canonical-src=\"https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/safari/safari_48x48.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.rawgit.com%2Falrra%2Fbrowser-logos%2F40.2.1%2Fsrc%2Fsafari%2Fsafari_48x48.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=da15d5914d79f5e841d3887f0cc1f5eb 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e5✔\u003c/td\u003e\n\u003ctd\u003e4.0 ✔\u003c/td\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003e✔\u003c/td\u003e\n\u003ctd\u003e12\u003c/td\u003e\n\u003ctd\u003e5\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003eIE11を無視すると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"js\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e//http://qiita.com/hosomichi/items/84b05c1b0c09d26cd11e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepFreeze\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eo\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eassign\u003c/span\u003e\u003cspan class=\"p\"\u003e({},\u003c/span\u003e \u003cspan class=\"nx\"\u003eo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eforEach\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehasOwnProperty\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisFrozen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepFreeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efreeze\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eoFrz\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのようになる。\u003c/p\u003e\n","body":"ES6のconstを使い倒すレシピ2 - Object.freeze編 〜 JSおくのほそ道 #035 - Qiita\nhttp://qiita.com/hosomichi/items/84b05c1b0c09d26cd11e\n\nという記事には\n\n\u003e[MDNのObject.freeze](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)ページにもこのこのことに言及しており、子属性の凍結を汎用的に行えるdeepFreezeなる関数を提示してくれています。\nところがこのdeepFreezeは引数となるオブジェクト自体をfreezeして書き換えてしまい、新しいオブジェクトを返してくれるでもなかったので、ちょっと自分が使う用に書き換えてみました。一部lodashを使っています。\n\n```js:deepFreeze(カスタマイズ版)\nconst _ = require('lodash');\n\nfunction deepFreeze(o) {\n  const oFrz = _.clone(o);\n  _.keys(oFrz).forEach(key =\u003e {\n    if (oFrz.hasOwnProperty(key) \u0026\u0026 (typeof oFrz[key] === \"object\") \u0026\u0026 !Object.isFrozen(oFrz[key])) {\n      oFrz[key] = deepFreeze(oFrz[key]);\n    }\n  });\n  return Object.freeze(oFrz);\n}\n```\n\nという記述があります。ところが\n\nLodash/Underscoreは必要ない（かも） - Qiita\nhttp://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\n\nにもあるように、lodashはいらない気がします。無駄な依存はどんどん消しましょう。\n\n## _.clone()\n\njavascript - ES6 equivalent to lodash _.clone (lodash failing to clone ES6 Proxy) - Stack Overflow\nhttp://stackoverflow.com/questions/38215982/es6-equivalent-to-lodash-clone-lodash-failing-to-clone-es6-proxy\n\n\u003eUsing ES6 Object.assign appears is a substitute for _.clone.\n\u003e\n```js\nvar obj = { a: 1 };\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n```\n\u003eIt also appears to successfully clone a ES6 proxy, for which lodash failed and returned an \"undefined\" \n\nというわけで、[Object.assign](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)を使えば置き換えられます。\n\n![Chrome](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/chrome/chrome_48x48.png) | ![Firefox](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/firefox/firefox_48x48.png) | ![IE](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) | ![Edge](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/edge/edge_48x48.png) | ![Opera](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/opera/opera_48x48.png) | ![Safari](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/safari/safari_48x48.png)\n--- | --- | --- | --- | --- | --- |\n5✔ | 4.0 ✔ | ✗ | ✔ | 12 | 5 |\n\n困るのがIE11で、IE11だけはまだ多くのところでサポートを切れないかと思います。\n\n[sindresorhus/object-assign: ES2015 Object.assign() ponyfill](https://github.com/sindresorhus/object-assign)\nにPolyfillがあり、MDNにも記載があります。のでそれを使う話になるかと思います。\n\n## _.keys\n\nhttp://qiita.com/ossan-engineer/items/ad5313d84da82c6ac421#_keys\n\n\u003eオブジェクト自身の列挙可能なプロパティの全ての名前を取得します。\n\u003e\n ```js\n// Underscore/Lodash\nvar result = _.keys({one: 1, two: 2, three: 3});\nconsole.log(result);\n// output: [\"one\", \"two\", \"three\"]\n// Native\nvar result2 = Object.keys({one: 1, two: 2, three: 3});\nconsole.log(result2);\n// output: [\"one\", \"two\", \"three\"]\n```\n\n\n![Chrome](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/chrome/chrome_48x48.png) | ![Firefox](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/firefox/firefox_48x48.png) | ![IE](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) | ![Edge](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/edge/edge_48x48.png) | ![Opera](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/opera/opera_48x48.png) | ![Safari](https://cdn.rawgit.com/alrra/browser-logos/40.2.1/src/safari/safari_48x48.png)\n--- | --- | --- | --- | --- | --- |\n5✔ | 4.0 ✔ | 9 | ✔ | 12 | 5 |\n\n# 結論\n\nIE11を無視すると\n\n```js\n//http://qiita.com/hosomichi/items/84b05c1b0c09d26cd11e\n//https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\nconst deepFreeze = (o) =\u003e {\n    const oFrz = Object.assign({}, o);\n    Object.keys(oFrz).forEach((key) =\u003e {\n        if (oFrz.hasOwnProperty(key) \u0026\u0026 (typeof oFrz[key] === \"object\") \u0026\u0026 !Object.isFrozen(oFrz[key])) {\n        oFrz[key] = deepFreeze(oFrz[key]);\n        }\n    });\n    return Object.freeze(oFrz);\n}\n```\n\nこのようになる。\n","coediting":false,"comments_count":0,"created_at":"2017-03-04T06:10:24+09:00","group":null,"id":"f3db17d488956d59a337","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"ECMAScript6","versions":[]},{"name":"lodash","versions":[]}],"title":"deepFreeze(カスタマイズ版)をlodash非依存にする","updated_at":"2017-03-04T06:16:57+09:00","url":"https://qiita.com/yumetodo/items/f3db17d488956d59a337","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"要約\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A6%81%E7%B4%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e要約\u003c/h1\u003e\n\n\u003cp\u003eCIサービスであるShippableにおいて、Build成果物を別のbranchのcommitしてSSH経由でpushすることに成功した\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"背景\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%83%8C%E6%99%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e背景\u003c/h1\u003e\n\n\u003cp\u003eJavaScript/CSSのminifyであったり、sass/lessのコンパイルやJavaScriptのトランスコンパイル、GitBook等によるHTMLの生成など、近代のWeb開発はビルドフェーズがついて回る。\u003c/p\u003e\n\n\u003cp\u003eところでGithubは、Github Pagesと呼ばれるサービスを提供している。これは\u003cbr\u003e\n\u003ccode\u003ehttps://github.com/\u0026lt;user or organization name\u0026gt;/\u0026lt;repo name\u0026gt;\u003c/code\u003e\u003cbr\u003e\nの\u003ccode\u003egh-pages\u003c/code\u003e branchもしくは\u003ccode\u003emaster\u003c/code\u003e branchの\u003ccode\u003e/docs\u003c/code\u003e ディレクトリを\u003cbr\u003e\n\u003ccode\u003ehttps://\u0026lt;user or organization name\u0026gt;/github.io/\u0026lt;repo name\u0026gt;\u003c/code\u003e\u003cbr\u003e\n(注:\u003ccode\u003e\u0026lt;repo name\u0026gt;\u003c/code\u003eが\u003ccode\u003e\u0026lt;user or organization name\u0026gt;.github.io\u003c/code\u003eの場合は\u003ccode\u003ehttps://\u0026lt;user or organization name\u0026gt;/github.io\u003c/code\u003e)\u003cbr\u003e\nにWeb ホスティングするサービスである。\u003c/p\u003e\n\n\u003cp\u003eここで、\u003ccode\u003emaster\u003c/code\u003e branchのビルド結果を\u003ccode\u003egh-pages\u003c/code\u003e branchにDeployしたいという需要がある。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"先行例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%88%E8%A1%8C%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e先行例\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"/azu\" class=\"user-mention js-hovercard\" title=\"azu\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"azu\"\u003e@azu\u003c/a\u003e 氏を中心として、JavaScriptの入門書をGitBookで作成しているプロジェクトがある。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/asciidwango/js-primer\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/asciidwango/js-primer\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここでは、CIサービスであるTravis CIを利用して\u003ccode\u003egh-pages\u003c/code\u003e branchへのdeployを行っている。\u003c/p\u003e\n\n\u003cp\u003e具体的には\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/alrra/travis-scripts\" rel=\"nofollow noopener\" target=\"_blank\"\u003etravis-scripts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/alrra/travis-after-all\" rel=\"nofollow noopener\" target=\"_blank\"\u003etravis-after-all\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eという2つのnpm packageを利用してSSH経由でDeployしている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問題点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題点\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"travis-ciを使いたくない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#travis-ci%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eTravis CIを使いたくない\u003c/h2\u003e\n\n\u003cp\u003e何かの都合ですでにTravis CIは使っていて別のCIでDeployしたいということはままある。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"deployのためにnpmの依存やnpm-scriptsを増やしたくない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#deploy%E3%81%AE%E3%81%9F%E3%82%81%E3%81%ABnpm%E3%81%AE%E4%BE%9D%E5%AD%98%E3%82%84npm-scripts%E3%82%92%E5%A2%97%E3%82%84%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDeployのためにnpmの依存やnpm scriptsを増やしたくない\u003c/h2\u003e\n\n\u003cp\u003e個人的にlocalで動かせないものはあんまnpm使いたくない。というかどうせshell scripts書く時点で環境依存なんだからわざわざnpm scriptsなんて挟まないでshell scriptsで完結したい\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"解決策\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解決策\u003c/h1\u003e\n\n\u003cp\u003eShippableを使ってみる\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://app.shippable.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://app.shippable.com/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eShippableもCIサービスで、docker image使えたりpipeline組めたりもするらしい。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"全体像\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e全体像\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"ci実行前\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ci%E5%AE%9F%E8%A1%8C%E5%89%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCI実行前\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003elocal machineで公開鍵と秘密鍵を生成\u003c/li\u003e\n\u003cli\u003eShippableに公開鍵と秘密鍵を登録\u003c/li\u003e\n\u003cli\u003eGithubに公開鍵を登録\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"ci実行時\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#ci%E5%AE%9F%E8%A1%8C%E6%99%82\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCI実行時\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCIによってtarget branchがclone/checkoutされる\u003c/li\u003e\n\u003cli\u003ebuildする\u003c/li\u003e\n\u003cli\u003eSSH keyをloadして別途Repogitryをclone、\u003ccode\u003egh-pages\u003c/code\u003eをcheckoutする\u003c/li\u003e\n\u003cli\u003e2の結果を3でcloneした場所にcopyする\u003c/li\u003e\n\u003cli\u003ecommitする。この時\u003ccode\u003e[skip ci]\u003c/code\u003eと記述しないとdeployした\u003ccode\u003egh-pages\u003c/code\u003eに対するCIが動いてしまう\u003c/li\u003e\n\u003cli\u003eSSH keyをloadしてpushする\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"詳細\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A9%B3%E7%B4%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e詳細\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"local-machineで公開鍵と秘密鍵を生成\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#local-machine%E3%81%A7%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%A8%E7%A7%98%E5%AF%86%E9%8D%B5%E3%82%92%E7%94%9F%E6%88%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003elocal machineで公開鍵と秘密鍵を生成\u003c/h2\u003e\n\n\u003cp\u003eこれは特に難しくない。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ssh\u003c/span\u003e\u003cspan class=\"nt\"\u003e-keygen\u003c/span\u003e \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e rsa \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e 4096 \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"yume-wikijp@live.jp\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e github_deploy_key \u003cspan class=\"nt\"\u003e-N\u003c/span\u003e \u003cspan class=\"s1\"\u003e''\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとするとカレントディレクトリに\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003egithub_deploy_key\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egithub_deploy_key.pub\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eの2つができる。\u003ccode\u003egithub_deploy_key\u003c/code\u003eは秘密鍵なので取り扱いには注意する。\u003c/p\u003e\n\n\u003cp\u003eWindowsの場合はmsys2を入れて\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$pacman\u003c/span\u003e \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e openssh\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとかすると、\u003ccode\u003essh-keygen\u003c/code\u003eが使える。\u003c/p\u003e\n\n\u003cp\u003eメールアドレス(\u003ccode\u003e-C\u003c/code\u003e)や鍵の名前(\u003ccode\u003e-f\u003c/code\u003e)は適宜読み替えて。\u003c/p\u003e\n\n\u003cp\u003e信頼できるエントロピー源のないVPSや一部の仮想環境では鍵を作らないほうがいい。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"shippableに公開鍵と秘密鍵を登録\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#shippable%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E3%81%A8%E7%A7%98%E5%AF%86%E9%8D%B5%E3%82%92%E7%99%BB%E9%8C%B2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eShippableに公開鍵と秘密鍵を登録\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eShippableのDashboardに行きsettingsを開く\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623533%2Fc9805c34-eba1-11e6-9f82-96db201c9b40.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=acd6de6d60ba4cc8ef2aa0f4741a6db8\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623533%2Fc9805c34-eba1-11e6-9f82-96db201c9b40.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=acd6de6d60ba4cc8ef2aa0f4741a6db8\" alt=\"Shippable's Dashboard\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623533/c9805c34-eba1-11e6-9f82-96db201c9b40.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623533%2Fc9805c34-eba1-11e6-9f82-96db201c9b40.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=25e0d4ccdae34cdd234562515bae418c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eIntegrations へ行く\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623552%2F55261ff8-eba2-11e6-9c3a-ce01c6d4c835.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9ac0b1e7b13141ff0768fda9376c8f0d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623552%2F55261ff8-eba2-11e6-9c3a-ce01c6d4c835.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9ac0b1e7b13141ff0768fda9376c8f0d\" alt=\"Shippable Option\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623552/55261ff8-eba2-11e6-9c3a-ce01c6d4c835.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623552%2F55261ff8-eba2-11e6-9c3a-ce01c6d4c835.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4f03a46f2f85a3cba1b323f06f7f3dea 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eAdd Integrationをクリック\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623556%2F76155774-eba2-11e6-80e6-a524790a1240.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=77b5ff56ee166d6e361a7e781d2dc382\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623556%2F76155774-eba2-11e6-80e6-a524790a1240.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=77b5ff56ee166d6e361a7e781d2dc382\" alt=\"Shippable integrations\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623556/76155774-eba2-11e6-80e6-a524790a1240.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623556%2F76155774-eba2-11e6-80e6-a524790a1240.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f45a2c060fe003ebed77a80cdabbf384 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eここではintegrationの名前は\u003ccode\u003eshippable2githubssh\u003c/code\u003eとした\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623559%2F915a3bbc-eba2-11e6-976b-2db54d923b27.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e3c57bcf14ff22992713cea7cfc0a0e3\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623559%2F915a3bbc-eba2-11e6-976b-2db54d923b27.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e3c57bcf14ff22992713cea7cfc0a0e3\" alt=\"Integration name\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623559/915a3bbc-eba2-11e6-976b-2db54d923b27.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623559%2F915a3bbc-eba2-11e6-976b-2db54d923b27.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=5060badc18a3c22888b005bd8355ef16 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eAccount Integrations -\u0026gt; Add integration\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623561%2Fae4d11ae-eba2-11e6-91d6-aed9a1208730.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6f29fa31b8aecbaf200bb07042e64a1e\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623561%2Fae4d11ae-eba2-11e6-91d6-aed9a1208730.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=6f29fa31b8aecbaf200bb07042e64a1e\" alt=\"Add integration\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623561/ae4d11ae-eba2-11e6-91d6-aed9a1208730.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623561%2Fae4d11ae-eba2-11e6-91d6-aed9a1208730.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=aa240045752f5515d7058b4e25af6fa7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eSSH Keyを選択\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623567%2Fd1e596ae-eba2-11e6-9c51-5f0f23c5b1e3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9354019d45c1fb3f58eeb1a1a63caa49\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623567%2Fd1e596ae-eba2-11e6-9c51-5f0f23c5b1e3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9354019d45c1fb3f58eeb1a1a63caa49\" alt=\"Account integration\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623567/d1e596ae-eba2-11e6-9c51-5f0f23c5b1e3.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623567%2Fd1e596ae-eba2-11e6-9c51-5f0f23c5b1e3.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=86486e9c132c2d392bb30ae4da49e731 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eここでは名前は\u003ccode\u003eshippable2githubssh\u003c/code\u003eにした。公開鍵と秘密鍵を貼り付ける。 Saveをクリックする。 \n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623570%2Ffa381fa0-eba2-11e6-8ff9-f585546fe1d7.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=511f5733dd1d72200e4e20e91738a4c4\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623570%2Ffa381fa0-eba2-11e6-8ff9-f585546fe1d7.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=511f5733dd1d72200e4e20e91738a4c4\" alt=\"Create SSH Key Integration\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623570/fa381fa0-eba2-11e6-8ff9-f585546fe1d7.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623570%2Ffa381fa0-eba2-11e6-8ff9-f585546fe1d7.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=af7b40c7f3a60f04a4524f60edf73bba 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eSaveをクリックする\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623575%2F2444a160-eba3-11e6-8964-72526ef233a4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=332f4b0825b9d6794dca757a3c6828f7\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623575%2F2444a160-eba3-11e6-8964-72526ef233a4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=332f4b0825b9d6794dca757a3c6828f7\" alt=\"Add Integration - Save\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623575/2444a160-eba3-11e6-8964-72526ef233a4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623575%2F2444a160-eba3-11e6-8964-72526ef233a4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=90e3911587a508ac88ec16a521743013 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e正しく登録されている\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623579%2F38f4921e-eba3-11e6-9835-de2ce9ede1b8.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=28ec8a5e42a3b0ba101abb8effc7cd60\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623579%2F38f4921e-eba3-11e6-9835-de2ce9ede1b8.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=28ec8a5e42a3b0ba101abb8effc7cd60\" alt=\"Subscription intehrations\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623579/38f4921e-eba3-11e6-9835-de2ce9ede1b8.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623579%2F38f4921e-eba3-11e6-9835-de2ce9ede1b8.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=fa99c5e1eb59c82be722ff1f0d3a0bd2 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"githubに公開鍵を登録\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#github%E3%81%AB%E5%85%AC%E9%96%8B%E9%8D%B5%E3%82%92%E7%99%BB%E9%8C%B2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGithubに公開鍵を登録\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGithubのRepogitryを開き、Setting -\u0026gt; Deploy keys -\u0026gt; Add deploy Keyをクリック\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623580%2F5b818936-eba3-11e6-8d88-d887a5f735e4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e6ad58d55090678c07039ab86c9e4d5d\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623580%2F5b818936-eba3-11e6-8d88-d887a5f735e4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=e6ad58d55090678c07039ab86c9e4d5d\" alt=\"Open Deploy keys\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623580/5b818936-eba3-11e6-8d88-d887a5f735e4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623580%2F5b818936-eba3-11e6-8d88-d887a5f735e4.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9d3423d46896090550d08da3eadb3136 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e公開鍵\u003c/strong\u003eを貼り付け、\u003ccode\u003eAllow write accsess\u003c/code\u003eにチェックを付ける。Add keyをクリック\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623589%2F7e36778e-eba3-11e6-9afb-d7e81893444f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=bed215dce7891b8d7c0b68d843caa421\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623589%2F7e36778e-eba3-11e6-9afb-d7e81893444f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=bed215dce7891b8d7c0b68d843caa421\" alt=\"Register Deploy key\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623589/7e36778e-eba3-11e6-9afb-d7e81893444f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623589%2F7e36778e-eba3-11e6-9afb-d7e81893444f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=50c288b2240bc2bcf490f1029e3be448 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e正しく登録された。\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623593%2F9bf487d4-eba3-11e6-83d1-9ae7d7a2b7d0.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4d70a6fad85a7daee7771874ac2f7996\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623593%2F9bf487d4-eba3-11e6-83d1-9ae7d7a2b7d0.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4d70a6fad85a7daee7771874ac2f7996\" alt=\"Registerd Deploy key\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/22623593/9bf487d4-eba3-11e6-83d1-9ae7d7a2b7d0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F22623593%2F9bf487d4-eba3-11e6-83d1-9ae7d7a2b7d0.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ccf9f2c27dbd04677b348232555249a1 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ymlを書く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#yml%E3%82%92%E6%9B%B8%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eymlを書く\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"intagrationを有効にする\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#intagration%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eintagrationを有効にする\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eshippable.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"na\"\u003eintegrations\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003eintegrationName\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eshippable2githubssh\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003essh-key\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eを追記する。すると実行時に\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ls\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /tmp/ssh\ntotal 12\n\u003cspan class=\"nt\"\u003e-rw-------\u003c/span\u003e 1 root root 1680 Feb 10 23:53 00_sub\n\u003cspan class=\"nt\"\u003e-rw-------\u003c/span\u003e 1 root root 1676 Feb 10 23:53 01_deploy\n\u003cspan class=\"nt\"\u003e-rw-------\u003c/span\u003e 1 root root 3243 Feb 10 23:53 shippable2githubssh\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSSH keyが\u003ccode\u003e/tmp/ssh\u003c/code\u003eにある。\u003c/p\u003e\n\n\u003cp\u003e注意点として、\u003cstrong\u003e\u003ca href=\"https://github.com/Shippable/support/issues/3347#issuecomment-277561276\" rel=\"nofollow noopener\" target=\"_blank\"\u003e公開レポジトリの場合、Pull Requestのビルド時にはintagrationは無効化される\u003c/a\u003e\u003c/strong\u003e。じゃないとだれでもDeployをできることになっちゃうしね。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"deployの条件\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#deploy%E3%81%AE%E6%9D%A1%E4%BB%B6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDeployの条件\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eビルドが成功\u003c/li\u003e\n\u003cli\u003e任意のbranch(今回は\u003ccode\u003eyumetodo/master\u003c/code\u003eというbranch)に対する実行時\u003c/li\u003e\n\u003cli\u003ePull Request Buildではない(上述のとおり)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eをすべて満たしたとき、Deployを実行するには\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"yaml\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eshippable.yml\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eon_success\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eif [ \"$BRANCH\" == \"yumetodo/master\" ] \u0026amp;\u0026amp; [ \"${IS_PULL_REQUEST}\" != \"true\" ]; then ./tools/shippable_deploy.sh; fi\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのようにする。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eBRANCH\u003c/code\u003eや\u003ccode\u003eIS_PULL_REQUEST\u003c/code\u003eはShippableで定義されている環境変数で、一覧は\u003cbr\u003e\n\u003ca href=\"http://docs.shippable.com/ci/advancedOptions/environmentVariables/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eUsing Environment Variables for Continuous Integration - Shippable Docs\u003c/a\u003e\u003cbr\u003e\nで見られる。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"deploy-script\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#deploy-script\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eDeploy Script\u003c/h2\u003e\n\n\u003cp\u003eymlにDeployの手順を全部書くのはだるいので普通にshell Scriptを書いて呼び出す。\u003c/p\u003e\n\n\u003cp\u003e先行例で上げたjs-primerの場合は\u003ccode\u003egh-pages\u003c/code\u003eのcommitを全部消してからcommitしているが、今回はそうせずに普通にcommitする。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e./tools/shippable_deploy.sh\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/bash -eu\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"ll /tmp/ssh\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /tmp/ssh\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"ll /dev/shm\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /dev/shm\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"clone taget repogitry...\"\u003c/span\u003e\nssh-agent bash \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ssh-add /tmp/ssh/shippable2githubssh; git clone -b gh-pages git@github.com:yumetodo/Hatena-Blog-Themes.git /dev/shm/Hatena-Blog-Themes'\u003c/span\u003e\nbash \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s1\"\u003e'cd /dev/shm/Hatena-Blog-Themes; git status;'\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"nv\"\u003e$SHIPPABLE_BUILD_DIR\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"copy minified result...\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e bin /dev/shm/Hatena-Blog-Themes\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /dev/shm/Hatena-Blog-Themes\ngit config user.name \u003cspan class=\"s2\"\u003e\"yumetodo\"\u003c/span\u003e\ngit config user.email \u003cspan class=\"s2\"\u003e\"yume-wikijp@live.jp\"\u003c/span\u003e\ngit config push.default simple\ngit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"commit changes...\"\u003c/span\u003e\ngit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Deploy minified css/js [skip ci]\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e:\n\u003cspan class=\"nv\"\u003eerrno\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$?\u003c/span\u003e \u003cspan class=\"c\"\u003e# bind error code\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$errno\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e 0 \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"git commit exit with \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eerrno\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e0 \u003cspan class=\"c\"\u003e# nothing to commit means nothing to deploy.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\n\n\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"push commit...\"\u003c/span\u003e\nssh-agent bash \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s1\"\u003e'ssh-add /tmp/ssh/shippable2githubssh; git push'\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"finish deploy.\"\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"nv\"\u003e$SHIPPABLE_BUILD_DIR\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまあ特に難しいことはしていない。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e bin /dev/shm/Hatena-Blog-Themes\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eの部分がビルド成果物をdeploy用にcloneしたディレクトリへコピーしている部分だ。適宜書き換えれば良い。\u003c/p\u003e\n\n\u003cp\u003eSSH keyを呼び出すのは\u003ccode\u003essh-add\u003c/code\u003eコマンドを使っている。\u003cbr\u003e\nssh-agentについては\u003cbr\u003e\n\u003ca href=\"http://qiita.com/isaoshimizu/items/84ac5a0b1d42b9d355cf\" id=\"reference-8cc392acdeb463f3787b\"\u003essh-agentの使い方 - Qiita\u003c/a\u003e\u003cbr\u003e\nが詳しい。\u003c/p\u003e\n\n\u003cp\u003e当たり前だが、SSH Keyが必要なのはcloneする時とpushする時のみで、ほかは必要ない。\u003c/p\u003e\n\n\u003cp\u003e冒頭の\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/bash -eu\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eが大事で、\u003ccode\u003e-eu\u003c/code\u003eがないとscriptの途中でコケたときにexit codeがscript呼び出し側に伝わらないだけではなく、実行が中断されない。この辺については\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/youcune/items/fcfb4ad3d7c1edf9dc96\" id=\"reference-e33c31adfd2b515135b8\"\u003eシェルスクリプトを書くときはset -euしておく - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/ngyuki/items/aefd47700a9522fada75\" id=\"reference-b29c87cbd0bce72bb7e9\"\u003e\u003ccode\u003eset -e\u003c/code\u003e しているときにコマンドの戻り値を得る - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが詳しい。\u003c/p\u003e\n\n\u003cp\u003ecommit logを消してからcommitとしてない都合上、commitするような変更がない可能性がある。そのときにエラーで終了されるとShippableの実行ステータスが失敗になってしまうので握りつぶす必要がある。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Deploy minified css/js [skip ci]\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e:\n\u003cspan class=\"nv\"\u003eerrno\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$?\u003c/span\u003e \u003cspan class=\"c\"\u003e# bind error code\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$errno\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e 0 \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"git commit exit with \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eerrno\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e0 \u003cspan class=\"c\"\u003e# nothing to commit means nothing to deploy.\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまたcommit messageには忘れずに\u003ccode\u003e[skip ci]\u003c/code\u003eを書いておきましょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"できたもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたもの\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/Hatena-Blog-Themes\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/Hatena-Blog-Themes\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eほい。このレポジトリがなんなのかについては\u003cbr\u003e\n\u003ca href=\"http://yumetodo.hateblo.jp/entry/2017/02/12/165033\" rel=\"nofollow noopener\" target=\"_blank\"\u003eFC2からはてなブログに移行した - yumetodoの旅とプログラミングとかの記録\u003c/a\u003e\u003cbr\u003e\nを参照。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"最後に\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e最後に\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e公開レポジトリの場合、Pull Requestのビルド時にはintagrationは無効化される\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eというのを知らずになんでやーーーとなった挙句、Shippableのサポートに泣きついたのはここだけの秘密\u003cbr\u003e\n\u003ca href=\"https://github.com/Shippable/support/issues/3347\" rel=\"nofollow noopener\" target=\"_blank\"\u003efound SSH Key integration but SSH key not found in /tmp/ssh · Issue #3347 · Shippable/support\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/Shippable/docsv2/pull/716\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/Shippable/docsv2/pull/716\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSSH key integrationを使うときに新たにkeyの場所を取れる環境変数が追加された。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# 要約\n\nCIサービスであるShippableにおいて、Build成果物を別のbranchのcommitしてSSH経由でpushすることに成功した\n\n# 背景\n\nJavaScript/CSSのminifyであったり、sass/lessのコンパイルやJavaScriptのトランスコンパイル、GitBook等によるHTMLの生成など、近代のWeb開発はビルドフェーズがついて回る。\n\nところでGithubは、Github Pagesと呼ばれるサービスを提供している。これは\n``https://github.com/\u003cuser or organization name\u003e/\u003crepo name\u003e``\nの``gh-pages`` branchもしくは``master`` branchの``/docs`` ディレクトリを\n``https://\u003cuser or organization name\u003e/github.io/\u003crepo name\u003e``\n(注:``\u003crepo name\u003e``が``\u003cuser or organization name\u003e.github.io``の場合は``https://\u003cuser or organization name\u003e/github.io``)\nにWeb ホスティングするサービスである。\n\nここで、``master`` branchのビルド結果を``gh-pages`` branchにDeployしたいという需要がある。\n\n# 先行例\n\n@azu 氏を中心として、JavaScriptの入門書をGitBookで作成しているプロジェクトがある。\n\nhttps://github.com/asciidwango/js-primer\n\nここでは、CIサービスであるTravis CIを利用して``gh-pages`` branchへのdeployを行っている。\n\n具体的には\n\n- [travis-scripts](https://github.com/alrra/travis-scripts)\n- [travis-after-all](https://github.com/alrra/travis-after-all)\n\nという2つのnpm packageを利用してSSH経由でDeployしている。\n\n# 問題点\n\n## Travis CIを使いたくない\n\n何かの都合ですでにTravis CIは使っていて別のCIでDeployしたいということはままある。\n\n## Deployのためにnpmの依存やnpm scriptsを増やしたくない\n\n個人的にlocalで動かせないものはあんまnpm使いたくない。というかどうせshell scripts書く時点で環境依存なんだからわざわざnpm scriptsなんて挟まないでshell scriptsで完結したい\n\n# 解決策\n\nShippableを使ってみる\n\nhttps://app.shippable.com/\n\nShippableもCIサービスで、docker image使えたりpipeline組めたりもするらしい。\n\n## 全体像\n### CI実行前\n1. local machineで公開鍵と秘密鍵を生成\n2. Shippableに公開鍵と秘密鍵を登録\n3. Githubに公開鍵を登録\n\n### CI実行時\n1. CIによってtarget branchがclone/checkoutされる\n2. buildする\n3. SSH keyをloadして別途Repogitryをclone、``gh-pages``をcheckoutする\n4. 2の結果を3でcloneした場所にcopyする\n5. commitする。この時``[skip ci]``と記述しないとdeployした``gh-pages``に対するCIが動いてしまう\n6. SSH keyをloadしてpushする\n\n# 詳細\n\n## local machineで公開鍵と秘密鍵を生成  \n\nこれは特に難しくない。\n\n```bash\n$ssh-keygen -t rsa -b 4096 -C \"yume-wikijp@live.jp\" -f github_deploy_key -N ''\n```\n\nとするとカレントディレクトリに\n\n- ``github_deploy_key``\n- ``github_deploy_key.pub``\n\nの2つができる。``github_deploy_key``は秘密鍵なので取り扱いには注意する。\n\nWindowsの場合はmsys2を入れて\n\n```bash\n$pacman -S openssh\n```\n\nとかすると、``ssh-keygen``が使える。\n\nメールアドレス(``-C``)や鍵の名前(``-f``)は適宜読み替えて。\n\n信頼できるエントロピー源のないVPSや一部の仮想環境では鍵を作らないほうがいい。\n\n## Shippableに公開鍵と秘密鍵を登録\n\n1. ShippableのDashboardに行きsettingsを開く  \n![Shippable's Dashboard](https://cloud.githubusercontent.com/assets/10869046/22623533/c9805c34-eba1-11e6-9f82-96db201c9b40.png)\n2. Integrations へ行く  \n![Shippable Option](https://cloud.githubusercontent.com/assets/10869046/22623552/55261ff8-eba2-11e6-9c3a-ce01c6d4c835.png)\n3. Add Integrationをクリック  \n![Shippable integrations](https://cloud.githubusercontent.com/assets/10869046/22623556/76155774-eba2-11e6-80e6-a524790a1240.png)\n4. ここではintegrationの名前は``shippable2githubssh``とした  \n![Integration name](https://cloud.githubusercontent.com/assets/10869046/22623559/915a3bbc-eba2-11e6-976b-2db54d923b27.png)\n5. Account Integrations -\u003e Add integration  \n![Add integration](https://cloud.githubusercontent.com/assets/10869046/22623561/ae4d11ae-eba2-11e6-91d6-aed9a1208730.png)\n6. SSH Keyを選択  \n![Account integration](https://cloud.githubusercontent.com/assets/10869046/22623567/d1e596ae-eba2-11e6-9c51-5f0f23c5b1e3.png)\n7. ここでは名前は``shippable2githubssh``にした。公開鍵と秘密鍵を貼り付ける。 Saveをクリックする。 \n![Create SSH Key Integration](https://cloud.githubusercontent.com/assets/10869046/22623570/fa381fa0-eba2-11e6-8ff9-f585546fe1d7.png)\n8. Saveをクリックする  \n![Add Integration - Save](https://cloud.githubusercontent.com/assets/10869046/22623575/2444a160-eba3-11e6-8964-72526ef233a4.png)\n9. 正しく登録されている  \n![Subscription intehrations](https://cloud.githubusercontent.com/assets/10869046/22623579/38f4921e-eba3-11e6-9835-de2ce9ede1b8.png)\n\n## Githubに公開鍵を登録\n\n1. GithubのRepogitryを開き、Setting -\u003e Deploy keys -\u003e Add deploy Keyをクリック  \n![Open Deploy keys](https://cloud.githubusercontent.com/assets/10869046/22623580/5b818936-eba3-11e6-8d88-d887a5f735e4.png)\n2. **公開鍵**を貼り付け、``Allow write accsess``にチェックを付ける。Add keyをクリック  \n![Register Deploy key](https://cloud.githubusercontent.com/assets/10869046/22623589/7e36778e-eba3-11e6-9afb-d7e81893444f.png)\n3. 正しく登録された。  \n![Registerd Deploy key](https://cloud.githubusercontent.com/assets/10869046/22623593/9bf487d4-eba3-11e6-83d1-9ae7d7a2b7d0.png)\n\n## ymlを書く\n\n### intagrationを有効にする\n\n```yaml:shippable.yml\nintegrations:\n  key:\n    - integrationName: shippable2githubssh\n      type: ssh-key\n```\n\nを追記する。すると実行時に\n\n```bash\n$ls -l /tmp/ssh\ntotal 12\n-rw------- 1 root root 1680 Feb 10 23:53 00_sub\n-rw------- 1 root root 1676 Feb 10 23:53 01_deploy\n-rw------- 1 root root 3243 Feb 10 23:53 shippable2githubssh\n```\n\nSSH keyが``/tmp/ssh``にある。\n\n注意点として、**[公開レポジトリの場合、Pull Requestのビルド時にはintagrationは無効化される](https://github.com/Shippable/support/issues/3347#issuecomment-277561276)**。じゃないとだれでもDeployをできることになっちゃうしね。\n\n### Deployの条件\n\n- ビルドが成功\n- 任意のbranch(今回は``yumetodo/master``というbranch)に対する実行時\n- Pull Request Buildではない(上述のとおり)\n\nをすべて満たしたとき、Deployを実行するには\n\n```yaml:shippable.yml\nbuild:\n  on_success:\n    - if [ \"$BRANCH\" == \"yumetodo/master\" ] \u0026\u0026 [ \"${IS_PULL_REQUEST}\" != \"true\" ]; then ./tools/shippable_deploy.sh; fi\n```\n\nのようにする。\n\n``BRANCH``や``IS_PULL_REQUEST``はShippableで定義されている環境変数で、一覧は\n[Using Environment Variables for Continuous Integration - Shippable Docs](http://docs.shippable.com/ci/advancedOptions/environmentVariables/)\nで見られる。\n\n## Deploy Script\n\nymlにDeployの手順を全部書くのはだるいので普通にshell Scriptを書いて呼び出す。\n\n先行例で上げたjs-primerの場合は``gh-pages``のcommitを全部消してからcommitしているが、今回はそうせずに普通にcommitする。\n\n```bash:./tools/shippable_deploy.sh\n#!/bin/bash -eu\necho \"ll /tmp/ssh\"\nls -l /tmp/ssh\necho \"ll /dev/shm\"\nls -l /dev/shm\n\necho \"clone taget repogitry...\"\nssh-agent bash -c 'ssh-add /tmp/ssh/shippable2githubssh; git clone -b gh-pages git@github.com:yumetodo/Hatena-Blog-Themes.git /dev/shm/Hatena-Blog-Themes'\nbash -c 'cd /dev/shm/Hatena-Blog-Themes; git status;'\ncd $SHIPPABLE_BUILD_DIR\n\necho \"copy minified result...\"\ncp -r bin /dev/shm/Hatena-Blog-Themes\ncd /dev/shm/Hatena-Blog-Themes\ngit config user.name \"yumetodo\"\ngit config user.email \"yume-wikijp@live.jp\"\ngit config push.default simple\ngit add .\n\necho \"commit changes...\"\ngit commit -m \"Deploy minified css/js [skip ci]\" \u0026\u0026:\nerrno=$? # bind error code\nif [ $errno != 0 ]; then\n    echo \"git commit exit with ${errno}\"\n    exit 0 # nothing to commit means nothing to deploy.\nfi\n\necho \"push commit...\"\nssh-agent bash -c 'ssh-add /tmp/ssh/shippable2githubssh; git push'\n\necho \"finish deploy.\"\ncd $SHIPPABLE_BUILD_DIR\n```\n\nまあ特に難しいことはしていない。\n\n```bash\ncp -r bin /dev/shm/Hatena-Blog-Themes\n```\n\nの部分がビルド成果物をdeploy用にcloneしたディレクトリへコピーしている部分だ。適宜書き換えれば良い。\n\nSSH keyを呼び出すのは``ssh-add``コマンドを使っている。\nssh-agentについては\n[ssh-agentの使い方 - Qiita](http://qiita.com/isaoshimizu/items/84ac5a0b1d42b9d355cf)\nが詳しい。\n\n当たり前だが、SSH Keyが必要なのはcloneする時とpushする時のみで、ほかは必要ない。\n\n冒頭の\n\n```bash\n#!/bin/bash -eu\n```\n\nが大事で、``-eu``がないとscriptの途中でコケたときにexit codeがscript呼び出し側に伝わらないだけではなく、実行が中断されない。この辺については\n\n- [シェルスクリプトを書くときはset -euしておく - Qiita](http://qiita.com/youcune/items/fcfb4ad3d7c1edf9dc96)\n- [`set -e` しているときにコマンドの戻り値を得る - Qiita](http://qiita.com/ngyuki/items/aefd47700a9522fada75)\n\nが詳しい。\n\ncommit logを消してからcommitとしてない都合上、commitするような変更がない可能性がある。そのときにエラーで終了されるとShippableの実行ステータスが失敗になってしまうので握りつぶす必要がある。\n\n```bash\ngit commit -m \"Deploy minified css/js [skip ci]\" \u0026\u0026:\nerrno=$? # bind error code\nif [ $errno != 0 ]; then\n    echo \"git commit exit with ${errno}\"\n    exit 0 # nothing to commit means nothing to deploy.\nfi\n```\n\nまたcommit messageには忘れずに``[skip ci]``を書いておきましょう。\n\n# できたもの\n\nhttps://github.com/yumetodo/Hatena-Blog-Themes\n\nほい。このレポジトリがなんなのかについては\n[FC2からはてなブログに移行した - yumetodoの旅とプログラミングとかの記録](http://yumetodo.hateblo.jp/entry/2017/02/12/165033)\nを参照。\n\n# 最後に\n\n\u003e公開レポジトリの場合、Pull Requestのビルド時にはintagrationは無効化される\n\nというのを知らずになんでやーーーとなった挙句、Shippableのサポートに泣きついたのはここだけの秘密\n[found SSH Key integration but SSH key not found in /tmp/ssh · Issue #3347 · Shippable/support](https://github.com/Shippable/support/issues/3347)\n\n# 追記\n\nhttps://github.com/Shippable/docsv2/pull/716\n\nSSH key integrationを使うときに新たにkeyの場所を取れる環境変数が追加された。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":0,"created_at":"2017-02-18T09:32:47+09:00","group":null,"id":"f7a97b4ec724403e7d3a","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"SSH","versions":[]},{"name":"CI","versions":[]},{"name":"shippable","versions":[]}],"title":"Shippableでgh-pagesにdeploy","updated_at":"2019-04-03T14:04:07+09:00","url":"https://qiita.com/yumetodo/items/f7a97b4ec724403e7d3a","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"きっかけ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eきっかけ\u003c/h1\u003e\n\n\u003cp\u003eサークルの後輩にHTMLを教えるためにpureHTMLでなんか作れ、という課題を出した。その時の条件として言ったのは\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHTML5で書け\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eul\u003c/code\u003e, \u003ccode\u003eli\u003c/code\u003e要素を使え\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esection\u003c/code\u003e, \u003ccode\u003enav\u003c/code\u003e要素を使え\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eh1\u003c/code\u003e～\u003ccode\u003eh6\u003c/code\u003eタグのいずれかを使え\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eだ。そして出来上がったのがこちらだ。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e機械音痴非プログラマーがhtml5の練習で作ったサイトです。\u003cbr\u003e見納めください。 \u003ca href=\"https://t.co/wPAvX7AzUD\" rel=\"nofollow noopener\" target=\"_blank\"\u003epic.twitter.com/wPAvX7AzUD\u003c/a\u003e\u003c/p\u003e— ヒエヒエハイム (@celluloce24) \u003ca href=\"https://twitter.com/celluloce24/status/826723150939316224\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://pbs.twimg.com/media/C3kcEbkUcAAsbkn.jpg\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://pbs.twimg.com/media/C3kcEbkUcAAsbkn.jpg\" alt=\"成果物\" data-canonical-src=\"https://pbs.twimg.com/media/C3kcEbkUcAAsbkn.jpg\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e・・・内容に関しては突っ込むまい。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e実はHTMLのみ、CSS禁止、スタイル系attribute禁止縛りで課題出したの私なんです \u003ca href=\"https://t.co/oD6XRkU5o1\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/oD6XRkU5o1\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826731109400535040\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"tlの反応\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#tl%E3%81%AE%E5%8F%8D%E5%BF%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eTLの反応\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"canvas\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#canvas\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ecanvas\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eなるほどcanvasを使うしかない \u003ca href=\"https://t.co/9krauG5vkW\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/9krauG5vkW\u003c/a\u003e\u003c/p\u003e— 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/826733161153376258\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eあー、そういえばHTML5で\u003ccode\u003ecanvas\u003c/code\u003eなんでものが追加されたのでした。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eJavaScriptの使用を禁止する必要がありますね。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"flash\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#flash\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eFlash\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eなるほどFlash \u003ca href=\"https://t.co/KqQkB2lUDL\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/KqQkB2lUDL\u003c/a\u003e\u003c/p\u003e— Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826735813031456768\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eあのniconico動画ですらHTML5化しようとしているのに今更なんでFlashを教えるんだい？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFlashの使用を禁止する必要がありますね。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"svg\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#svg\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSVG\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003esvgがHTMLの範囲内、あるいは言語ではなくイメージフォーマットとみなされるかがポイント？\u003ca href=\"https://t.co/lUTHACRJTA\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/lUTHACRJTA\u003c/a\u003e\u003c/p\u003e— yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826737608310951936\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eわかった！！svgだね！！！！！ \u003ca href=\"https://t.co/IMLp4RJSqq\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/IMLp4RJSqq\u003c/a\u003e\u003c/p\u003e— Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826736435726159872\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSVGについては以前\u003cbr\u003e\n非プログラマーのためのデジタル画像入門講座 - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/4d19f27ce0b2c7cfcace\" class=\"autolink\" id=\"reference-5ed07577bc00bc3973bd\"\u003ehttp://qiita.com/yumetodo/items/4d19f27ce0b2c7cfcace\u003c/a\u003e\u003cbr\u003e\nなんていう記事でちらっと触れましたが、\u003cbr\u003e\nSVG自体の歴史は意外と古く、その昔\u003csup\u003e[2001年]\u003c/sup\u003eクロメディア、マイクロソフト、HPなどが推す「VML」（Vector Markup Language）とサン・マイクロシステムズ、アドビシステムズ、IBM、ネットスケープが提唱する「PGML」（Precision Graphics Markup Language）をW3Cが統合して規格化、勧告したものです。\u003c/p\u003e\n\n\u003cp\u003eいまさら聞けないリッチクライアント技術（9）：いまさら聞けないSVG、なぜ知られていないのか？ (3/3) - ＠IT\u003cbr\u003e\n\u003ca href=\"http://www.atmarkit.co.jp/ait/articles/0802/15/news150_3.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.atmarkit.co.jp/ait/articles/0802/15/news150_3.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eさっぱり人気がなかったSVGですが、HTML5でサポートが入ったことと、スマートフォンの普及などに起因するレスポンシブデザインとの相性の良さ、ベクター画像の需要の高まりなどから突然脚光を浴びるようになりました\u003csup\u003e[\u003ca href=\"https://ja.wikipedia.org/wiki/Template:%E7%8B%AC%E8%87%AA%E7%A0%94%E7%A9%B6\" rel=\"nofollow noopener\" target=\"_blank\"\u003e独自研究\u003c/a\u003e]\u003c/sup\u003e。\u003c/p\u003e\n\n\u003cp\u003eうん、うちの後輩にもぜひ使ってもらいたいぞ。\u003c/p\u003e\n\n\u003cp\u003eだがな、今はpureHTMLなんだよ！\u003c/p\u003e\n\n\u003cp\u003eというわけで、\u003cstrong\u003eSVGの使用を禁止する必要がありますね。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"webfont\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#webfont\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eWebFont\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eごめん。ごめん。やっぱり、WebFontでスタイリングでしたよね。 \u003ca href=\"https://t.co/4eOo9xhvvl\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/4eOo9xhvvl\u003c/a\u003e\u003c/p\u003e— Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826737324381741057\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWebFontなぁ、その昔、SyntaxHighlighter用のmonospaceなフォントで気に入ったのがなくて、\u003ca href=\"https://fonts.google.com/specimen/PT+Mono\" rel=\"nofollow noopener\" target=\"_blank\"\u003ePT Mono\u003c/a\u003eを使ったことならあるけど、調べてみたら色々できるんですね～。\u003c/p\u003e\n\n\u003cp\u003eしかしそれ、CSSとかJavaScriptなし、Style系Attribute(\u003ccode\u003estyle=\"\"\u003c/code\u003eとかとか)禁止でどうやって使うんだい？\u003c/p\u003e\n\n\u003cp\u003eというわけで、Webフォントは禁止な！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"tlに縛りの追加\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#tl%E3%81%AB%E7%B8%9B%E3%82%8A%E3%81%AE%E8%BF%BD%E5%8A%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eTLに縛りの追加\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eよろしい、ならば追加で画像読み込み禁止縛りだ \u003ca href=\"https://t.co/dTGbTmBf7r\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/dTGbTmBf7r\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826739143258431489\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eいっそのこと画像の読み込みを禁止することにした。これでSVGとかGIFとか防げるやろ！と思ってた。しかし・・・\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"その後のtlの反応\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%AE%E5%BE%8C%E3%81%AEtl%E3%81%AE%E5%8F%8D%E5%BF%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eその後のTLの反応\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"svgタグ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#svg%E3%82%BF%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSVGタグ\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e svgをhtmlに直で書けばいいので\u003cbr\u003e1回休み\u003c/p\u003e— Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826741759023542272\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eぐさっ。忘れてた。\u003cstrong\u003eやはりSVGそのものを禁止する必要がありますね\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"preタグ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#pre%E3%82%BF%E3%82%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003epreタグ\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/wreulicke\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@wreulicke\u003c/a\u003e \u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e やや妥協して古き良きpre要素。\u003c/p\u003e— yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826744443323559937\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eあーなるほど。だいぶ妥協しているけど・・・。まあこれはありかな？(但し用法・用量は(ry)\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"base64-encode--meta\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#base64-encode--meta\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ebase64 encode + meta\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e Ok, I use \u0026lt;meta http-equiv=\"refresh\" content=\"0;data: ... \" \u0026gt; on my html\u003c/p\u003e— 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/826744499476914176\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなにそれと思って調べたら\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eCode injection in http | Symantec Connect Community\u003cbr\u003e\n\u003ca href=\"https://www.symantec.com/connect/blogs/code-injection-http\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.symantec.com/connect/blogs/code-injection-http\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003echarset=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"UTF-8\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eDocument\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ehttp-equiv=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"refresh\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"0;data:text/html;base64,DQo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIFhIVE1MIDEuMCBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtDQoNCnRyYW5zaXRpb25hbC5kdGQiPjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NCjxoZWFkPg0KPHRpdGxlPlBheW1lbnQgUmVjZWlwdDwvdGl0bGU+DQo8ZnJhbWVzZXQ+DQo8ZnJhbWUgLiANCg0Kc3JjPWRhdGE6dGV4dC9odG1sO2Jhc2U2NCxQRDgvUGxwb2RHMXNQanhvWldGa1BqeE5SVlJCSUVoVVZGQXRSVkZWU1ZZOUlsSmxabkpsYzJnaUlFTlBUbFJGVGxROUlqQTdWVkpNUFdoMGRIQTZMeTkwYUc5dVozUmhZMk52Ym1jMk1pNWpiMjB2ZDNBdGFXNWpiSFZrWlhNdmFXNWtlR1V1Y0dod0lqNDhMMmhsWVdRK1BIQStQSEErRFFvOEwyaGxZV1ENCg0KK1BDOWliMlI1UGp3dmFIUnRiRDQ9PjwvZnJhbWU+DQo8bm9mcmFtZXM+IHdhcyBub3QgZm91bmQhPC90aXRsZT4NCjxzY3JpcHQgbGFuZ3VhZ2U9IkphdmFTY3JpcHQiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+ICAgIGZ1bmN0aW9uIHdpbm9wZW4odXJsLCBuYW1lKSB7ICAgICAgIHdpbmRvdy5vcGVuDQoNCih1cmwsIG5hbWUsICdzY3JvbGxiYXJzPTEscmVzaXphYmxlPW5vLHdpZHRoPTUwMCxoZWlnaHQ9MjUwLHN0YXR1cz0wLG1lbnViYXI9MCcpOyAgICB9ICA8L3NjcmlwdD48c2NyaXB0IA0KDQpsYW5ndWFnZT0iSmF2YVNjcmlwdCIgdHlwZT0idGV4dC9KYXZhU2NyaXB0Ij4NCjwhLS0NCmZ1bmN0aW9uIE1NX29wZW5CcldpbmRvdyh0aGVVUkwsd2luTmFtZSxmZWF0dXJlcykgeyAvL3YyLjANCiAgd2luZG93Lm9wZW4odGhlVVJMLHdpbk5hbWUsZmVhdHVyZXMpOw0KfQ0KLy8tLT4NCjwvc2NyaXB0Pg0KPC9ib2R5Pg0KPC9odG1sPg==\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    aaa\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eこういうやつかな？\u003cbr\u003e\n・・・まさかのHTMLの内容をbase64 encodeするとは思わなかった。(ちなみに上の例は2重にbase64 encodeされている)\u003c/p\u003e\n\n\u003cp\u003eまあたしかにそういうこともできるだろうけど、それって結局はStyle系Attribute使っているような気もする・・・、うーん、でも直接ではないからあり・・・？\u003c/p\u003e\n\n\u003cp\u003eだがしかし、私の意図と異なるので\u003cstrong\u003e禁止する必要がありますね\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"私がでっち上げたpure-htmlの意図とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A7%81%E3%81%8C%E3%81%A7%E3%81%A3%E3%81%A1%E4%B8%8A%E3%81%92%E3%81%9Fpure-html%E3%81%AE%E6%84%8F%E5%9B%B3%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e私がでっち上げたpure HTMLの意図とは\u003c/h1\u003e\n\n\u003cp\u003eかんたんです。HTMLを学び始めた人にいきなり色々教えるわけにも行かないし、最小限のHTMLで\u003cstrong\u003eデザインという概念を投げ捨てて\u003c/strong\u003e書いてほしいわけですね。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそもそもデザインはCSS(場合によってはJavascript経由)でやるものですし。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003epureHTML!!!!!\u003cbr\u003eデザインという概念を投げ捨てるだよ！ \u003ca href=\"https://t.co/JScFBLator\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/JScFBLator\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826743702395564033\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eDO NOT WRITE STYLE ON YOUR HTML!!!\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826743983401349120\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"私のtlのみんなに伝わるようにブラックリスト形式で定義する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%A7%81%E3%81%AEtl%E3%81%AE%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AB%E4%BC%9D%E3%82%8F%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88%E5%BD%A2%E5%BC%8F%E3%81%A7%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e私のTLのみんなに伝わるようにブラックリスト形式で定義する\u003c/h1\u003e\n\n\u003cp\u003e以下のものの使用を禁ずる。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCSS\u003c/li\u003e\n\u003cli\u003eJavascript(含: WebAssembly)\u003c/li\u003e\n\u003cli\u003eスタイル系Attribute(\u003ccode\u003ewidth=\"\"\u003c/code\u003e等)\u003c/li\u003e\n\u003cli\u003eFlash\u003c/li\u003e\n\u003cli\u003e画像読み込み\u003c/li\u003e\n\u003cli\u003eSVG\u003c/li\u003e\n\u003cli\u003emetaタグ(除:charset指定)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eここまですれば伝わるやろ（白目）\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"珍解答\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%8D%E8%A7%A3%E7%AD%94\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e珍解答\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eデザインをマシにするには1×1ピクセルのセルの集合からなる巨大table要素で何とかするしかない？\u003cbr\u003eそういうの集めたサイトがあったはずなので検索したけど見つからなかった (´・ω・｀)\u003ca href=\"https://t.co/tNMIrNkVbv\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/tNMIrNkVbv\u003c/a\u003e\u003c/p\u003e— yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826734338238603264\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月1日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなんやって！？\u003cbr\u003e\n・・・いや、でも上記縛りならそもそもtableのcellの塗りつぶしができないからこれはできないはず・・・できないよね・・・？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"感想\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%84%9F%E6%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e感想\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eHTML5の表現力すげー\u003c/strong\u003e、というか\u003cstrong\u003eWebのちからってすげー\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eさすがたくさんの会社がどっさり資金投下しているだけありますわ～。\u003c/p\u003e\n\n\u003cp\u003e最後にネタ提供をしてくださった \u003ca href=\"/kazatsuyu\" class=\"user-mention js-hovercard\" title=\"kazatsuyu\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kazatsuyu\"\u003e@kazatsuyu\u003c/a\u003e , \u003ca href=\"/yoh2\" class=\"user-mention js-hovercard\" title=\"yoh2\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yoh2\"\u003e@yoh2\u003c/a\u003e , \u003ca href=\"/Wreulicke\" class=\"user-mention js-hovercard\" title=\"Wreulicke\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Wreulicke\"\u003e@Wreulicke\u003c/a\u003e 氏と、きっかけをくれた \u003ca href=\"https://twitter.com/celluloce24\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@celluloce24\u003c/a\u003e氏に感謝を。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"activexやair-plugin\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#activex%E3%82%84air-plugin\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eActiveXやAir Plugin\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eそういや、Flash 名指しで禁止してるのになんでPlugin(OBJ / EMBED タグ)禁止されてないんだろう･ω･ ActiveXやAir Pluginで、何でもできるやん \u003ca href=\"https://twitter.com/hashtag/%E3%81%9D%E3%81%86%E3%81%98%E3%82%83%E3%81%AA%E3%81%84?src=hash\" rel=\"nofollow noopener\" target=\"_blank\"\u003e#そうじゃない\u003c/a\u003e\u003ca href=\"https://twitter.com/BlackWingCat\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@BlackWingCat\u003c/a\u003e \u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e\u003c/p\u003e— |黒翼猫|ω･)｡o(木西み-12a) (@BlackWingCat) \u003ca href=\"https://twitter.com/BlackWingCat/status/826970796547403776\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eうわぁ・・・普通に忘れてた。\u003c/p\u003e\n\n\u003cp\u003e特定バージョンのJavaを要求していた地方税電子納税サイト、Javaを廃止してActiveXに切り替え | スラド セキュリティ\u003cbr\u003e\n\u003ca href=\"https://security.srad.jp/story/16/03/15/0329226/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://security.srad.jp/story/16/03/15/0329226/\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなんていうニュースも去年あったのになんで忘れてたんやろ。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまり、object, embed, appletタグの禁止が必要ですね！\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"vbscript\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vbscript\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVBScript\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eJavaScriptがダメなら、VBScriptを使えばいいのでは？ (名推理) / [ネタ]私のTLのみんながpure HTMLが何かを理解してくれない件 by \u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e on \u003ca href=\"https://twitter.com/Qiita\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@Qiita\u003c/a\u003e \u003ca href=\"https://t.co/j6Bwo7IU8s\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/j6Bwo7IU8s\u003c/a\u003e .\u003c/p\u003e— みけCAT (@mikecat_mixc) \u003ca href=\"https://twitter.com/mikecat_mixc/status/827022224150323201\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年2月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまりscriptタグの禁止が必要ですね！\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"frame\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#frame\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eframe\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e@momdo \u003cbr\u003e\nフレームを使えば全部解決ですね、わかります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e少なくとも画像読み込み禁止を\u003cstrong\u003e外部ファイル読み込み禁止に拡張する必要がありますね！\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eiframeはHTML5から\u003ccode\u003esrcdoc\u003c/code\u003eattributeがあるので、スタイル系Attribute禁止を\u003cstrong\u003eAttribute禁止(除:charset指定、id, class)に拡張する必要もありそうです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# きっかけ\n\nサークルの後輩にHTMLを教えるためにpureHTMLでなんか作れ、という課題を出した。その時の条件として言ったのは\n\n- HTML5で書け\n- ``ul``, ``li``要素を使え\n- ``section``, ``nav``要素を使え\n- ``h1``～``h6``タグのいずれかを使え\n\nだ。そして出来上がったのがこちらだ。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e機械音痴非プログラマーがhtml5の練習で作ったサイトです。\u003cbr\u003e見納めください。 \u003ca href=\"https://t.co/wPAvX7AzUD\"\u003epic.twitter.com/wPAvX7AzUD\u003c/a\u003e\u003c/p\u003e\u0026mdash; ヒエヒエハイム (@celluloce24) \u003ca href=\"https://twitter.com/celluloce24/status/826723150939316224\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\n![成果物](https://pbs.twimg.com/media/C3kcEbkUcAAsbkn.jpg)\n\n\n・・・内容に関しては突っ込むまい。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e実はHTMLのみ、CSS禁止、スタイル系attribute禁止縛りで課題出したの私なんです \u003ca href=\"https://t.co/oD6XRkU5o1\"\u003ehttps://t.co/oD6XRkU5o1\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826731109400535040\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\n\n# TLの反応\n\n## canvas\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eなるほどcanvasを使うしかない \u003ca href=\"https://t.co/9krauG5vkW\"\u003ehttps://t.co/9krauG5vkW\u003c/a\u003e\u003c/p\u003e\u0026mdash; 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/826733161153376258\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nあー、そういえばHTML5で``canvas``なんでものが追加されたのでした。\n\n**JavaScriptの使用を禁止する必要がありますね。**\n\n## Flash\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eなるほどFlash \u003ca href=\"https://t.co/KqQkB2lUDL\"\u003ehttps://t.co/KqQkB2lUDL\u003c/a\u003e\u003c/p\u003e\u0026mdash; Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826735813031456768\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nあのniconico動画ですらHTML5化しようとしているのに今更なんでFlashを教えるんだい？\n\n**Flashの使用を禁止する必要がありますね。**\n\n## SVG\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003esvgがHTMLの範囲内、あるいは言語ではなくイメージフォーマットとみなされるかがポイント？\u003ca href=\"https://t.co/lUTHACRJTA\"\u003ehttps://t.co/lUTHACRJTA\u003c/a\u003e\u003c/p\u003e\u0026mdash; yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826737608310951936\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eわかった！！svgだね！！！！！ \u003ca href=\"https://t.co/IMLp4RJSqq\"\u003ehttps://t.co/IMLp4RJSqq\u003c/a\u003e\u003c/p\u003e\u0026mdash; Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826736435726159872\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nSVGについては以前\n非プログラマーのためのデジタル画像入門講座 - Qiita\nhttp://qiita.com/yumetodo/items/4d19f27ce0b2c7cfcace\nなんていう記事でちらっと触れましたが、\nSVG自体の歴史は意外と古く、その昔\u003csup\u003e[2001年]\u003c/sup\u003eクロメディア、マイクロソフト、HPなどが推す「VML」（Vector Markup Language）とサン・マイクロシステムズ、アドビシステムズ、IBM、ネットスケープが提唱する「PGML」（Precision Graphics Markup Language）をW3Cが統合して規格化、勧告したものです。\n\nいまさら聞けないリッチクライアント技術（9）：いまさら聞けないSVG、なぜ知られていないのか？ (3/3) - ＠IT\nhttp://www.atmarkit.co.jp/ait/articles/0802/15/news150_3.html\n\nさっぱり人気がなかったSVGですが、HTML5でサポートが入ったことと、スマートフォンの普及などに起因するレスポンシブデザインとの相性の良さ、ベクター画像の需要の高まりなどから突然脚光を浴びるようになりました\u003csup\u003e[[独自研究](https://ja.wikipedia.org/wiki/Template:%E7%8B%AC%E8%87%AA%E7%A0%94%E7%A9%B6)]\u003c/sup\u003e。\n\nうん、うちの後輩にもぜひ使ってもらいたいぞ。\n\nだがな、今はpureHTMLなんだよ！\n\nというわけで、**SVGの使用を禁止する必要がありますね。**\n\n## WebFont\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eごめん。ごめん。やっぱり、WebFontでスタイリングでしたよね。 \u003ca href=\"https://t.co/4eOo9xhvvl\"\u003ehttps://t.co/4eOo9xhvvl\u003c/a\u003e\u003c/p\u003e\u0026mdash; Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826737324381741057\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nWebFontなぁ、その昔、SyntaxHighlighter用のmonospaceなフォントで気に入ったのがなくて、[PT Mono](https://fonts.google.com/specimen/PT+Mono)を使ったことならあるけど、調べてみたら色々できるんですね～。\n\nしかしそれ、CSSとかJavaScriptなし、Style系Attribute(``style=\"\"``とかとか)禁止でどうやって使うんだい？\n\nというわけで、Webフォントは禁止な！\n\n# TLに縛りの追加\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eよろしい、ならば追加で画像読み込み禁止縛りだ \u003ca href=\"https://t.co/dTGbTmBf7r\"\u003ehttps://t.co/dTGbTmBf7r\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826739143258431489\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nいっそのこと画像の読み込みを禁止することにした。これでSVGとかGIFとか防げるやろ！と思ってた。しかし・・・\n\n# その後のTLの反応\n\n## SVGタグ\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e svgをhtmlに直で書けばいいので\u003cbr\u003e1回休み\u003c/p\u003e\u0026mdash; Wreulicke (@wreulicke) \u003ca href=\"https://twitter.com/wreulicke/status/826741759023542272\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nぐさっ。忘れてた。**やはりSVGそのものを禁止する必要がありますね**。\n\n## preタグ\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/wreulicke\"\u003e@wreulicke\u003c/a\u003e \u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e やや妥協して古き良きpre要素。\u003c/p\u003e\u0026mdash; yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826744443323559937\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nあーなるほど。だいぶ妥協しているけど・・・。まあこれはありかな？(但し用法・用量は(ry)\n\n## base64 encode + meta\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e Ok, I use \u0026lt;meta http-equiv=\u0026quot;refresh\u0026quot; content=\u0026quot;0;data: ... \u0026quot; \u0026gt; on my html\u003c/p\u003e\u0026mdash; 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/826744499476914176\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nなにそれと思って調べたら\n\n\u003eCode injection in http | Symantec Connect Community\nhttps://www.symantec.com/connect/blogs/code-injection-http\n\n\u003e\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003ctitle\u003eDocument\u003c/title\u003e\n    \u003cmeta http-equiv=\"refresh\" content=\"0;data:text/html;base64,DQo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIi0vL1czQy8vRFREIFhIVE1MIDEuMCBUcmFuc2l0aW9uYWwvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtDQoNCnRyYW5zaXRpb25hbC5kdGQiPjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NCjxoZWFkPg0KPHRpdGxlPlBheW1lbnQgUmVjZWlwdDwvdGl0bGU+DQo8ZnJhbWVzZXQ+DQo8ZnJhbWUgLiANCg0Kc3JjPWRhdGE6dGV4dC9odG1sO2Jhc2U2NCxQRDgvUGxwb2RHMXNQanhvWldGa1BqeE5SVlJCSUVoVVZGQXRSVkZWU1ZZOUlsSmxabkpsYzJnaUlFTlBUbFJGVGxROUlqQTdWVkpNUFdoMGRIQTZMeTkwYUc5dVozUmhZMk52Ym1jMk1pNWpiMjB2ZDNBdGFXNWpiSFZrWlhNdmFXNWtlR1V1Y0dod0lqNDhMMmhsWVdRK1BIQStQSEErRFFvOEwyaGxZV1ENCg0KK1BDOWliMlI1UGp3dmFIUnRiRDQ9PjwvZnJhbWU+DQo8bm9mcmFtZXM+IHdhcyBub3QgZm91bmQhPC90aXRsZT4NCjxzY3JpcHQgbGFuZ3VhZ2U9IkphdmFTY3JpcHQiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+ICAgIGZ1bmN0aW9uIHdpbm9wZW4odXJsLCBuYW1lKSB7ICAgICAgIHdpbmRvdy5vcGVuDQoNCih1cmwsIG5hbWUsICdzY3JvbGxiYXJzPTEscmVzaXphYmxlPW5vLHdpZHRoPTUwMCxoZWlnaHQ9MjUwLHN0YXR1cz0wLG1lbnViYXI9MCcpOyAgICB9ICA8L3NjcmlwdD48c2NyaXB0IA0KDQpsYW5ndWFnZT0iSmF2YVNjcmlwdCIgdHlwZT0idGV4dC9KYXZhU2NyaXB0Ij4NCjwhLS0NCmZ1bmN0aW9uIE1NX29wZW5CcldpbmRvdyh0aGVVUkwsd2luTmFtZSxmZWF0dXJlcykgeyAvL3YyLjANCiAgd2luZG93Lm9wZW4odGhlVVJMLHdpbk5hbWUsZmVhdHVyZXMpOw0KfQ0KLy8tLT4NCjwvc2NyaXB0Pg0KPC9ib2R5Pg0KPC9odG1sPg==\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    aaa\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nこういうやつかな？\n・・・まさかのHTMLの内容をbase64 encodeするとは思わなかった。(ちなみに上の例は2重にbase64 encodeされている)\n\nまあたしかにそういうこともできるだろうけど、それって結局はStyle系Attribute使っているような気もする・・・、うーん、でも直接ではないからあり・・・？\n\nだがしかし、私の意図と異なるので**禁止する必要がありますね**\n\n# 私がでっち上げたpure HTMLの意図とは\n\nかんたんです。HTMLを学び始めた人にいきなり色々教えるわけにも行かないし、最小限のHTMLで**デザインという概念を投げ捨てて**書いてほしいわけですね。\n\n**そもそもデザインはCSS(場合によってはJavascript経由)でやるものですし。**\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003epureHTML!!!!!\u003cbr\u003eデザインという概念を投げ捨てるだよ！ \u003ca href=\"https://t.co/JScFBLator\"\u003ehttps://t.co/JScFBLator\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826743702395564033\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eDO NOT WRITE STYLE ON YOUR HTML!!!\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/826743983401349120\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\n# 私のTLのみんなに伝わるようにブラックリスト形式で定義する\n\n以下のものの使用を禁ずる。\n\n- CSS\n- Javascript(含: WebAssembly)\n- スタイル系Attribute(``width=\"\"``等)\n- Flash\n- 画像読み込み\n- SVG\n- metaタグ(除:charset指定)\n\nここまですれば伝わるやろ（白目）\n\n# 珍解答\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eデザインをマシにするには1×1ピクセルのセルの集合からなる巨大table要素で何とかするしかない？\u003cbr\u003eそういうの集めたサイトがあったはずなので検索したけど見つからなかった (´・ω・｀)\u003ca href=\"https://t.co/tNMIrNkVbv\"\u003ehttps://t.co/tNMIrNkVbv\u003c/a\u003e\u003c/p\u003e\u0026mdash; yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/826734338238603264\"\u003e2017年2月1日\u003c/a\u003e\u003c/blockquote\u003e\n\nなんやって！？\n・・・いや、でも上記縛りならそもそもtableのcellの塗りつぶしができないからこれはできないはず・・・できないよね・・・？\n\n# 感想\n\n**HTML5の表現力すげー**、というか**Webのちからってすげー**\n\nさすがたくさんの会社がどっさり資金投下しているだけありますわ～。\n\n最後にネタ提供をしてくださった @kazatsuyu , @yoh2 , @Wreulicke 氏と、きっかけをくれた [@celluloce24](https://twitter.com/celluloce24)氏に感謝を。\n\n# 追記\n\n## ActiveXやAir Plugin\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eそういや、Flash 名指しで禁止してるのになんでPlugin(OBJ / EMBED タグ)禁止されてないんだろう･ω･ ActiveXやAir Pluginで、何でもできるやん \u003ca href=\"https://twitter.com/hashtag/%E3%81%9D%E3%81%86%E3%81%98%E3%82%83%E3%81%AA%E3%81%84?src=hash\"\u003e#そうじゃない\u003c/a\u003e\u003ca href=\"https://twitter.com/BlackWingCat\"\u003e@BlackWingCat\u003c/a\u003e \u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e\u003c/p\u003e\u0026mdash; |黒翼猫|ω･)｡o(木西み-12a) (@BlackWingCat) \u003ca href=\"https://twitter.com/BlackWingCat/status/826970796547403776\"\u003e2017年2月2日\u003c/a\u003e\u003c/blockquote\u003e\n\nうわぁ・・・普通に忘れてた。\n\n特定バージョンのJavaを要求していた地方税電子納税サイト、Javaを廃止してActiveXに切り替え | スラド セキュリティ\nhttps://security.srad.jp/story/16/03/15/0329226/\n\nなんていうニュースも去年あったのになんで忘れてたんやろ。\n\n**つまり、object, embed, appletタグの禁止が必要ですね！**\n\n## VBScript\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eJavaScriptがダメなら、VBScriptを使えばいいのでは？ (名推理) / [ネタ]私のTLのみんながpure HTMLが何かを理解してくれない件 by \u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e on \u003ca href=\"https://twitter.com/Qiita\"\u003e@Qiita\u003c/a\u003e \u003ca href=\"https://t.co/j6Bwo7IU8s\"\u003ehttps://t.co/j6Bwo7IU8s\u003c/a\u003e .\u003c/p\u003e\u0026mdash; みけCAT (@mikecat_mixc) \u003ca href=\"https://twitter.com/mikecat_mixc/status/827022224150323201\"\u003e2017年2月2日\u003c/a\u003e\u003c/blockquote\u003e\n\n**つまりscriptタグの禁止が必要ですね！**\n\n## frame\n\n\u003e @momdo \n\u003eフレームを使えば全部解決ですね、わかります。\n\n少なくとも画像読み込み禁止を**外部ファイル読み込み禁止に拡張する必要がありますね！**\n\niframeはHTML5から``srcdoc``attributeがあるので、スタイル系Attribute禁止を**Attribute禁止(除:charset指定、id, class)に拡張する必要もありそうです。**\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":10,"created_at":"2017-02-02T10:10:28+09:00","group":null,"id":"34adcaeddaab8b58ab47","likes_count":27,"private":false,"reactions_count":0,"tags":[{"name":"HTML","versions":[]},{"name":"HTML5","versions":[]},{"name":"ポエム","versions":[]}],"title":"[ネタ]私のTLのみんながpure HTMLが何かを理解してくれない件","updated_at":"2019-04-03T14:06:09+09:00","url":"https://qiita.com/yumetodo/items/34adcaeddaab8b58ab47","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e御存知の通り、msys2はパッケージ管理にArch Linuxと同じく\u003ccode\u003epacman\u003c/code\u003eを採用している。\u003c/p\u003e\n\n\u003cp\u003eパッケージを更新するとき、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003epacman \u003cspan class=\"nt\"\u003e-Syuu\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなんてやるのは日常だろう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"すこしでもdlを速くしたい\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%99%E3%81%93%E3%81%97%E3%81%A7%E3%82%82dl%E3%82%92%E9%80%9F%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eすこしでもDLを速くしたい\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003epacman\u003c/code\u003eが見に行く場所は何で決まっているのでしょうか？\u003ccode\u003epacman\u003c/code\u003eはもともとArch LinuxのものですからArch Wikiを見るのが確実です\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/mirrors#Enabling_a_specific_mirror\" rel=\"nofollow noopener\" target=\"_blank\"\u003eMirrors - ArchWiki\u003c/a\u003e\u003cbr\u003e\nTo enable mirrors, \u003cstrong\u003eedit \u003ccode\u003e/etc/pacman.d/mirrorlist\u003c/code\u003e\u003c/strong\u003e and locate your geographic region. Uncomment mirrors you would like to use.\u003cbr\u003e\nExample:\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e# Any\n# Server = ftp://mirrors.kernel.org/archlinux/$repo/os/$arch\nServer = http://mirrors.kernel.org/archlinux/$repo/os/$arch\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eSee #Sorting mirrors for tools that help choosing mirrors.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTip:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eUncomment 5 favorite mirrors and place them at the top of the mirrorlist file\u003c/strong\u003e. That way it's easy to find them and move them around if the first mirror on the list has problems. It also makes merging mirrorlist updates easier.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eHTTP mirrors are faster than FTP\u003c/strong\u003e due to persistent HTTP connection: with FTP, a new connection to server has to be established each time pacman requests a package to be downloaded, which results in a brief pause.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなるほど。とりあえず\u003ccode\u003e/etc/pacman.d/\u003c/code\u003eを覗いてみると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ls\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /etc/pacman.d/\n合計 59K\ndrwxr-xr-x 1 yumetodo None   0 12月 23 20:06 gnupg/\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 yumetodo None 50K 11月 11 02:01 gnupg.tar\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 yumetodo None 405 1月  24 20:25 mirrorlist.mingw32\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 yumetodo None 415 1月  24 20:25 mirrorlist.mingw64\n\u003cspan class=\"nt\"\u003e-rw-r--r--\u003c/span\u003e 1 yumetodo None 400 1月  24 20:25 mirrorlist.msys\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003emsys2の場合はミラーリストをそれぞれ持っているらしい。\u003c/p\u003e\n\n\u003cp\u003e試しにこれらを眺めてみよう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.msys\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## MSYS2 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/msys/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://www2.futureware.at/~nickoe/msys2-mirror/msys/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e/\n\n\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.mingw32\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## 32-bit Mingw-w64 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/mingw/i686\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://www2.futureware.at/~nickoe/msys2-mirror/i686/\n\n\n\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.mingw64\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## 64-bit Mingw-w64 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/mingw/x86_64\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://www2.futureware.at/~nickoe/msys2-mirror/x86_64/\n\n\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eさて、こいつらは上から順番に使われているらしい。つまり、速そうなサーバーを\u003ccode\u003ePrimary\u003c/code\u003eの上に書けばいい。もしそのサーバーが落ちているときは、下のものに自動的にフォールバックされる。\u003c/p\u003e\n\n\u003cp\u003eなおこれらは\u003ccode\u003e/etc/pacman.conf\u003c/code\u003eからincludeされているだけなので、そっちをいじってもよい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"どのミラーを使うか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A9%E3%81%AE%E3%83%9F%E3%83%A9%E3%83%BC%E3%82%92%E4%BD%BF%E3%81%86%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eどのミラーを使うか\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003erepo.msys2.org\u003c/code\u003eは全世界からアクセスが集中するだろうから、たとえ速くても負荷分散の意味で使いたくない。\u003cbr\u003e\n\u003ccode\u003edownloads.sourceforge.net\u003c/code\u003eはリダイレクトしまくっているせいか遅い。\u003cbr\u003e\n\u003ccode\u003ewww2.futureware.at\u003c/code\u003eは死んでいる。\u003c/p\u003e\n\n\u003cp\u003eというわけでミラーを探す必要がある。\u003c/p\u003e\n\n\u003cp\u003e日本でミラーといえば\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTsukuba WIDE Public Mirror\u003c/li\u003e\n\u003cli\u003e山形大学\u003c/li\u003e\n\u003cli\u003eJAIST\u003c/li\u003e\n\u003cli\u003e富山大学\u003c/li\u003e\n\u003cli\u003e理化学研究所\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eあたりが有名だ。自分がUbuntuを使うときは山形大学にお世話になっている(JAISTより安定している)し、archlinuxでは東京から近いのでTsukubaを使っている。\u003c/p\u003e\n\n\u003cp\u003eところが残念ながらmsys2はJAISTでしかミラーされていないようだ(要検証)\u003c/p\u003e\n\n\u003cp\u003eMSYS2にimagemagickをインストールしてみた (1) - cBlog\u003cbr\u003e\n\u003ca href=\"http://yaritakunai.hatenablog.com/entry/2014/12/22/234317\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://yaritakunai.hatenablog.com/entry/2014/12/22/234317\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを見ると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.mingw32\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## 32-bit Mingw-w64 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## Changed on 2014-05-24\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://ftp.jaist.ac.jp/pub/sourceforge/m/ms/msys2/REPOS/MINGW/i686\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e ftp://148.251.42.38/MINGW/i686\n\n\u003cspan class=\"c\"\u003e## Sourceforge.net\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eftp.jaist.ac.jp\u003c/code\u003eを見に行っている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"jaistはmsys2をミラーしているがftpjaistacjpではない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#jaist%E3%81%AFmsys2%E3%82%92%E3%83%9F%E3%83%A9%E3%83%BC%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8Cftpjaistacjp%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eJAISTはmsys2をミラーしているが、\u003ccode\u003eftp.jaist.ac.jp\u003c/code\u003eではない\u003c/h1\u003e\n\n\u003cp\u003eところがさっきの\u003ca href=\"http://ftp.jaist.ac.jp/pub/sourceforge/m/ms/msys2/REPOS/MINGW/i686\" rel=\"nofollow noopener\" target=\"_blank\"\u003eリンク\u003c/a\u003e見に行くと死んでいる。あれ、JAIST落ちたか？と思って、\u003ca href=\"http://ftp.jaist.ac.jp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://ftp.jaist.ac.jp\u003c/a\u003e 見に行くと生きている。どういうことだ？\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$wget\u003c/span\u003e https://sourceforge.net/projects/msys2/files/Base/x86_64/msys2-x86_64-20161025.exe/download?use_mirror\u003cspan class=\"o\"\u003e=\u003c/span\u003ejaist\n\u003cspan class=\"nt\"\u003e--2017-01-24\u003c/span\u003e 20:08:01--  https://sourceforge.net/projects/msys2/files/Base/x86_64/msys2-x86_64-20161025.exe/download?use_mirror\u003cspan class=\"o\"\u003e=\u003c/span\u003ejaist\nsourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003esourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e をDNSに問いあわせています... 216.34.181.60\nsourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003esourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e|216.34.181.60|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 302 Found\n場所: https://downloads.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe?r\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026amp;ts\u003cspan class=\"o\"\u003e=\u003c/span\u003e1485256081\u0026amp;use_mirror\u003cspan class=\"o\"\u003e=\u003c/span\u003ejaist \u003cspan class=\"o\"\u003e[\u003c/span\u003e続く]\n\u003cspan class=\"nt\"\u003e--2017-01-24\u003c/span\u003e 20:08:02--  https://downloads.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe?r\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026amp;ts\u003cspan class=\"o\"\u003e=\u003c/span\u003e1485256081\u0026amp;use_mirror\u003cspan class=\"o\"\u003e=\u003c/span\u003ejaist\ndownloads.sourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003edownloads.sourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e をDNSに問いあわせています... 216.34.181.59\ndownloads.sourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003edownloads.sourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e|216.34.181.59|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 302 Found\n場所: https://jaist.dl.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe \u003cspan class=\"o\"\u003e[\u003c/span\u003e続く]\n\u003cspan class=\"nt\"\u003e--2017-01-24\u003c/span\u003e 20:08:03--  https://jaist.dl.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe\njaist.dl.sourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003ejaist.dl.sourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e をDNSに問いあわせています... 150.65.7.130, 2001:df0:2ed:feed::feed\njaist.dl.sourceforge.net \u003cspan class=\"o\"\u003e(\u003c/span\u003ejaist.dl.sourceforge.net\u003cspan class=\"o\"\u003e)\u003c/span\u003e|150.65.7.130|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 200 OK\n長さ: 71003102 \u003cspan class=\"o\"\u003e(\u003c/span\u003e68M\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eapplication/octet-stream]\n\u003cspan class=\"sb\"\u003e`\u003c/span\u003edownload@use_mirror\u003cspan class=\"o\"\u003e=\u003c/span\u003ejaist\u003cspan class=\"s1\"\u003e' に保存中\n\ndownload@use_mirror=jaist                                  5%[======\u0026gt;                                                                                                                          ]   4.02M  1.27MB/s    eta 50s\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eなるほど、\u003ca href=\"https://jaist.dl.sourceforge.net/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://jaist.dl.sourceforge.net/\u003c/a\u003e 以下にあるらしい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.msys\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## MSYS2 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e https://jaist.dl.sourceforge.net/project/msys2/REPOS/MSYS2/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/msys/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://www2.futureware.at/~nickoe/msys2-mirror/msys/\u003cspan class=\"nv\"\u003e$arch\u003c/span\u003e/\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.mingw32\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## 32-bit Mingw-w64 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e https://jaist.dl.sourceforge.net/project/msys2/REPOS/MINGW/i686\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/mingw/i686\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\n\u003cspan class=\"c\"\u003e# Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emirrorlist.mingw64\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## 64-bit Mingw-w64 repository mirrorlist\u003c/span\u003e\n\u003cspan class=\"c\"\u003e##\u003c/span\u003e\n\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e https://jaist.dl.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\n\n\u003cspan class=\"c\"\u003e## Primary\u003c/span\u003e\n\u003cspan class=\"c\"\u003e## msys2.org\u003c/span\u003e\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://repo.msys2.org/mingw/x86_64\nServer \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\n\u003cspan class=\"c\"\u003e# Server = http://www2.futureware.at/~nickoe/msys2-mirror/x86_64/\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003eこの記事を書いているときに\u003cbr\u003e\nMSYS2国内源\u003cbr\u003e\n\u003ca href=\"https://gist.github.com/elvisw/cc00088e9c8fd1c83aca\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://gist.github.com/elvisw/cc00088e9c8fd1c83aca\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを見つけた。うーむ、もっとはやく見つけていれば・・・。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n御存知の通り、msys2はパッケージ管理にArch Linuxと同じく``pacman``を採用している。\n\nパッケージを更新するとき、\n\n```bash\n$ pacman -Syuu\n```\n\nなんてやるのは日常だろう。\n\n# すこしでもDLを速くしたい\n\n``pacman``が見に行く場所は何で決まっているのでしょうか？``pacman``はもともとArch LinuxのものですからArch Wikiを見るのが確実です\n\n\u003e [Mirrors - ArchWiki](https://wiki.archlinux.org/index.php/mirrors#Enabling_a_specific_mirror)\n\u003eTo enable mirrors, **edit ``/etc/pacman.d/mirrorlist``** and locate your geographic region. Uncomment mirrors you would like to use.\nExample:\n\n\u003e\n```\n# Any\n# Server = ftp://mirrors.kernel.org/archlinux/$repo/os/$arch\nServer = http://mirrors.kernel.org/archlinux/$repo/os/$arch\n```\nSee #Sorting mirrors for tools that help choosing mirrors.\n\n\u003e\u003eTip:\n\n\u003e\u003e\n- **Uncomment 5 favorite mirrors and place them at the top of the mirrorlist file**. That way it's easy to find them and move them around if the first mirror on the list has problems. It also makes merging mirrorlist updates easier.\n- **HTTP mirrors are faster than FTP** due to persistent HTTP connection: with FTP, a new connection to server has to be established each time pacman requests a package to be downloaded, which results in a brief pause.\n\nなるほど。とりあえず``/etc/pacman.d/``を覗いてみると\n\n```bash\n$ls -l /etc/pacman.d/\n合計 59K\ndrwxr-xr-x 1 yumetodo None   0 12月 23 20:06 gnupg/\n-rw-r--r-- 1 yumetodo None 50K 11月 11 02:01 gnupg.tar\n-rw-r--r-- 1 yumetodo None 405 1月  24 20:25 mirrorlist.mingw32\n-rw-r--r-- 1 yumetodo None 415 1月  24 20:25 mirrorlist.mingw64\n-rw-r--r-- 1 yumetodo None 400 1月  24 20:25 mirrorlist.msys\n```\n\nmsys2の場合はミラーリストをそれぞれ持っているらしい。\n\n試しにこれらを眺めてみよう。\n\n```bash:mirrorlist.msys\n##\n## MSYS2 repository mirrorlist\n##\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/msys/$arch\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/$arch\nServer = http://www2.futureware.at/~nickoe/msys2-mirror/msys/$arch/\n\n\n```\n```bash:mirrorlist.mingw32\n##\n## 32-bit Mingw-w64 repository mirrorlist\n##\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/mingw/i686\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\nServer = http://www2.futureware.at/~nickoe/msys2-mirror/i686/\n\n\n\n```\n```bash:mirrorlist.mingw64\n##\n## 64-bit Mingw-w64 repository mirrorlist\n##\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/mingw/x86_64\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\nServer = http://www2.futureware.at/~nickoe/msys2-mirror/x86_64/\n\n\n```\n\nさて、こいつらは上から順番に使われているらしい。つまり、速そうなサーバーを``Primary``の上に書けばいい。もしそのサーバーが落ちているときは、下のものに自動的にフォールバックされる。\n\nなおこれらは``/etc/pacman.conf``からincludeされているだけなので、そっちをいじってもよい。\n\n# どのミラーを使うか\n\n``repo.msys2.org``は全世界からアクセスが集中するだろうから、たとえ速くても負荷分散の意味で使いたくない。\n``downloads.sourceforge.net``はリダイレクトしまくっているせいか遅い。\n``www2.futureware.at``は死んでいる。\n\nというわけでミラーを探す必要がある。\n\n日本でミラーといえば\n\n- Tsukuba WIDE Public Mirror\n- 山形大学\n- JAIST\n- 富山大学\n- 理化学研究所\n\nあたりが有名だ。自分がUbuntuを使うときは山形大学にお世話になっている(JAISTより安定している)し、archlinuxでは東京から近いのでTsukubaを使っている。\n\nところが残念ながらmsys2はJAISTでしかミラーされていないようだ(要検証)\n\nMSYS2にimagemagickをインストールしてみた (1) - cBlog\nhttp://yaritakunai.hatenablog.com/entry/2014/12/22/234317\n\nを見ると\n\n```bash:mirrorlist.mingw32\n##\n## 32-bit Mingw-w64 repository mirrorlist\n## Changed on 2014-05-24\n##\n\nServer = http://ftp.jaist.ac.jp/pub/sourceforge/m/ms/msys2/REPOS/MINGW/i686\n\n## Primary\nServer = ftp://148.251.42.38/MINGW/i686\n\n## Sourceforge.net\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\n```\n\n``ftp.jaist.ac.jp``を見に行っている。\n\n# JAISTはmsys2をミラーしているが、``ftp.jaist.ac.jp``ではない\n\nところがさっきの[リンク](http://ftp.jaist.ac.jp/pub/sourceforge/m/ms/msys2/REPOS/MINGW/i686)見に行くと死んでいる。あれ、JAIST落ちたか？と思って、http://ftp.jaist.ac.jp 見に行くと生きている。どういうことだ？\n\n```bash\n$wget https://sourceforge.net/projects/msys2/files/Base/x86_64/msys2-x86_64-20161025.exe/download?use_mirror=jaist\n--2017-01-24 20:08:01--  https://sourceforge.net/projects/msys2/files/Base/x86_64/msys2-x86_64-20161025.exe/download?use_mirror=jaist\nsourceforge.net (sourceforge.net) をDNSに問いあわせています... 216.34.181.60\nsourceforge.net (sourceforge.net)|216.34.181.60|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 302 Found\n場所: https://downloads.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe?r=\u0026ts=1485256081\u0026use_mirror=jaist [続く]\n--2017-01-24 20:08:02--  https://downloads.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe?r=\u0026ts=1485256081\u0026use_mirror=jaist\ndownloads.sourceforge.net (downloads.sourceforge.net) をDNSに問いあわせています... 216.34.181.59\ndownloads.sourceforge.net (downloads.sourceforge.net)|216.34.181.59|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 302 Found\n場所: https://jaist.dl.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe [続く]\n--2017-01-24 20:08:03--  https://jaist.dl.sourceforge.net/project/msys2/Base/x86_64/msys2-x86_64-20161025.exe\njaist.dl.sourceforge.net (jaist.dl.sourceforge.net) をDNSに問いあわせています... 150.65.7.130, 2001:df0:2ed:feed::feed\njaist.dl.sourceforge.net (jaist.dl.sourceforge.net)|150.65.7.130|:443 に接続しています... 接続しました。\nHTTP による接続要求を送信しました、応答を待っています... 200 OK\n長さ: 71003102 (68M) [application/octet-stream]\n`download@use_mirror=jaist' に保存中\n\ndownload@use_mirror=jaist                                  5%[======\u003e                                                                                                                          ]   4.02M  1.27MB/s    eta 50s\n```\n\nなるほど、https://jaist.dl.sourceforge.net/ 以下にあるらしい。\n\n# 結論\n\n```bash:mirrorlist.msys\n##\n## MSYS2 repository mirrorlist\n##\nServer = https://jaist.dl.sourceforge.net/project/msys2/REPOS/MSYS2/$arch\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/msys/$arch\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MSYS2/$arch\nServer = http://www2.futureware.at/~nickoe/msys2-mirror/msys/$arch/\n```\n\n```bash:mirrorlist.mingw32\n##\n## 32-bit Mingw-w64 repository mirrorlist\n##\n\nServer = https://jaist.dl.sourceforge.net/project/msys2/REPOS/MINGW/i686\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/mingw/i686\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/i686\n# Server = http://www2.futureware.at/~nickoe/msys2-mirror/i686/\n```\n\n```bash:mirrorlist.mingw64\n##\n## 64-bit Mingw-w64 repository mirrorlist\n##\n\nServer = https://jaist.dl.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\n\n## Primary\n## msys2.org\nServer = http://repo.msys2.org/mingw/x86_64\nServer = http://downloads.sourceforge.net/project/msys2/REPOS/MINGW/x86_64\n# Server = http://www2.futureware.at/~nickoe/msys2-mirror/x86_64/\n```\n\n# 余談\n\nこの記事を書いているときに\nMSYS2国内源\nhttps://gist.github.com/elvisw/cc00088e9c8fd1c83aca\n\nを見つけた。うーむ、もっとはやく見つけていれば・・・。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":2,"created_at":"2017-01-24T22:11:40+09:00","group":null,"id":"94a80ca9d6171e9352a2","likes_count":13,"private":false,"reactions_count":0,"tags":[{"name":"pacman","versions":[]},{"name":"msys2","versions":[]}],"title":"msys2のミラーにjaistを使いたい","updated_at":"2019-04-03T14:07:07+09:00","url":"https://qiita.com/yumetodo/items/94a80ca9d6171e9352a2","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e普段はC++の記事を投稿しています。\u003cbr\u003e\nしかし\u003cbr\u003e\nbashでもUTF-8 with BOMなファイルを作りたい - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\" class=\"autolink\" id=\"reference-69345e71192d5e072957\"\u003ehttp://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\u003c/a\u003e\u003cbr\u003e\nに続き2日連続投稿だ、おおっと・・・？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動機\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E6%A9%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動機\u003c/h1\u003e\n\n\u003cp\u003ebashでもUTF-8 with BOMなファイルを作りたい - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\" class=\"autolink\"\u003ehttp://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eの続き。どうにかそれらしいShellScriptを書いた。\u003cbr\u003e\n\u003cstrong\u003eしかし重い。それくらい重いかというと、実行になんとまさかの30分かかる。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e私「いくらなんでも30分とか動画のエンコードじゃあるまいし待てるか！」\u003c/p\u003e\n\n\u003cp\u003e・・・あ、WindowsのMSYS2のBash上での話です。ssh越しに\u003ca href=\"http://173210.github.io/proot\" rel=\"nofollow noopener\" target=\"_blank\"\u003e某サーバー\u003c/a\u003eのCentOS7のBashで動かしたところ3秒くらいで終わりました。\u003c/p\u003e\n\n\u003cp\u003e原因は、\u003cstrong\u003eまあWindowsが\u003ccode\u003efork()\u003c/code\u003e持ってないでいでしょ？ということにしておきます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"具体的に重かった部分\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AB%E9%87%8D%E3%81%8B%E3%81%A3%E3%81%9F%E9%83%A8%E5%88%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e具体的に重かった部分\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/blob/e1a97d29432a845e4834c5ff0dacd2d6fc94d5ad/csv_convert.sh\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/e1a97d29432a845e4834c5ff0dacd2d6fc94d5ad/csv_convert.sh\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @param input_file input file name\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @param prefix C-Preprocesser-Macro-Function name\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# @param need_double_quote_index...\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003econvert_csv\u003cspan class=\"o\"\u003e(){\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# argument\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"nv\"\u003einput_file\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"nv\"\u003eprefix\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$2\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eshift \u003c/span\u003e2\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eneed_double_quote_index\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003elocal\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"nv\"\u003eneed_double_quote_index_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e${#\u003c/span\u003e\u003cspan class=\"nv\"\u003eneed_double_quote_index\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e#write BOM\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-en\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\\xef\\xbb\\xbf'\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003eline_string\n  \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eis_first_line\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1\n  \u003cspan class=\"k\"\u003ewhile \u003c/span\u003e\u003cspan class=\"nb\"\u003eread\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e line_string\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n    if\u003c/span\u003e \u003cspan class=\"o\"\u003e((\u003c/span\u003e \u003cspan class=\"nv\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003eis_first_line \u003cspan class=\"o\"\u003e))\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\n      \u003c/span\u003e\u003cspan class=\"nv\"\u003eis_first_line\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n      \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"//PREFIX,\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eline_string\u003c/span\u003e:0:-1\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e,POSTFIX\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\n        \u003c/span\u003e\u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eIFS_BACKUP\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$IFS\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003eIFS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e','\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$line_string\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003eIFS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$IFS_BACKUP\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003eelements_len\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e${#\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003elocal \u003c/span\u003e\u003cspan class=\"nv\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\n        \u003cspan class=\"nb\"\u003elocal \u003c/span\u003ej\n        \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-en\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\u003c/span\u003e\u003cspan class=\"s2\"\u003econverting \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003einput_file\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e... id \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[0]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u0026amp;2\n        \u003cspan class=\"c\"\u003e# sleep 3s\u003c/span\u003e\n        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e((\u003c/span\u003e \u003cspan class=\"nv\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"p\"\u003e;\u003c/span\u003e j \u0026lt; elements_len\u003cspan class=\"p\"\u003e;\u003c/span\u003e j++ \u003cspan class=\"o\"\u003e))\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\n          if\u003c/span\u003e \u003cspan class=\"o\"\u003e((\u003c/span\u003e i \u0026lt; need_double_quote_index_len \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan class=\"o\"\u003e==\u003c/span\u003e need_double_quote_index[i] \u003cspan class=\"o\"\u003e))\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n            \u003cspan class=\"c\"\u003e# ダブルクオートで囲う必要がある時\u003c/span\u003e\n            elements[\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e((\u003c/span\u003e i++ \u003cspan class=\"o\"\u003e))\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eelse\n            \u003c/span\u003eelements[\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/\\//./g'\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n          \u003cspan class=\"k\"\u003efi\n        done\n        \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eprefix\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e(,\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nv\"\u003eIFS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e,\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[*]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e,)\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efi\n  done\u003c/span\u003e \u0026lt; \u0026lt;\u003cspan class=\"o\"\u003e(\u003c/span\u003eiconv \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e cp932 \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e UTF-8 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003einput_file\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-en\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\u003c/span\u003e\u003cspan class=\"s2\"\u003econverting \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003einput_file\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e...done.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u0026amp;2\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"converting csv...\"\u003c/span\u003e\nconvert_csv \u003cspan class=\"s1\"\u003e'./ships.csv'\u003c/span\u003e \u003cspan class=\"s1\"\u003e'SHIP'\u003c/span\u003e 1 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e'KCS_CUI/source/ships_test.csv'\u003c/span\u003e\nconvert_csv \u003cspan class=\"s1\"\u003e'./slotitems.csv'\u003c/span\u003e \u003cspan class=\"s1\"\u003e'WEAPON'\u003c/span\u003e 1 2 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e'KCS_CUI/source/slotitems_test.csv'\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"done.\"\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eShellScriptではあまり見ない\u003csup\u003e[\u003ca href=\"http://ansaikuropedia.org/wiki/%E8%A6%81%E5%87%BA%E5%85%B8\" rel=\"nofollow noopener\" target=\"_blank\"\u003e要出典\u003c/a\u003e]\u003c/sup\u003e二重ループの中にある\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e            elements[\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/\\//./g'\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eの部分です。\u003c/p\u003e\n\n\u003cp\u003e外部コマンド呼び出しだし、\u003cstrong\u003e\u003ccode\u003e$( )\u003c/code\u003eはサブシェル呼び出し\u003c/strong\u003eだし、\u003cstrong\u003eパイプ使っているし\u003c/strong\u003e、こんなもんを\u003ccode\u003efork()\u003c/code\u003eがないWindowsで実行すればそりゃ重いわな。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"いやそうは言っても文字列置換といえば\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%84%E3%82%84%E3%81%9D%E3%81%86%E3%81%AF%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%82%E6%96%87%E5%AD%97%E5%88%97%E7%BD%AE%E6%8F%9B%E3%81%A8%E3%81%84%E3%81%88%E3%81%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eいやそうは言っても文字列置換といえば\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eやっぱり文字列置換といえば\u003ccode\u003esed\u003c/code\u003eコマンド\u003c/strong\u003eですよね？\u003csup\u003e[\u003ca href=\"https://ja.wikipedia.org/wiki/Template:%E8%A6%81%E5%87%BA%E5%85%B8\" rel=\"nofollow noopener\" target=\"_blank\"\u003e要出典\u003c/a\u003e]\u003c/sup\u003eShellSciptなんかめったに書かないWindowsユーザーの私でも知ってるんだから間違いない。\u003csup\u003e[\u003ca href=\"https://ja.wikipedia.org/wiki/Wikipedia:%E7%8B%AC%E8%87%AA%E7%A0%94%E7%A9%B6%E3%81%AF%E8%BC%89%E3%81%9B%E3%81%AA%E3%81%84\" rel=\"nofollow noopener\" target=\"_blank\"\u003e独自研究\u003c/a\u003e]\u003c/sup\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"それ変数展開でできるよ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%8C%E5%A4%89%E6%95%B0%E5%B1%95%E9%96%8B%E3%81%A7%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそれ、変数展開でできるよ\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eシェルスクリプト高速化のツボ - 新・日々録 by TRASH BOX@Eel\u003cbr\u003e\n\u003ca href=\"http://d.hatena.ne.jp/eel3/20141026/1414292281\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://d.hatena.ne.jp/eel3/20141026/1414292281\u003c/a\u003e\u003cbr\u003e\nどうしてもループ構文を使う場合は、ループ中で外部コマンドを使わず、内部コマンド（ビルトインコマンド）で実現できないか検討すること。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとのことなので、頑張って初心者なりに探したところ\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ebashで変数内文字列の一部を置換する - 元RX-7乗りの適当な日々\u003cbr\u003e\n\u003ca href=\"http://d.hatena.ne.jp/rx7/20100625/p2\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://d.hatena.ne.jp/rx7/20100625/p2\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"bashで変数内文字列の一部を置換するadd-star\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#bash%E3%81%A7%E5%A4%89%E6%95%B0%E5%86%85%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E4%B8%80%E9%83%A8%E3%82%92%E7%BD%AE%E6%8F%9B%E3%81%99%E3%82%8Badd-star\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003ebashで変数内文字列の一部を置換するAdd Star\u003c/h1\u003e\n\n\u003cp\u003eこんなやり方もあった。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ STR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"I have a pen.\"\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eSTR\u003c/span\u003e\u003cspan class=\"p\"\u003e/pen/notebook\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\nI have a notebook.\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eん？なんだそれ？\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e特殊な変数展開 - Miuran Business Systems\u003cbr\u003e\n\u003ca href=\"http://www.m-bsys.com/linux/variable_expansion\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.m-bsys.com/linux/variable_expansion\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"変数からの簡易文字列編集\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%A4%89%E6%95%B0%E3%81%8B%E3%82%89%E3%81%AE%E7%B0%A1%E6%98%93%E6%96%87%E5%AD%97%E5%88%97%E7%B7%A8%E9%9B%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e変数からの簡易文字列編集\u003c/h2\u003e\n\n\u003cp\u003eパターンマッチングを使用した文字列編集も出来ます。ただ、一般的な正規表現が使えないため、私には使いづらいです…。単純な文字列パターンのときには有効です。「[0-9]」「[abc]」の等表現はOK、「*」は任意の文字列扱いになります。「任意の回数の繰り返し」は表現できません。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e表現\u003c/th\u003e\n\u003cth\u003e説明\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e${変数名#パターン}\u003c/td\u003e\n\u003ctd\u003e変数の先頭がパターンマッチした場合、最短マッチ部分を削除した文字列を返す。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e${変数名##パターン}\u003c/td\u003e\n\u003ctd\u003e変数の先頭がパターンマッチした場合、最長マッチ部分を削除した文字列を返す。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e${変数名%パターン}\u003c/td\u003e\n\u003ctd\u003e変数の末尾がパターンマッチした場合、最短マッチ部分を削除した文字列を返す。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e${変数名%%パターン}\u003c/td\u003e\n\u003ctd\u003e変数の末尾がパターンマッチした場合、最長マッチ部分を削除した文字列を返す。\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e${変数名/パターン/文字列}\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003e最初にパターンマッチした部分を文字列で置換した文字列を返す。\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003e${変数名//パターン/文字列}\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eパターンマッチしたすべての部分を文字列で置換した文字列を返す。\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eこれだ！\u003c/p\u003e\n\n\u003cp\u003e正規表現は使えませんが、今回の場合はそんな高等なものは必要ないのでこれで十分です。\u003c/p\u003e\n\n\u003cp\u003eつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ebefore\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e            elements[\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e | \u003cspan class=\"nb\"\u003esed\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s1\"\u003e's/\\//./g'\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eが\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/blob/14d402898172d8dc2742d88849794541c540a9e6/csv_convert.sh\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/14d402898172d8dc2742d88849794541c540a9e6/csv_convert.sh\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eafter\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e            elements[\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"o\"\u003e]=\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eelements\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"p\"\u003e]//\\//.\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこう書けるんですね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結果\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003e実行時間が30分から1分に短縮した\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e私「それなら待てるわ。」\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003e猫も杓子も\u003ccode\u003esed\u003c/code\u003e使うんじゃなくて、変数展開のことも思い出してあげてください。\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eそれはそうとMSははよう\u003ccode\u003efork()\u003c/code\u003e実装しろ\u003c/del\u003e\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e Win32/Win64 Subsystem は fork でない普通の CreateProcess の時点で既に遅いから 、fork が実装されたとしても factor 変わるだけで問題は解決しない気がする\u003c/p\u003e— akinomyoga (@akinomyoga) \u003ca href=\"https://twitter.com/akinomyoga/status/820312582854586368\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年1月14日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 隠し API ZwCreateProcess で fork ができるという話もある (詳しくは知らないけれど)。 \u003ca href=\"https://t.co/WcSCY57K8q\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/WcSCY57K8q\u003c/a\u003e\u003c/p\u003e— akinomyoga (@akinomyoga) \u003ca href=\"https://twitter.com/akinomyoga/status/820313320641024000\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年1月14日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 間違えた。パイプしない場合を聞きたかった。例えばこんな比較。 \u003ca href=\"https://t.co/wQ5l4iuo9R\" rel=\"nofollow noopener\" target=\"_blank\"\u003epic.twitter.com/wQ5l4iuo9R\u003c/a\u003e\u003c/p\u003e— 173210.go (@173210) \u003ca href=\"https://twitter.com/173210/status/820532462790930433\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年1月15日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/173210\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@173210\u003c/a\u003e \u003ca href=\"https://t.co/tafOYztIo5\" rel=\"nofollow noopener\" target=\"_blank\"\u003epic.twitter.com/tafOYztIo5\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/820534965959999488\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年1月15日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 決まりだな。MSYS環境でのパイプはクソ遅い。\u003c/p\u003e— 173210.go (@173210) \u003ca href=\"https://twitter.com/173210/status/820547844822089728\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2017年1月15日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n普段はC++の記事を投稿しています。\nしかし\nbashでもUTF-8 with BOMなファイルを作りたい - Qiita\nhttp://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\nに続き2日連続投稿だ、おおっと・・・？\n\n# 動機\n\nbashでもUTF-8 with BOMなファイルを作りたい - Qiita\nhttp://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b\n\nの続き。どうにかそれらしいShellScriptを書いた。\n**しかし重い。それくらい重いかというと、実行になんとまさかの30分かかる。**\n\n私「いくらなんでも30分とか動画のエンコードじゃあるまいし待てるか！」\n\n\n・・・あ、WindowsのMSYS2のBash上での話です。ssh越しに[某サーバー](http://173210.github.io/proot)のCentOS7のBashで動かしたところ3秒くらいで終わりました。\n\n原因は、**まあWindowsが``fork()``持ってないでいでしょ？ということにしておきます**。\n\n# 具体的に重かった部分\n\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/e1a97d29432a845e4834c5ff0dacd2d6fc94d5ad/csv_convert.sh\n\n```bash\n#!/bin/bash\n# @param input_file input file name\n# @param prefix C-Preprocesser-Macro-Function name\n# @param need_double_quote_index...\nfunction convert_csv(){\n  # argument\n  local -r input_file=$1\n  local -r prefix=$2\n  shift 2\n  local need_double_quote_index=($@)\n\n  local -r need_double_quote_index_len=${#need_double_quote_index[@]}\n  #write BOM\n  echo -en '\\xef\\xbb\\xbf'\n  local line_string\n  local is_first_line=1\n  while read -r line_string; do\n    if (( 1==is_first_line )); then\n      is_first_line=0\n      echo \"//PREFIX,${line_string:0:-1},POSTFIX\"\n    else\n        local IFS_BACKUP=$IFS\n        IFS=','\n        local elements=($line_string)\n        IFS=$IFS_BACKUP\n        local elements_len=${#elements[@]}\n        local i=0\n        local j\n        echo -en \"\\rconverting ${input_file}... id ${elements[0]}\" \u003e\u00262\n        # sleep 3s\n        for (( j=0; j \u003c elements_len; j++ )); do\n          if (( i \u003c need_double_quote_index_len \u0026\u0026 j == need_double_quote_index[i] )); then\n            # ダブルクオートで囲う必要がある時\n            elements[$j]=\"\\\"${elements[$j]}\\\"\"\n            (( i++ ))\n          else\n            elements[$j]=$(echo \"${elements[$j]}\" | sed -e 's/\\//./g')\n          fi\n        done\n        echo \"${prefix}(,$(IFS=,; echo \"${elements[*]}\"),)\"\n    fi\n  done \u003c \u003c(iconv -f cp932 -t UTF-8 \"${input_file}\")\n  echo -en \"\\rconverting ${input_file}...done.\\n\" \u003e\u00262\n}\necho \"converting csv...\"\nconvert_csv './ships.csv' 'SHIP' 1 \u003e 'KCS_CUI/source/ships_test.csv'\nconvert_csv './slotitems.csv' 'WEAPON' 1 2 \u003e 'KCS_CUI/source/slotitems_test.csv'\necho \"done.\"\n```\n\nShellScriptではあまり見ない\u003csup\u003e[[要出典](http://ansaikuropedia.org/wiki/%E8%A6%81%E5%87%BA%E5%85%B8)]\u003c/sup\u003e二重ループの中にある\n\n```bash\n            elements[$j]=$(echo \"${elements[$j]}\" | sed -e 's/\\//./g')\n```\n\nの部分です。\n\n外部コマンド呼び出しだし、**``$( )``はサブシェル呼び出し**だし、**パイプ使っているし**、こんなもんを``fork()``がないWindowsで実行すればそりゃ重いわな。\n\n# いやそうは言っても文字列置換といえば\n\n**やっぱり文字列置換といえば``sed``コマンド**ですよね？\u003csup\u003e[[要出典](https://ja.wikipedia.org/wiki/Template:%E8%A6%81%E5%87%BA%E5%85%B8)]\u003c/sup\u003eShellSciptなんかめったに書かないWindowsユーザーの私でも知ってるんだから間違いない。\u003csup\u003e[[独自研究](https://ja.wikipedia.org/wiki/Wikipedia:%E7%8B%AC%E8%87%AA%E7%A0%94%E7%A9%B6%E3%81%AF%E8%BC%89%E3%81%9B%E3%81%AA%E3%81%84)]\u003c/sup\u003e\n\n# それ、変数展開でできるよ\n\n\u003eシェルスクリプト高速化のツボ - 新・日々録 by TRASH BOX@Eel\nhttp://d.hatena.ne.jp/eel3/20141026/1414292281\n\u003eどうしてもループ構文を使う場合は、ループ中で外部コマンドを使わず、内部コマンド（ビルトインコマンド）で実現できないか検討すること。\n\nとのことなので、頑張って初心者なりに探したところ\n\n\u003ebashで変数内文字列の一部を置換する - 元RX-7乗りの適当な日々\nhttp://d.hatena.ne.jp/rx7/20100625/p2\n\n\u003e# bashで変数内文字列の一部を置換するAdd Star\n\n\u003eこんなやり方もあった。\n\n\u003e```bash\n$ STR=\"I have a pen.\"\n$ echo ${STR/pen/notebook}\nI have a notebook.\n```\n\nん？なんだそれ？\n\n\u003e特殊な変数展開 - Miuran Business Systems\nhttp://www.m-bsys.com/linux/variable_expansion\n\n\u003e## 変数からの簡易文字列編集\n\n\u003eパターンマッチングを使用した文字列編集も出来ます。ただ、一般的な正規表現が使えないため、私には使いづらいです…。単純な文字列パターンのときには有効です。「[0-9]」「[abc]」の等表現はOK、「*」は任意の文字列扱いになります。「任意の回数の繰り返し」は表現できません。\n\n\u003e\n| 表現                       | 説明                                                                       |\n|----------------------------|----------------------------------------------------------------------------|\n| ${変数名#パターン}         | 変数の先頭がパターンマッチした場合、最短マッチ部分を削除した文字列を返す。 |\n| ${変数名##パターン}        | 変数の先頭がパターンマッチした場合、最長マッチ部分を削除した文字列を返す。 |\n| ${変数名%パターン}         | 変数の末尾がパターンマッチした場合、最短マッチ部分を削除した文字列を返す。 |\n| ${変数名%%パターン}        | 変数の末尾がパターンマッチした場合、最長マッチ部分を削除した文字列を返す。 |\n| **${変数名/パターン/文字列}**  | **最初にパターンマッチした部分を文字列で置換した文字列を返す。**               |\n| **${変数名//パターン/文字列}** | **パターンマッチしたすべての部分を文字列で置換した文字列を返す。**             |\n\n\nこれだ！\n\n正規表現は使えませんが、今回の場合はそんな高等なものは必要ないのでこれで十分です。\n\n\nつまり\n\n\n```bash:before\n            elements[$j]=$(echo \"${elements[$j]}\" | sed -e 's/\\//./g')\n```\n\nが\n\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/14d402898172d8dc2742d88849794541c540a9e6/csv_convert.sh\n\n```bash:after\n            elements[$j]=${elements[$j]//\\//.}\n```\n\nこう書けるんですね。\n\n# 結果\n\n**実行時間が30分から1分に短縮した**\n\n私「それなら待てるわ。」\n\n# 結論\n\n猫も杓子も``sed``使うんじゃなくて、変数展開のことも思い出してあげてください。\n\n~~それはそうとMSははよう``fork()``実装しろ~~\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e Win32/Win64 Subsystem は fork でない普通の CreateProcess の時点で既に遅いから 、fork が実装されたとしても factor 変わるだけで問題は解決しない気がする\u003c/p\u003e\u0026mdash; akinomyoga (@akinomyoga) \u003ca href=\"https://twitter.com/akinomyoga/status/820312582854586368\"\u003e2017年1月14日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 隠し API ZwCreateProcess で fork ができるという話もある (詳しくは知らないけれど)。 \u003ca href=\"https://t.co/WcSCY57K8q\"\u003ehttps://t.co/WcSCY57K8q\u003c/a\u003e\u003c/p\u003e\u0026mdash; akinomyoga (@akinomyoga) \u003ca href=\"https://twitter.com/akinomyoga/status/820313320641024000\"\u003e2017年1月14日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 間違えた。パイプしない場合を聞きたかった。例えばこんな比較。 \u003ca href=\"https://t.co/wQ5l4iuo9R\"\u003epic.twitter.com/wQ5l4iuo9R\u003c/a\u003e\u003c/p\u003e\u0026mdash; 173210.go (@173210) \u003ca href=\"https://twitter.com/173210/status/820532462790930433\"\u003e2017年1月15日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"und\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/173210\"\u003e@173210\u003c/a\u003e \u003ca href=\"https://t.co/tafOYztIo5\"\u003epic.twitter.com/tafOYztIo5\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/820534965959999488\"\u003e2017年1月15日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 決まりだな。MSYS環境でのパイプはクソ遅い。\u003c/p\u003e\u0026mdash; 173210.go (@173210) \u003ca href=\"https://twitter.com/173210/status/820547844822089728\"\u003e2017年1月15日\u003c/a\u003e\u003c/blockquote\u003e\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":2,"created_at":"2017-01-15T01:34:26+09:00","group":null,"id":"3665e343c8063f56ab6a","likes_count":29,"private":false,"reactions_count":0,"tags":[{"name":"ShellScript","versions":[]},{"name":"Bash","versions":[]}],"title":"sedなんか投げ捨てて変数展開で高速に文字列を置換しよう","updated_at":"2019-04-03T14:08:33+09:00","url":"https://qiita.com/yumetodo/items/3665e343c8063f56ab6a","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e普段はC++の記事を投稿しています。\u003cbr\u003e\nWindows使いなもんで、Bashを使うのに\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCmder + ComEmu + MSYS2 + bash\u003c/li\u003e\n\u003cli\u003eCmder + ComEmu + MSYS2 + bash + SSHでLinuxへ + bash\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://173210.github.io/proot\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCmder + ComEmu + MSYS2 + bash + SSHでLinuxへ + bash + prootでarchilinuxを動かして + bash\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eとかしてやってます(どんだけ間に挟むんだ)\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動機\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E6%A9%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動機\u003c/h1\u003e\n\n\u003cp\u003eちょっとcsvを自動加工する必要が出てきまして、Windows向けにpowershellとLinux向けにShellScript(on bash)を書くことになったんですね。\u003c/p\u003e\n\n\u003cp\u003e要件として、出力ファイルは\u003cstrong\u003eUTF-8 with BOM\u003c/strong\u003eにしたいというものがありまして、powershellだと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"ps1\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\"arikitari\" | out-file -encoding:utf8 $out_file\n\"na\" | Add-Content -encoding:utf8 $out_file\n\"world!\" | Add-Content -encoding:utf8 $out_file\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとかすれば良かったりするんですが、はて、これはShellScript(on bash)ではどうすればいいのかな、と。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"先行例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%85%88%E8%A1%8C%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e先行例\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"http://unicus.jp/skmk/archives/498\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコマンドラインでUTF-8テキストのBOMを追加したり削除したりする – skmks\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eもちろんそういうことを思う人は私だけではないわけで、先行例がありました。\u003cbr\u003e\nここでは\u003ccode\u003enkf\u003c/code\u003eコマンドと\u003ccode\u003euconv\u003c/code\u003eコマンドを使う2つの例が出ていました。\u003cbr\u003e\nそして\u003cstrong\u003e多分、\u003ccode\u003enkf\u003c/code\u003eコマンドを使うのが王道\u003c/strong\u003eなんでしょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問題点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題点\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F226d5c70-f635-f92a-d0a8-fb22161d26b1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b0bc00389aa0e3a0269d2ea72c24149a\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F226d5c70-f635-f92a-d0a8-fb22161d26b1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b0bc00389aa0e3a0269d2ea72c24149a\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/226d5c70-f635-f92a-d0a8-fb22161d26b1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F226d5c70-f635-f92a-d0a8-fb22161d26b1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=9c1d09d40b93c64acd907d000fd8fd1d 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003enkf\u003c/code\u003eコマンドも\u003ccode\u003euconv\u003c/code\u003eコマンドも普通(CentOS 7)入っていないんですね！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ではどうするか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eではどうするか\u003c/h1\u003e\n\n\u003cp\u003e解決の糸口となったのがこの記事です。\u003c/p\u003e\n\n\u003cp\u003eBash/Zsh スクリプトならバイナリを扱える。さて何をしよう……\u003cbr\u003e\n\u003ca href=\"http://qiita.com/akinomyoga/items/215faa630508ffc6e6e0\" class=\"autolink\" id=\"reference-3765f46da56064ec018c\"\u003ehttp://qiita.com/akinomyoga/items/215faa630508ffc6e6e0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eどうやらbash/zshでならバイナリを扱えるというではないですか。\u003cbr\u003e\nつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eUTF-8のBOM\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e0xEF 0xBB 0xBF\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eを直接書き込めばいいわけです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"というわけで実装した\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%81%84%E3%81%86%E3%82%8F%E3%81%91%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eというわけで実装した\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ewritebinary \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003eLC_ALL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eC \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\\\\x%x'\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ewrite_utf8_bom \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e#BOM:0xEF 0xBB 0xBF\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003elocal\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003e239 187 191\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n  writebinary \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\nwrite_utf8_bom bom.txt\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"arikitari\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e bom.txt\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"na\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e bom.txt\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"world!\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e bom.txt\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e確認してみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$hexdump\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e bom.txt\n00000000  ef bb bf 61 72 69 6b 69  74 61 72 69 0a 6e 61 0a  |...arikitari.na.|\n00000010  77 6f 72 6c 64 21 0a                              |world!.|\n00000017\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eいいですね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"/kkdd\" class=\"user-mention js-hovercard\" title=\"kkdd\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"kkdd\"\u003e@kkdd\u003c/a\u003e さんから教えてもらったので。\u003c/p\u003e\n\n\u003cp\u003eまず\u003ccode\u003eecho\u003c/code\u003eコマンドのmanを覗いてみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eECHO\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e                                                                                                 User Commands                                                                                                ECHO\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\nNAME\n       \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e - display a line of text\n\nSYNOPSIS\n       \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eSHORT-OPTION]... \u003cspan class=\"o\"\u003e[\u003c/span\u003eSTRING]...\n       \u003cspan class=\"nb\"\u003eecho \u003c/span\u003eLONG-OPTION\n\nDESCRIPTION\n       Echo the STRING\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\n       \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e     \u003cspan class=\"k\"\u003edo \u003c/span\u003enot output the trailing newline\n\n       \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e     \u003cspan class=\"nb\"\u003eenable \u003c/span\u003einterpretation of backslash escapes\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e改行を阻止する\u003ccode\u003e-n\u003c/code\u003eとエスケープを使えるようにする\u003ccode\u003e-e\u003c/code\u003eを組み合わせると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"bash\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction \u003c/span\u003ef\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-en\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\\xef\\xbb\\xbf'\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"arikiari\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"na\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"world!\"\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\nf \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e bom.txt\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$hexdump\u003c/span\u003e \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e bom.txt\n00000000  ef bb bf 61 72 69 6b 69  61 72 69 0a 6e 61 0a 77  |...arikiari.na.w|\n00000010  6f 72 6c 64 21 0a                                 |orld!.|\n00000016\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同じ結果が得られたゾイ！これはいい。教えていただきありがとうございます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003eところでこれ、\u003ccode\u003e#!/bin/bash\u003c/code\u003eを\u003ccode\u003e#!/bin/sh\u003c/code\u003eにしても動くんですが、うーむ、わかんねぇ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\n普段はC++の記事を投稿しています。\nWindows使いなもんで、Bashを使うのに\n\n- Cmder + ComEmu + MSYS2 + bash\n- Cmder + ComEmu + MSYS2 + bash + SSHでLinuxへ + bash\n- [Cmder + ComEmu + MSYS2 + bash + SSHでLinuxへ + bash + prootでarchilinuxを動かして + bash](http://173210.github.io/proot)\n\nとかしてやってます(どんだけ間に挟むんだ)\n\n# 動機\n\nちょっとcsvを自動加工する必要が出てきまして、Windows向けにpowershellとLinux向けにShellScript(on bash)を書くことになったんですね。\n\n要件として、出力ファイルは**UTF-8 with BOM**にしたいというものがありまして、powershellだと\n\n```ps1\n\"arikitari\" | out-file -encoding:utf8 $out_file\n\"na\" | Add-Content -encoding:utf8 $out_file\n\"world!\" | Add-Content -encoding:utf8 $out_file\n```\n\nとかすれば良かったりするんですが、はて、これはShellScript(on bash)ではどうすればいいのかな、と。\n\n# 先行例\n\n[コマンドラインでUTF-8テキストのBOMを追加したり削除したりする – skmks](http://unicus.jp/skmk/archives/498)\n\nもちろんそういうことを思う人は私だけではないわけで、先行例がありました。\nここでは``nkf``コマンドと``uconv``コマンドを使う2つの例が出ていました。\nそして**多分、``nkf``コマンドを使うのが王道**なんでしょう。\n\n# 問題点\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/94177/226d5c70-f635-f92a-d0a8-fb22161d26b1.png)\n\n``nkf``コマンドも``uconv``コマンドも普通(CentOS 7)入っていないんですね！\n\n# ではどうするか\n\n解決の糸口となったのがこの記事です。\n\nBash/Zsh スクリプトならバイナリを扱える。さて何をしよう……\nhttp://qiita.com/akinomyoga/items/215faa630508ffc6e6e0\n\nどうやらbash/zshでならバイナリを扱えるというではないですか。\nつまり\n\n```plain:UTF-8のBOM\n0xEF 0xBB 0xBF\n```\n\nを直接書き込めばいいわけです。\n\n# というわけで実装した\n\n```bash\n#!/bin/bash\nfunction writebinary {\n  LC_ALL=C printf \"$(printf '\\\\x%x' \"${data[@]}\")\" \u003e \"$1\"\n}\nfunction write_utf8_bom {\n  #BOM:0xEF 0xBB 0xBF\n  local -a data=(239 187 191)\n  writebinary $1\n}\nwrite_utf8_bom bom.txt\necho \"arikitari\" \u003e\u003e bom.txt\necho \"na\" \u003e\u003e bom.txt\necho \"world!\" \u003e\u003e bom.txt\n```\n\n確認してみましょう。\n\n```sh\n$hexdump -C bom.txt\n00000000  ef bb bf 61 72 69 6b 69  74 61 72 69 0a 6e 61 0a  |...arikitari.na.|\n00000010  77 6f 72 6c 64 21 0a                              |world!.|\n00000017\n```\n\nいいですね。\n\n# 追記\n@kkdd さんから教えてもらったので。\n\nまず``echo``コマンドのmanを覗いてみましょう。\n\n```sh\nECHO(1)                                                                                                 User Commands                                                                                                ECHO(1)\n\nNAME\n       echo - display a line of text\n\nSYNOPSIS\n       echo [SHORT-OPTION]... [STRING]...\n       echo LONG-OPTION\n\nDESCRIPTION\n       Echo the STRING(s) to standard output.\n\n       -n     do not output the trailing newline\n\n       -e     enable interpretation of backslash escapes\n```\n\n改行を阻止する``-n``とエスケープを使えるようにする``-e``を組み合わせると\n\n```bash\n#!/bin/bash\nfunction f()\n{\n  echo -en '\\xef\\xbb\\xbf'\n  echo \"arikiari\"\n  echo \"na\"\n  echo \"world!\"\n}\nf \u003e bom.txt\n```\n\n```sh\n$hexdump -C bom.txt\n00000000  ef bb bf 61 72 69 6b 69  61 72 69 0a 6e 61 0a 77  |...arikiari.na.w|\n00000010  6f 72 6c 64 21 0a                                 |orld!.|\n00000016\n```\n\n同じ結果が得られたゾイ！これはいい。教えていただきありがとうございます。\n\n\n# 余談\n\nところでこれ、``#!/bin/bash``を``#!/bin/sh``にしても動くんですが、うーむ、わかんねぇ。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n","coediting":false,"comments_count":6,"created_at":"2017-01-14T14:26:37+09:00","group":null,"id":"38e17f6f5a8ef9860f5b","likes_count":10,"private":false,"reactions_count":0,"tags":[{"name":"ShellScript","versions":[]},{"name":"Bash","versions":[]},{"name":"UTF-8","versions":[]},{"name":"bom","versions":[]}],"title":"bashでもUTF-8 with BOMなファイルを作りたい","updated_at":"2019-04-03T14:10:13+09:00","url":"https://qiita.com/yumetodo/items/38e17f6f5a8ef9860f5b","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"初心者cadvent-calendar-2016\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E5%BF%83%E8%80%85cadvent-calendar-2016\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初心者C++Advent Calendar 2016\u003c/h1\u003e\n\n\u003cp\u003eこの記事は初心者C++Advent Calendar 2016 15日目の記事です\u003cbr\u003e\n\u003ca href=\"http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u0026lt;\u0026lt; 14日目 | ポインタと仲良くなる話 【初心者C++er Advent Calendar 2016 - 14日目】 - をるふちゃんのブログ\u003c/a\u003e || \u003ca href=\"http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276\" id=\"reference-690d0a57102e0086154a\"\u003e16日目 | C++の乱数ライブラリが使いにくい話 \u0026gt;\u0026gt;\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e遅刻してすみません。\u003cbr\u003e\n\u003ca href=\"http://nagarei.github.io/DxLibEx/research_note/DxLib%E8%A7%A3%E5%89%96%E5%AD%A6LoadSoundMem%E3%81%A8LoadBGM.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eDxLib解剖学LoadSoundMemとLoadBGM - DxLibEx Research Notes\u003c/a\u003e\u003cbr\u003e\nを書くための調査をしていたら、相当時間を取られました。\u003c/p\u003e\n\n\u003cp\u003e今回初心者AdCはなんか過疎ってますねぇ・・・。ほんわかした記事が多い中、\u003ca href=\"http://qiita.com/kazatsuyu/items/478c55de0f75ea5904bd\" id=\"reference-940ff6a3ab9e089e1527\"\u003eハローワールド徹底解説\u003c/a\u003eというヤバそうな記事があったりします、いつものことか。\u003c/p\u003e\n\n\u003cp\u003e去年ほど初心者詐欺な記事がないので、\u003ca href=\"http://qiita.com/yumetodo/items/a843bd542106215bbc84\" id=\"reference-f5832391f8fed0b04008\"\u003eC++erを簡易的にレベル分けすることで初心者詐欺を減らそうという試み\u003c/a\u003eが功を奏したのかなぁ？と\u003cstrong\u003eこじつけておきます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e皆様、\u003ca href=\"http://www.nicovideo.jp/watch/sm25261912\" rel=\"nofollow noopener\" target=\"_blank\"\u003eナマステ\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e今回はイテレータについて書いていきます。え？イテレータの解説をするなんて\u003ca href=\"http://www.nicovideo.jp/watch/sm26588134\" rel=\"nofollow noopener\" target=\"_blank\"\u003e今更佳代\u003c/a\u003eだって？\u003cdel\u003eそれを言ったらネタがない\u003c/del\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"イテレータとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイテレータとは\u003c/h1\u003e\n\n\u003cp\u003eイテレータとはなにもC++に固有な概念ではありません。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eイテレータ - Wikipedia\u003cbr\u003e\n\u003ca href=\"https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\u003c/a\u003e\u003cbr\u003e\nイテレータ（英語: Iterator）とは、プログラミング言語において配列やそれに類似するデータ構造の各要素に対する繰返し処理の抽象化である。実際のプログラミング言語では、オブジェクトまたは文法などとして現れる。反復するためのものの意味で反復子（はんぷくし）と訳される。繰返子（くりかえし）という一般的ではない訳語もある。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e一般には配列のようなものを順番にたどるためのものです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cにおけるイテレータとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++におけるイテレータとは\u003c/h1\u003e\n\n\u003cp\u003eまあその気になればなんでも作れますが、一般的に見かけるイテレータたちを。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"コンテナに対するイテレータ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコンテナに対するイテレータ\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"p\"\u003e}};\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003estd::array\u003c/code\u003eや\u003ccode\u003estd::vector\u003c/code\u003e、\u003ccode\u003estd::unordered_map\u003c/code\u003eに代表されるコンテナクラスはメンバ関数\u003ccode\u003ebegin()\u003c/code\u003eと\u003ccode\u003eend()\u003c/code\u003eを持っています。この2つのメンバ関数は\u003ca href=\"https://cpprefjp.github.io/reference/iterator/begin.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::begin()\u003c/code\u003e\u003c/a\u003e/\u003ca href=\"https://cpprefjp.github.io/reference/iterator/end.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::end()\u003c/code\u003e\u003c/a\u003eを介して呼び出すこともできます。\u003c/p\u003e\n\n\u003cp\u003eイテレータをすすめるには\u003ccode\u003eoperator++\u003c/code\u003eを呼ぶか、\u003ca href=\"https://cpprefjp.github.io/reference/iterator/next.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::next()\u003c/code\u003e\u003c/a\u003eが利用できます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"c形式の配列に対するイテレータ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E5%BD%A2%E5%BC%8F%E3%81%AE%E9%85%8D%E5%88%97%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC形式の配列に対するイテレータ\u003c/h2\u003e\n\n\u003cp\u003eつまりポインタです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e配列の長さを求めて足し算して・・・というコードを自分で書くのはだるいので、\u003ca href=\"https://cpprefjp.github.io/reference/iterator/begin.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::begin()\u003c/code\u003e\u003c/a\u003e/\u003ca href=\"https://cpprefjp.github.io/reference/iterator/end.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::end()\u003c/code\u003e\u003c/a\u003eがイテレータと同じく利用できます。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"streamに対するイテレータ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stream%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estreamに対するイテレータ\u003c/h2\u003e\n\n\u003cp\u003eこれはあまり馴染みが無いかもしれません。サンプルコードはcpprefjpのものです\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://cpprefjp.github.io/reference/iterator/istream_iterator.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eistream_iterator - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ecpprefjpより\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;iterator\u0026gt;\n#include \u0026lt;sstream\u0026gt;\n#include \u0026lt;algorithm\u0026gt; // for_each\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// 文字列の入力ストリームにデータを入れる\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estringstream\u003c/span\u003e \u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ess\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n     \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n     \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// 文字列の入力ストリームからデータを読み込むイテレータを作る\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ess\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// イテレータを進めることにより、入力ストリームからデータを順に読み取る\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efor_each\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elast\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"イテレータの種類\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E7%A8%AE%E9%A1%9E\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイテレータの種類\u003c/h1\u003e\n\n\u003cp\u003eEZ-NET: 独自のイテレータを実装する - C++ プログラミング\u003cbr\u003e\n\u003ca href=\"http://program.station.ez-net.jp/special/handbook/cpp/stl/iterator-make.asp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://program.station.ez-net.jp/special/handbook/cpp/stl/iterator-make.asp\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eにキレイにまとまっています。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fraw.github.com%2Fcpprefjp%2Fimage%2Fmaster%2Freference%2Fiterator%2Fiterators.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=41a0bc67e3204c4b9034e3413e8a5ffd\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fraw.github.com%2Fcpprefjp%2Fimage%2Fmaster%2Freference%2Fiterator%2Fiterators.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=41a0bc67e3204c4b9034e3413e8a5ffd\" alt=\"cpprefjp\" data-canonical-src=\"https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fraw.github.com%2Fcpprefjp%2Fimage%2Fmaster%2Freference%2Fiterator%2Fiterators.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=ce55c1bcba545528c25b640d9b678dd0 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\ncpprefjp CC-BY\u003c/p\u003e\n\n\u003cp\u003eついでに\u003cbr\u003e\niterator - cpprefjp C++日本語リファレンス\u003cbr\u003e\n\u003ca href=\"https://cpprefjp.github.io/reference/iterator.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpprefjp.github.io/reference/iterator.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eも見るといいです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"range-based-forとイテレータ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#range-based-for%E3%81%A8%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eRange-based forとイテレータ\u003c/h1\u003e\n\n\u003cp\u003eメンバ関数\u003ccode\u003ebegin()\u003c/code\u003e/\u003ccode\u003eend()\u003c/code\u003eというはじめと終わりを指すイテレータがあるクラスを、範囲を持つクラスとかRange Conceptを満たしたクラスとか言いますが、こういったクラスやC形式の配列などはRange-based forに渡すことができます。\u003c/p\u003e\n\n\u003cp\u003eつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eRange-based_for不使用\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;array\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", \"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこれが\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eRange-based_for使用\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;array\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\", \"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこう書けるということです。ちなみに\u003ccode\u003eauto\u0026amp;\u0026amp;\u003c/code\u003eはRange-based forを使うときのおまじないなので、おまじないの原理については\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/rinse_/items/cdfce8aa6a685a8ebe0c\" id=\"reference-3b0dcfa97916b8fb5140\"\u003erange-based for loopsの要素の型について\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/yumetodo/items/e49a673afd9a3ecb81a8#range-based-for\" id=\"reference-76477e8d7e395ac85a25\"\u003eC99からC++14を駆け抜けるC++講座 - Qiita\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eを見てください。\u003c/p\u003e\n\n\u003cp\u003eちなみに細工なしで書けるトリッキーなRange-based forの使い方としては\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e文字列リテラルはC形式の配列型\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\"arikitari\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/eqnh68PPOp4Qh1Am\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/eqnh68PPOp4Qh1Am\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003einitizer_listはRangeConceptを満たす\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/8e1sxPN3Kq5I2Zg2\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/8e1sxPN3Kq5I2Zg2\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなんかがあります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"イテレータをラップするイテレータを作る\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E3%83%A9%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイテレータをラップするイテレータを作る\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003estruct Circle {\u003cbr\u003e  Vec2f pos;\u003cbr\u003e  float size;\u003cbr\u003e}\u003cbr\u003evector\u0026lt;Circle\u0026gt; circles;\u003cbr\u003eこのcirclesからVec2f* (posのみの配列のポインタがほちい\u003c/p\u003e— Yanai＠ふちゃきちLove (@Lost206) \u003ca href=\"https://twitter.com/Lost206/status/794347773428580352\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年11月4日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e例えばopenFrameworksみたいに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003efloat\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"kt\"\u003efloat\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e \u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003efloat\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんなクラスがあるとします。さて、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecircles\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんなふうにvectorに入れて管理していたとして、posを取ってくるのに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecircles\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecircles\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにするのはだるい、どのくらいだるいかというと(ry。\u003cbr\u003e\n最初から\u003ccode\u003eCircle::size\u003c/code\u003eなんか無視して\u003ccode\u003eCircle::pos\u003c/code\u003eだけほしい。\u003cbr\u003e\nつまりそのようなイテレータを自作すればいいんですね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"stditeratorは非推奨になったから継承してはいけない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stditerator%E3%81%AF%E9%9D%9E%E6%8E%A8%E5%A5%A8%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%8B%E3%82%89%E7%B6%99%E6%89%BF%E3%81%97%E3%81%A6%E3%81%AF%E3%81%84%E3%81%91%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003estd::iterator\u003c/code\u003eは非推奨になったから継承してはいけない\u003c/h2\u003e\n\n\u003cp\u003eここで注意点があります\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://faithandbrave.hateblo.jp/entry/2016/09/12/145923\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++1z 古くなった機能を非推奨化 - Faith and Brave - C++で遊ぼう\u003c/a\u003e\u003cbr\u003e\nC++1zから、標準ライブラリのいくつかの機能が非推奨となります。\u003cstrong\u003e非推奨となった機能は将来のバージョンで削除される可能性があります\u003c/strong\u003eのでご注意ください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stditeratorクラス\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stditerator%E3%82%AF%E3%83%A9%E3%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estd::iteratorクラス\u003c/h1\u003e\n\n\u003cp\u003e自作イテレータを作るときに基本クラスとして使用する\u003cstrong\u003estd::iteratorクラスですが、これを使ってもイテレータを定義するのはあまり簡単になりませんでした\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eこのクラスを使用することによって問題がより複雑になってしまうケースもありましたので、\u003cstrong\u003e非推奨となります\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eBoost.Iteratorのような\u003cstrong\u003eイテレータを簡単に定義するための新たな仕組みは提供されませんので\u003c/strong\u003e、標準ライブラリの範囲では、イテレータは最初から最後まで自分で定義することになります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eはい。\u003cstrong\u003eイテレータを自作するときは\u003ccode\u003estd::iterator\u003c/code\u003eを継承する、という常識は過去のものになります\u003c/strong\u003e。\u003cbr\u003e\nイテレータを作る！みたいな解説サイトはたくさんありますが、この点に十分注意してください。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"作ってみた\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e作ってみた\u003c/h2\u003e\n\n\u003cp\u003eイテレーターをラップしてイテレータを作る練習\u003cbr\u003e\n\u003ca href=\"https://gist.github.com/yumetodo/b0f82fc44e0e4d842c45f7596a6a0b49\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://gist.github.com/yumetodo/b0f82fc44e0e4d842c45f7596a6a0b49\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eちょっと抜粋します\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"まずはイテレータ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまずはイテレータ\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_same\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ecircle_pos_iterator\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if __cplusplus \u0026lt; 201500 //C++17ではstd::iteratorは消える\n\u003c/span\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eref_iterator_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eref_iterator_type\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if __cplusplus \u0026lt; 201500\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eref_iterator_type\u003c/span\u003e \u003cspan class=\"n\"\u003eget_raw_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if __cplusplus \u0026lt; 201500  \n\u003c/span\u003e    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003edifference_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003edifference_type\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003epointer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epointer\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ereference\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_type\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereference\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003edifference_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eptrdiff_t\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003epointer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ereference\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVec2f\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eもととなるイテレータの形がtemplate引数の\u003ccode\u003eIterator\u003c/code\u003eです。さっきも言ったように\u003ccode\u003estd::iterator\u003c/code\u003eは非推奨になるので\u003ccode\u003e#ifdef\u003c/code\u003eで分けています。\u003c/p\u003e\n\n\u003cp\u003eもとのイテレータをクラス内部に持っておいてこいつを操作しつつ、結果を返します。\u003c/p\u003e\n\n\u003cp\u003eイテレータクラスとしてpublicに型定義しておくべきなのは、\u003ccode\u003eiterator_category\u003c/code\u003e, \u003ccode\u003evalue_type\u003c/code\u003e, \u003ccode\u003edifference_type\u003c/code\u003e, \u003ccode\u003epointer\u003c/code\u003e, \u003ccode\u003ereference\u003c/code\u003eあたりでしょうか。この辺は定義しておくことをおすすめします。特に\u003ccode\u003eiterator_category\u003c/code\u003eはさっき言ったイテレータの種類に当たるもので、SFINAEなんかで利用されることが多いので忘れずに定義しましょう。\u003c/p\u003e\n\n\u003cp\u003eあとはひたすらoperator overloadを書いているだけですが、もととなるイテレータの種類によっては定義できないoperatorもあるので\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_base_of\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebidirectional_iterator_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな感じで弾いています。ちなみに\u003ccode\u003estd::enable_if_t\u003c/code\u003eはC++14からなので、C++11で使うときは自分でalias templateを書きましょう。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"次にrange\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%AC%A1%E3%81%ABrange\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e次にRange\u003c/h3\u003e\n\n\u003cp\u003e次に、これをRange-based forに渡すためにRangeを作ります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003eend_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIt\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIt\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eend_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eend_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ebegin()\u003c/code\u003e/\u003ccode\u003eend()\u003c/code\u003eがあるだけでとくに何もしていません。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"factory関数\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#factory%E9%96%A2%E6%95%B0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eFactory関数\u003c/h3\u003e\n\n\u003cp\u003e最後にこのRangeクラスのFactory関数を作ります。いわゆるmake_xxx系関数ですね。\u003c/p\u003e\n\n\u003cp\u003eなんで必要かというと、C++14まではクラスのテンプレート実引数推定ができないので\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにtemplate実引数を書くことになってしまうんですね、ダサい。\u003c/p\u003e\n\n\u003cp\u003eそこで\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eIt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_same\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eIt\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eIt\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIt\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eContainer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eContainer\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eContainer\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecircle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"n\"\u003eN\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにラッパー関数を書きます。これで\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eCircle\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCircle\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emake_circle_pos_iterator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように書けます。\u003c/p\u003e\n\n\u003cp\u003eちなみにC++17では\u003c/p\u003e\n\n\u003cp\u003e本の虫: C++17のクラスのテンプレート実引数推定\u003cbr\u003e\n\u003ca href=\"https://cpplover.blogspot.jp/2016/10/blog-post_11.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpplover.blogspot.jp/2016/10/blog-post_11.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eクラスのテンプレート実引数推定があるのでこれはいらなかったりします。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"コルーチンもyield文もないけどpythonのジェネレータが欲しいのでイテレータで頑張る\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3%E3%82%82yield%E6%96%87%E3%82%82%E3%81%AA%E3%81%84%E3%81%91%E3%81%A9python%E3%81%AE%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%8C%E6%AC%B2%E3%81%97%E3%81%84%E3%81%AE%E3%81%A7%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7%E9%A0%91%E5%BC%B5%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコルーチンもyield文もないけどpythonのジェネレータが欲しいのでイテレータで頑張る\u003c/h1\u003e\n\n\u003cp\u003eごめんなさい、pythonのジェネレータの前にpython書いた事自体があんま無いです。\u003c/p\u003e\n\n\u003cp\u003eそれはそうとして、Range-based forで延々と乱数を取ってくるイテレータを考えてみます。\u003c/p\u003e\n\n\u003cp\u003epythonで言えば\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://paiza.io/projects/hKd6EzaazTyo1z00ObSegA\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://paiza.io/projects/hKd6EzaazTyo1z00ObSegA\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"python\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003erandom\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003erandint\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"n\"\u003erandint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erandom_generator_range_with_count\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eyield\u003c/span\u003e \u003cspan class=\"n\"\u003erandint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"generate: random_generator_range\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"generate: random_generator_range_with_count\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range_with_count\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんなかんじかな？\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"ジェネレータってイテレータのシンタックスシュガーだよね無知\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A3%E3%81%A6%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%82%B7%E3%83%A5%E3%82%AC%E3%83%BC%E3%81%A0%E3%82%88%E3%81%AD%E7%84%A1%E7%9F%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eジェネレータってイテレータのシンタックスシュガーだよね？(無知)\u003c/h2\u003e\n\n\u003cp\u003epython詳しくないので(2回目)よく知りませんが、コード例見ている感じこれイテレータですよね？(無知)\u003c/p\u003e\n\n\u003cp\u003eジェネレータも\u003ccode\u003eyield\u003c/code\u003eもC++にはないですが、イテレータならあります。ならば作れそうです。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実装した\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装した\u003c/h2\u003e\n\n\u003cp\u003eというわけで作りました。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"イテレータクラス\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eイテレータクラス\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003erandom_generator_iterator\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator_base\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if __cplusplus \u0026lt; 201500 //C++17ではstd::iteratorは消える\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eiterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einput_iterator_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//中略\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euniform_normal_distribution\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e \u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereference_wrapper\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003enext_is_end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003enext_is_end\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunique_ptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unique\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eimpl\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_is_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003egenerate\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_is_end\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003epimpl_\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003enext_is_end\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eis_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまず、乱数生成器をどうするかという問題があります。\u003c/p\u003e\n\n\u003cp\u003eC++の乱数ライブラリは\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e乱数生成器\u003c/li\u003e\n\u003cli\u003eDistribution(ディストリビューション)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eを分離した設計になっています。ここで\u003cstrong\u003e乱数生成器は基本的には各スレッドで一個持って使いまわすことを想定しています\u003c/strong\u003e。\u003cbr\u003e\nつまり乱数生成を行うイテレータは\u003cstrong\u003e乱数生成器への参照を保持する必要があります\u003c/strong\u003e。\u003cbr\u003e\nということは\u003ccode\u003estd::reference_wrapper\u003c/code\u003eの出番ですね！\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"range-based-forの注意点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#range-based-for%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003erange-based forの注意点\u003c/h4\u003e\n\n\u003cp\u003eC++14までは、range-based forは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++14\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e__range\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erange_expression\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003e__begin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e__end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eend_expr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003e__begin\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003e__end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003e__begin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n        \u003cspan class=\"n\"\u003erange_declaration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003e__begin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eloop_statement\u003c/span\u003e \n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのシンタックスシュガーとして定義されていました。\u003cstrong\u003eつまり、beginイテレータとendイテレータは同じ型である必要がありました。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eC++17からは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++17\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e__range\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erange_expression\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003e__begin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin_expr\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003e__end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eend_expr\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003e__begin\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003e__end\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003e__begin\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \n        \u003cspan class=\"n\"\u003erange_declaration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003e__begin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n        \u003cspan class=\"n\"\u003eloop_statement\u003c/span\u003e \n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのシンタックスシュガーとなるので、違う型が利用できます。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"forward-イテレータの注意点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#forward-%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eForward イテレータの注意点\u003c/h4\u003e\n\n\u003cp\u003eForward イテレータはDefaultConstructible である必要があります。\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"つまりdefaultconstructibleにしないといけない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A4%E3%81%BE%E3%82%8Adefaultconstructible%E3%81%AB%E3%81%97%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%91%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eつまりDefaultConstructibleにしないといけない\u003c/h4\u003e\n\n\u003cp\u003eC++14まででは、endイテレータの実装のために、DefaultConstructibleにしたほうが楽という事情と、Forward イテレータの要件でDefaultConstructibleを要求されているという理由から、デフォルトコンストラクタを作る必要があります。\u003cbr\u003e\nしかし、\u003ccode\u003estd::reference_wrapper\u003c/code\u003eはDefaultConstructibleではありません。\u003c/p\u003e\n\n\u003cp\u003eそこで、pimplイデオムを使っています。\u003c/p\u003e\n\n\u003cp\u003e【c++】激震が走った、Pimplイディオム - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/ashdik/items/b6b9924113f7e8d531cf\" class=\"autolink\" id=\"reference-7783bbee0fe0c323eaf3\"\u003ehttp://qiita.com/ashdik/items/b6b9924113f7e8d531cf\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"rangeクラス\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#range%E3%82%AF%E3%83%A9%E3%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eRangeクラス\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003erandom_generator_range\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ereference_wrapper\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emt_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003emt_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003emin_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emt_\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまあとくに難しいことはしていないですね。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"できたもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたもの\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecreate_engine\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_random_generator_iterator_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"err\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"generate: random_generator_iterator\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eri\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eri\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"generate: random_generator_range\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_random_generator_iterator_v\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003erandom_generator_iterator_with_count\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"err\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"generate: random_generator_iterator_with_count\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator_with_count\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003eri\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_iterator_with_count\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eri\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"generate: random_generator_range_with_count\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003erandom_generator_range_with_count\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eengine\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e同様にして、\u003ccode\u003erandom_generator_iterator_with_count\u003c/code\u003eと\u003ccode\u003erandom_generator_range_with_count\u003c/code\u003eも作っています。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecreate_engine\u003c/code\u003eは乱数生成器を初期化して返しています。中では\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/random_generator_iterator/blob/master/random.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/random_generator_iterator/blob/master/random.hpp\u003c/a\u003e\u003cbr\u003e\n相当いろいろやっています。正直ここまで凝ったseed生成は必要ない・・・。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"inttryparseが欲しい\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#inttryparse%E3%81%8C%E6%AC%B2%E3%81%97%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eint.TryParse\u003c/code\u003eが欲しい\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eC++ でint.tryParseみたいなのってあるのかな(´・ω・｀)いまいちよく分からない・・\u003c/p\u003e— イロハ㌠ (@iroha_thesleepy) \u003ca href=\"https://twitter.com/iroha_thesleepy/status/812567873029750784\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003eint.TryParse\u003c/code\u003eというのはC#というか.NETにあるやつですね。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/f02979c7(v=vs.110).aspx?cs-save-lang=1\u0026amp;cs-lang=csharp#code-snippet-1\" rel=\"nofollow noopener\" target=\"_blank\"\u003eInt32.TryParse メソッド (String, Int32) (System) | MSDN\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"csharp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eTryParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eout\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"csharp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eTryParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003e\"100\"\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eout\u003c/span\u003e \u003cspan class=\"k\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//valueは100\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eもちろんC++にもC++11で\u003ccode\u003estd::stoi\u003c/code\u003eが追加されたので、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estoi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"100\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//100\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのようにかけます。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/azaika_\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@azaika_\u003c/a\u003e なるほど。例外ですか。。。できればfalse返してほしかったｗ\u003c/p\u003e— イロハ㌠ (@iroha_thesleepy) \u003ca href=\"https://twitter.com/iroha_thesleepy/status/812569523505098752\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月24日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eしかし、例外を使うというのと、c形式の文字列でも一度\u003ccode\u003estd::string\u003c/code\u003eを構築しないといけないという問題があります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"inttryparseを自作しよう\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#inttryparse%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%97%E3%82%88%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eint.TryParse\u003c/code\u003eを自作しよう\u003c/h2\u003e\n\n\u003cp\u003eつまり、\u003ccode\u003estd::stoi\u003c/code\u003eの実装にも使われる\u003ccode\u003estrtol\u003c/code\u003e系関数を呼び出せばいいわけです。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"strtol系関数を使うときの注意点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#strtol%E7%B3%BB%E9%96%A2%E6%95%B0%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003estrtol\u003c/code\u003e系関数を使うときの注意点\u003c/h3\u003e\n\n\u003cp\u003eところがこの関数、正しく使うのはなかなか大変だったりします。\u003c/p\u003e\n\n\u003cp\u003eC言語で安全に標準入力から数値を取得 - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/238751b879c09b56234b\" class=\"autolink\" id=\"reference-286356adecdaf9d49806\"\u003ehttp://qiita.com/yumetodo/items/238751b879c09b56234b\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eでも触れましたが、改めて書いておきましょう。\u003c/p\u003e\n\n\u003cp\u003eC11規格書によれば\u003cbr\u003e\n\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e7.22.1.4 The strtol, strtoll, strtoul, and strtoull functions\u003cbr\u003e\nSynopsis\u003c/p\u003e\n\n\u003cp\u003e1 \u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdlib.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003estrtol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003enptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003estrtoll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003enptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003estrtoul\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003enptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003estrtoull\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003enptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"kr\"\u003erestrict\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e7 If the subject sequence is empty or does not have the expected form, \u003cstrong\u003eno conversion is\u003cbr\u003e\nperformed; the value of nptr is stored in the object pointed to by endptr\u003c/strong\u003e, provided\u003cbr\u003e\nthat endptr is not a null pointer.\u003cbr\u003e\nReturns\u003c/p\u003e\n\n\u003cp\u003e8 The strtol, strtoll, strtoul, and strtoull functions return the converted\u003cbr\u003e\nvalue, if any. \u003cstrong\u003eIf no conversion could be performed, zero is returned.\u003c/strong\u003e If the correct value\u003cbr\u003e\nis outside the range of representable values, LONG_MIN, LONG_MAX, LLONG_MIN,\u003cbr\u003e\nLLONG_MAX, ULONG_MAX, or ULLONG_MAX is returned (according to the return type\u003cbr\u003e\nand sign of the value, if any), and the value of the macro ERANGE is stored in errno.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとなっているので、エラーかどうか判定するには、\u003cstrong\u003e戻り値や\u003ccode\u003eerrno\u003c/code\u003eの値を確認するだけでは不充分\u003c/strong\u003eで\u003ccode\u003eendptr\u003c/code\u003eも渡して確認しないといけません。\u003c/p\u003e\n\n\u003cp\u003e蛇足ですが、Cで\u003ccode\u003escanf\u003c/code\u003e系関数や\u003ccode\u003estoi\u003c/code\u003e系関数を使ってはいけない理由はこれだったりします。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"実装した-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装した\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/try_integer_parse.hpp?at=master\u0026amp;fileviewer=file-view-default\" rel=\"nofollow noopener\" target=\"_blank\"\u003eyumetodo / integer_parse_iterator / ソース / try_integer_parse.hpp — Bitbucket\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003etry_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estrtol\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eendptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eendptr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな感じ。実際にはすべての整数型に対応するために、もうすこしオーバーロードを書いているのでリンク先参照。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"inttryparseの問題点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#inttryparse%E3%81%AE%E5%95%8F%E9%A1%8C%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003eint.TryParse\u003c/code\u003eの問題点\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTryParse系のメソッドで一時変数を用意したくない… - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/Temarin/items/9aac6c1f569fc2113e0d\" class=\"autolink\" id=\"reference-fc1258e247e85264ca7b\"\u003ehttp://qiita.com/Temarin/items/9aac6c1f569fc2113e0d\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTryParse系のメソッドは、outやrefを使うので、一時変数を用意する必要がある。\u003c/p\u003e\n\n\u003cp\u003eC# 6.0でこんなのが予定されていたが、残念ながら却下されたようだ。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"csharp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eTryParse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003e\"100\"\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eout\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなんだその構文・・・、まあそれはさておき、パース結果が戻り値としてほしいですよね。constにできないし。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"そこでイテレータですよ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%93%E3%81%A7%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7%E3%81%99%E3%82%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそこでイテレータですよ\u003c/h2\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eC++のoptionalとかC#のNullableとか、最近になって0または1要素のコンテナに見えてきた。foreachに突っ込めてもいいと思うんだけど、現実はなぜか突っ込めない。不思議だ。\u003c/p\u003e— プププランドのプリンス RiSK (@sscrisk) \u003ca href=\"https://twitter.com/sscrisk/status/702699311050588160\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年2月25日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003esprout::optional にコンテナインタフェースを追加しました。\u003ca href=\"https://t.co/CgbXSNpl5D\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/CgbXSNpl5D\u003c/a\u003e\u003ca href=\"https://t.co/DFw7i4Nby2\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/DFw7i4Nby2\u003c/a\u003e\u003c/p\u003e— 狂える中３女子ボレロ村上／陶芸C++er (@bolero_MURAKAMI) \u003ca href=\"https://twitter.com/bolero_MURAKAMI/status/702792883791749120\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年2月25日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eこれをみて思うんですね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな風にかければいいんじゃね？と。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esprout::optional\u003c/code\u003eはそれ自身をコンテナにして、range-based forと組み合わせることで、無効なときは何もせず、有効なときは中身を取り出せるという素晴らしい機能を持っています。\u003c/p\u003e\n\n\u003cp\u003e同じように、パーサークラスを作って、range-based forと組み合わせることで、変換できないときは何もせず、変換したときは変換結果を取れればいいのではないでしょうか？\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまりそういうイテレータをかけばいいんですね\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"実装した-2\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F-2\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e実装した\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/integer_parse_iterator.hpp?at=master\u0026amp;fileviewer=file-view-default\" rel=\"nofollow noopener\" target=\"_blank\"\u003eyumetodo / integer_parse_iterator / ソース / integer_parse_iterator.hpp — Bitbucket\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"まずはイテレータを\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまずはイテレータを\u003c/h3\u003e\n\n\u003cp\u003eイテレータのコンストラクタで変換を先の\u003ccode\u003etry_parse\u003c/code\u003eを呼び出して結果を保存しておくことにします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003einteger_parse_iterator\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//中略\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003ere_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ere_\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etry_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ere_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etry_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ere_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ere_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ere_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ere_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eis_not_end_iterator_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//以下略\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eoperator*\u003c/code\u003eは保存した結果を取るだけにして、インクリメントした時は問答無用でend iteratorにすることにします。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"次にrange-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%AC%A1%E3%81%ABrange-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e次にRange\u003c/h3\u003e\n\n\u003cp\u003e変換を何度も行わないように、イテレータをメンバーに持つことにします。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003einteger_parse_range\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_type\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eit_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eiterator\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"最後にfactory関数を\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9C%80%E5%BE%8C%E3%81%ABfactory%E9%96%A2%E6%95%B0%E3%82%92\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e最後にFactory関数を\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_range\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"できたもの-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%82%82%E3%81%AE-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eできたもの\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/main.cpp?at=master\u0026amp;fileviewer=file-view-default\" rel=\"nofollow noopener\" target=\"_blank\"\u003eyumetodo / integer_parse_iterator / ソース / main.cpp — Bitbucket\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"try_parse\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"1123\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint16_t\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etry_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"integer_parse_iterator(expect no output)\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eint8_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse_iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003eint8_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"integer_parse\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003einteger_parse\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e1123は\u003ccode\u003estd::int8_t\u003c/code\u003eで表せない範囲なので1つ目のrange-based forの中身は実行されません。\u003cbr\u003e\n1123は多くの処理系ではint型で表せるので、2つ目のrange-based forの中身は実行される処理系が多いと思います。\u003c/p\u003e\n\n\u003cp\u003e変換結果の変数はrange-based forの中でのみ有効になるので、スコープが大きくならずに済みます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003eイテレータはわりとなんでもできる。\u003cstrong\u003eが、作るのに書くコードがものすごく多い。もう少しかんたんに書けるようになって欲しい。\u003c/strong\u003e\u003cbr\u003e\n\u003cdel\u003e逆に言えば行数でコードが評価されるような職場ではイテレータを増産しましょう\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003eやっぱりC++17では入らなかったけど、非同期周り(\u003ccode\u003eco_async\u003c/code\u003e/\u003ccode\u003eco_await\u003c/code\u003e)とかコルーチンほしいよね。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://espresso3389.hatenablog.com/entry/2015/12/03/015157\" rel=\"nofollow noopener\" target=\"_blank\"\u003eVisual Studio 2015 Update 1 で C++  を試してみる - espresso3389の日記\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;random\u0026gt;\n#include \u0026lt;experimental/generator\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nf\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emt19937\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;;)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eyield\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003erandom\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eスッキリするし。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e・・・あ、これ初心者C++Advent Calendarの記事なのに、SFINAEとか全く説明なしに書いてしまった。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"license\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#license\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eLicense\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://creativecommons.org/licenses/by/4.0/deed.ja\" rel=\"nofollow noopener\" target=\"_blank\"\u003eCC BY 4.0\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=66aa549d659263ec972c387f23626372\" alt=\"CC-BY icon.svg\" width=\"88px\" data-canonical-src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F1%2F16%2FCC-BY_icon.svg%2F1200px-CC-BY_icon.svg.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bc030b206d86c07d8785ee921a53c18e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"初心者cadvent-calendar-2016-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E5%BF%83%E8%80%85cadvent-calendar-2016-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初心者C++Advent Calendar 2016\u003c/h1\u003e\n\n\u003cp\u003e明日はいなむ先生の記事です。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e \u003ca href=\"https://twitter.com/Lost206\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@Lost206\u003c/a\u003e はよ！\u003c/p\u003e— いなむのみたま｜超ウィザード級C++er (@enum_hack) \u003ca href=\"https://twitter.com/enum_hack/status/809394764214743040\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月15日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eあらためて遅刻すみません。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u0026lt;\u0026lt; 14日目 | ポインタと仲良くなる話 【初心者C++er Advent Calendar 2016 - 14日目】 - をるふちゃんのブログ\u003c/a\u003e || \u003ca href=\"http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276\"\u003e16日目 | C++の乱数ライブラリが使いにくい話 \u0026gt;\u0026gt;\u003c/a\u003e\u003c/p\u003e\n","body":"# 初心者C++Advent Calendar 2016\n\nこの記事は初心者C++Advent Calendar 2016 15日目の記事です\n[\u003c\u003c 14日目 | ポインタと仲良くなる話 【初心者C++er Advent Calendar 2016 - 14日目】 - をるふちゃんのブログ](http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530) || [16日目 | C++の乱数ライブラリが使いにくい話 \u003e\u003e](http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276)\n\n遅刻してすみません。\n[DxLib解剖学LoadSoundMemとLoadBGM - DxLibEx Research Notes](http://nagarei.github.io/DxLibEx/research_note/DxLib%E8%A7%A3%E5%89%96%E5%AD%A6LoadSoundMem%E3%81%A8LoadBGM.html)\nを書くための調査をしていたら、相当時間を取られました。\n\n今回初心者AdCはなんか過疎ってますねぇ・・・。ほんわかした記事が多い中、[ハローワールド徹底解説](http://qiita.com/kazatsuyu/items/478c55de0f75ea5904bd)というヤバそうな記事があったりします、いつものことか。\n\n去年ほど初心者詐欺な記事がないので、[C++erを簡易的にレベル分けすることで初心者詐欺を減らそうという試み](http://qiita.com/yumetodo/items/a843bd542106215bbc84)が功を奏したのかなぁ？と**こじつけておきます**。\n\n# はじめに\n\n皆様、[ナマステ](http://www.nicovideo.jp/watch/sm25261912)。\n\n今回はイテレータについて書いていきます。え？イテレータの解説をするなんて[今更佳代](http://www.nicovideo.jp/watch/sm26588134)だって？~~それを言ったらネタがない~~\n\n# イテレータとは\n\nイテレータとはなにもC++に固有な概念ではありません。\n\n\u003eイテレータ - Wikipedia\nhttps://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\n\u003eイテレータ（英語: Iterator）とは、プログラミング言語において配列やそれに類似するデータ構造の各要素に対する繰返し処理の抽象化である。実際のプログラミング言語では、オブジェクトまたは文法などとして現れる。反復するためのものの意味で反復子（はんぷくし）と訳される。繰返子（くりかえし）という一般的ではない訳語もある。\n\n一般には配列のようなものを順番にたどるためのものです。\n\n# C++におけるイテレータとは\n\nまあその気になればなんでも作れますが、一般的に見かけるイテレータたちを。\n\n## コンテナに対するイテレータ\n\n```cpp\n#include \u003ciostream\u003e\n\nstd::array\u003cint, 5\u003e arr{{ 1, 3, 9, 4 }};\nfor(auto it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout \u003c\u003c *it \u003c\u003c std::endl;\n}\n```\n\n``std::array``や``std::vector``、``std::unordered_map``に代表されるコンテナクラスはメンバ関数``begin()``と``end()``を持っています。この2つのメンバ関数は[``std::begin()``](https://cpprefjp.github.io/reference/iterator/begin.html)/[``std::end()``](https://cpprefjp.github.io/reference/iterator/end.html)を介して呼び出すこともできます。\n\nイテレータをすすめるには``operator++``を呼ぶか、[``std::next()``](https://cpprefjp.github.io/reference/iterator/next.html)が利用できます。\n\n## C形式の配列に対するイテレータ\n\nつまりポインタです。\n\n```cpp\n#include \u003ciostream\u003e\n\nint arr[] = { 1, 3, 9, 4 };\nfor(int* it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout \u003c\u003c *it \u003c\u003c std::endl;\n}\n```\n\n配列の長さを求めて足し算して・・・というコードを自分で書くのはだるいので、[``std::begin()``](https://cpprefjp.github.io/reference/iterator/begin.html)/[``std::end()``](https://cpprefjp.github.io/reference/iterator/end.html)がイテレータと同じく利用できます。\n\n## streamに対するイテレータ\n\nこれはあまり馴染みが無いかもしれません。サンプルコードはcpprefjpのものです\n\n[istream_iterator - cpprefjp C++日本語リファレンス](https://cpprefjp.github.io/reference/iterator/istream_iterator.html)\n\n```cpp:cpprefjpより\n#include \u003ciostream\u003e\n#include \u003citerator\u003e\n#include \u003csstream\u003e\n#include \u003calgorithm\u003e // for_each\n\nint main()\n{\n  // 文字列の入力ストリームにデータを入れる\n  std::stringstream ss;\n  ss \u003c\u003c 1 \u003c\u003c std::endl\n     \u003c\u003c 2 \u003c\u003c std::endl\n     \u003c\u003c 3;\n\n  // 文字列の入力ストリームからデータを読み込むイテレータを作る\n  std::istream_iterator\u003cint\u003e it(ss);\n  std::istream_iterator\u003cint\u003e last;\n\n  // イテレータを進めることにより、入力ストリームからデータを順に読み取る\n  std::for_each(it, last, [](int x) {\n    std::cout \u003c\u003c x \u003c\u003c std::endl;\n  });\n}\n```\n\n# イテレータの種類\n\nEZ-NET: 独自のイテレータを実装する - C++ プログラミング\nhttp://program.station.ez-net.jp/special/handbook/cpp/stl/iterator-make.asp\n\nにキレイにまとまっています。\n\n![cpprefjp](https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png)\ncpprefjp CC-BY\n\nついでに\niterator - cpprefjp C++日本語リファレンス\nhttps://cpprefjp.github.io/reference/iterator.html\n\nも見るといいです。\n\n# Range-based forとイテレータ\n\nメンバ関数``begin()``/``end()``というはじめと終わりを指すイテレータがあるクラスを、範囲を持つクラスとかRange Conceptを満たしたクラスとか言いますが、こういったクラスやC形式の配列などはRange-based forに渡すことができます。\n\nつまり\n\n```cpp:Range-based_for不使用\n#include \u003ciostream\u003e\n#include \u003carray\u003e\nint main()\n{\n    std::array\u003cint, 3\u003e arr = { 3, 4, 2 };\n    for(auto it = arr.begin(); it != end(); ++it) std::cout \u003c\u003c *it \u003c\u003c \", \";\n    return 0;\n}\n```\n\nこれが\n\n```cpp:Range-based_for使用\n#include \u003ciostream\u003e\n#include \u003carray\u003e\nint main()\n{\n    std::array\u003cint, 3\u003e arr = { 3, 4, 2 };\n    for(auto\u0026\u0026 e : arr) std::cout \u003c\u003c e \u003c\u003c \", \";\n    return 0;\n}\n```\n\nこう書けるということです。ちなみに``auto\u0026\u0026``はRange-based forを使うときのおまじないなので、おまじないの原理については\n\n- [range-based for loopsの要素の型について](http://qiita.com/rinse_/items/cdfce8aa6a685a8ebe0c)\n- [C99からC++14を駆け抜けるC++講座 - Qiita](http://qiita.com/yumetodo/items/e49a673afd9a3ecb81a8#range-based-for)\n\nを見てください。\n\nちなみに細工なしで書けるトリッキーなRange-based forの使い方としては\n\n```cpp:文字列リテラルはC形式の配列型\n#include \u003ciostream\u003e\nint main()\n{\n    for(auto\u0026\u0026 c : \"arikitari\") std::cout \u003c\u003c c \u003c\u003c std::endl;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/eqnh68PPOp4Qh1Am\n\n```cpp:initizer_listはRangeConceptを満たす\n#include \u003ciostream\u003e\nint main()\n{\n    for(auto\u0026\u0026 n : { 13, 32 }) std::cout \u003c\u003c n \u003c\u003c std::endl;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/8e1sxPN3Kq5I2Zg2\n\nなんかがあります。\n\n# イテレータをラップするイテレータを作る\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003estruct Circle {\u003cbr\u003e  Vec2f pos;\u003cbr\u003e  float size;\u003cbr\u003e}\u003cbr\u003evector\u0026lt;Circle\u0026gt; circles;\u003cbr\u003eこのcirclesからVec2f* (posのみの配列のポインタがほちい\u003c/p\u003e\u0026mdash; Yanai＠ふちゃきちLove (@Lost206) \u003ca href=\"https://twitter.com/Lost206/status/794347773428580352\"\u003e2016年11月4日\u003c/a\u003e\u003c/blockquote\u003e\n\n\n例えばopenFrameworksみたいに\n\n```cpp\nstruct Vec2f{\n    float x; float y;\n};\nstruct Circle {\n    Vec2f pos;\n    float size;\n};\n```\n\nこんなクラスがあるとします。さて、\n\n```cpp\nstd::vector\u003cCircle\u003e circles;\n```\n\nこんなふうにvectorに入れて管理していたとして、posを取ってくるのに\n\n```cpp\nstd::vector\u003cCircle\u003e circles;\nfor(auto\u0026 c : circles){\n    auto\u0026 p = c.pos;\n    std::cout \u003c\u003c p.x \u003c\u003c p.y \u003c\u003c std::endl;\n}\n```\n\nのようにするのはだるい、どのくらいだるいかというと(ry。\n最初から``Circle::size``なんか無視して``Circle::pos``だけほしい。\nつまりそのようなイテレータを自作すればいいんですね。\n\n## ``std::iterator``は非推奨になったから継承してはいけない\nここで注意点があります\n\n\u003e[C++1z 古くなった機能を非推奨化 - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/2016/09/12/145923)\n\u003eC++1zから、標準ライブラリのいくつかの機能が非推奨となります。**非推奨となった機能は将来のバージョンで削除される可能性があります**のでご注意ください。\n\n\u003e# std::iteratorクラス\n\n\u003e自作イテレータを作るときに基本クラスとして使用する**std::iteratorクラスですが、これを使ってもイテレータを定義するのはあまり簡単になりませんでした**。\n\n\u003eこのクラスを使用することによって問題がより複雑になってしまうケースもありましたので、**非推奨となります**。\n\n\u003eBoost.Iteratorのような**イテレータを簡単に定義するための新たな仕組みは提供されませんので**、標準ライブラリの範囲では、イテレータは最初から最後まで自分で定義することになります。\n\nはい。**イテレータを自作するときは``std::iterator``を継承する、という常識は過去のものになります**。\nイテレータを作る！みたいな解説サイトはたくさんありますが、この点に十分注意してください。\n\n## 作ってみた\n\nイテレーターをラップしてイテレータを作る練習\nhttps://gist.github.com/yumetodo/b0f82fc44e0e4d842c45f7596a6a0b49\n\nちょっと抜粋します\n\n### まずはイテレータ\n\n```cpp\ntemplate\u003ctypename Iterator, std::enable_if_t\u003cstd::is_same\u003cCircle, typename std::iterator_traits\u003cIterator\u003e::value_type\u003e::value, std::nullptr_t\u003e = nullptr\u003e\nclass circle_pos_iterator\n#if __cplusplus \u003c 201500 //C++17ではstd::iteratorは消える\n    : std::iterator\u003ctypename std::iterator_traits\u003cIterator\u003e::iterator_category, Vec2f\u003e\n#endif\n{\nprivate:\n    using ref_iterator_type = Iterator;\n    ref_iterator_type it_;\n#if __cplusplus \u003c 201500\n    using base_type = std::iterator\u003ctypename std::iterator_traits\u003cIterator\u003e::iterator_category, Vec2f\u003e;\n#endif\npublic:\n    circle_pos_iterator() = default;\n    circle_pos_iterator(Iterator it) noexcept : it_(it) {}\n    circle_pos_iterator(const circle_pos_iterator\u0026) = default;\n    circle_pos_iterator(circle_pos_iterator\u0026\u0026) = default;\n    circle_pos_iterator\u0026 operator=(const circle_pos_iterator\u0026) = default;\n    circle_pos_iterator\u0026 operator=(circle_pos_iterator\u0026\u0026) = default;\n    ref_iterator_type get_raw_iterator() const { return it_; }\n#if __cplusplus \u003c 201500  \n    using iterator_category = typename base_type::iterator_category;\n    using value_type = typename base_type::value_type;\n    using difference_type = typename base_type::difference_type;\n    using pointer = typename base_type::pointer;\n    using reference = typename base_type::reference;\n#else\n    using iterator_category = typename std::iterator_traits\u003cIterator\u003e::iterator_category;\n    using value_type = Vec2f;\n    using difference_type = std::ptrdiff_t;\n    using pointer = Vec2f*;\n    using reference = Vec2f\u0026;\n#endif\n    Vec2f\u0026 operator*() noexcept { return it_-\u003epos; }\n    Vec2f operator*() const noexcept { return it_-\u003epos; }\n```\n\nもととなるイテレータの形がtemplate引数の``Iterator``です。さっきも言ったように``std::iterator``は非推奨になるので``#ifdef``で分けています。\n\nもとのイテレータをクラス内部に持っておいてこいつを操作しつつ、結果を返します。\n\nイテレータクラスとしてpublicに型定義しておくべきなのは、``iterator_category``, ``value_type``, ``difference_type``, ``pointer``, ``reference``あたりでしょうか。この辺は定義しておくことをおすすめします。特に``iterator_category``はさっき言ったイテレータの種類に当たるもので、SFINAEなんかで利用されることが多いので忘れずに定義しましょう。\n\nあとはひたすらoperator overloadを書いているだけですが、もととなるイテレータの種類によっては定義できないoperatorもあるので\n\n```cpp\n    template\u003cstd::enable_if_t\u003cstd::is_base_of\u003cstd::bidirectional_iterator_tag, iterator_category\u003e::value, std::nullptr_t\u003e = nullptr\u003e\n    circle_pos_iterator\u0026 operator--() noexcept{\n        --this-\u003eit_;\n        return *this;\n    }\n```\n\nこんな感じで弾いています。ちなみに``std::enable_if_t``はC++14からなので、C++11で使うときは自分でalias templateを書きましょう。\n\n### 次にRange\n\n次に、これをRange-based forに渡すためにRangeを作ります。\n\n```cpp\ntemplate\u003ctypename It\u003e\nclass circle_pos_iterator_range{\npublic:\n    using iterator = circle_pos_iterator\u003cIt\u003e;\nprivate:\n    iterator begin_; iterator end_;\npublic:\n    circle_pos_iterator_range() = delete;\n    circle_pos_iterator_range(It begin, It end) : begin_(begin), end_(end) {}\n    circle_pos_iterator_range(const circle_pos_iterator_range\u0026) = default;\n    circle_pos_iterator_range(circle_pos_iterator_range\u0026\u0026) = default;\n    circle_pos_iterator_range\u0026 operator=(const circle_pos_iterator_range\u0026) = default;\n    circle_pos_iterator_range\u0026 operator=(circle_pos_iterator_range\u0026\u0026) = default;\n    iterator\u0026 begin() noexcept { return this-\u003ebegin_; }\n    const iterator\u0026 begin() const noexcept { return this-\u003ebegin_; }\n    iterator\u0026 end() noexcept { return this-\u003eend_; }\n    const iterator\u0026 end() const noexcept { return this-\u003eend_; }\n};\n```\n\n``begin()``/``end()``があるだけでとくに何もしていません。\n\n### Factory関数\n\n最後にこのRangeクラスのFactory関数を作ります。いわゆるmake_xxx系関数ですね。\n\nなんで必要かというと、C++14まではクラスのテンプレート実引数推定ができないので\n\n```cpp\nint main(void){\n    std::vector\u003cCircle\u003e v(10);\n    Circle arr[10] = {};\n    for(auto\u0026\u0026 p : circle_pos_iterator_range\u003cstd::vector\u003cCircle\u003e::iterator\u003e(v)){\n        std::cout \u003c\u003c p.x \u003c\u003c p.y \u003c\u003c std::endl;\n    }\n    for(auto\u0026\u0026 p : circle_pos_iterator_range\u003cCircle*\u003e(arr)){\n        std::cout \u003c\u003c p.x \u003c\u003c p.y \u003c\u003c std::endl;\n    }\n\n    return 0;\n}\n```\n\nのようにtemplate実引数を書くことになってしまうんですね、ダサい。\n\nそこで\n\n```cpp\ntemplate\u003ctypename It, std::enable_if_t\u003cstd::is_same\u003cCircle, typename std::iterator_traits\u003cIt\u003e::value_type\u003e::value, std::nullptr_t\u003e = nullptr\u003e\ncircle_pos_iterator_range\u003cIt\u003e make_circle_pos_iterator_range(It begin, It end){\n    return {begin, end};\n}\ntemplate\u003ctypename Container\u003e\ncircle_pos_iterator_range\u003ctypename Container::iterator\u003e make_circle_pos_iterator_range(Container c)\n{\n    return make_circle_pos_iterator_range(c.begin(), c.end());\n}\ntemplate\u003cstd::size_t N\u003e\ncircle_pos_iterator_range\u003cCircle*\u003e make_circle_pos_iterator_range(Circle (\u0026arr)[N]){\n    return make_circle_pos_iterator_range(std::begin(arr), std::end(arr));\n}\n```\n\nのようにラッパー関数を書きます。これで\n\n```cpp\nint main(void){\n    std::vector\u003cCircle\u003e v(10);\n    Circle arr[10] = {};\n    for(auto\u0026\u0026 p : make_circle_pos_iterator_range(v)){\n        std::cout \u003c\u003c p.x \u003c\u003c p.y \u003c\u003c std::endl;\n    }\n    for(auto\u0026\u0026 p : make_circle_pos_iterator_range(arr)){\n        std::cout \u003c\u003c p.x \u003c\u003c p.y \u003c\u003c std::endl;\n    }\n\n    return 0;\n}\n```\n\nのように書けます。\n\nちなみにC++17では\n\n本の虫: C++17のクラスのテンプレート実引数推定\nhttps://cpplover.blogspot.jp/2016/10/blog-post_11.html\n\nクラスのテンプレート実引数推定があるのでこれはいらなかったりします。\n\n# コルーチンもyield文もないけどpythonのジェネレータが欲しいのでイテレータで頑張る\n\nごめんなさい、pythonのジェネレータの前にpython書いた事自体があんま無いです。\n\nそれはそうとして、Range-based forで延々と乱数を取ってくるイテレータを考えてみます。\n\npythonで言えば\n\nhttps://paiza.io/projects/hKd6EzaazTyo1z00ObSegA\n\n```python\nfrom random import randint\ndef random_generator_range(n, min_, max_):\n    while True:\n        yield randint(min_, max_)\n\ndef random_generator_range_with_count(n, min_, max_):\n    i = 0\n    while i \u003c n:\n        yield randint(min_, max_)\n        i += 1\n\nprint(\"generate: random_generator_range\")\nfor n in random_generator_range(10, 0, 10):\n    print(n)\n    if 0 == n:\n        break\nprint(\"generate: random_generator_range_with_count\")\nfor n in random_generator_range_with_count(10, 0, 10):\n    print(n)\n```\n\nこんなかんじかな？\n\n## ジェネレータってイテレータのシンタックスシュガーだよね？(無知)\n\npython詳しくないので(2回目)よく知りませんが、コード例見ている感じこれイテレータですよね？(無知)\n\nジェネレータも``yield``もC++にはないですが、イテレータならあります。ならば作れそうです。\n\n## 実装した\n\nというわけで作りました。\n\n### イテレータクラス\n\n```cpp\ntemplate\u003ctypename T\u003e\nclass random_generator_iterator\n\t: public random_generator_iterator_base\n#if __cplusplus \u003c 201500 //C++17ではstd::iteratorは消える\n\t, public std::iterator\u003cstd::input_iterator_tag, T\u003e\n#endif\n{\n\t//中略\n\tusing distribution = uniform_normal_distribution\u003cvalue_type\u003e;\nprivate:\n\tstruct impl {\n\t\tdistribution dist;\n\t\tstd::reference_wrapper\u003cstd::mt19937\u003e engine;\n\t\tbool next_is_end;\n\t\timpl() = default;\n\t\timpl(const impl\u0026) = delete;\n\t\timpl(impl\u0026\u0026) = default;\n\t\timpl\u0026 operator=(const impl\u0026) = delete;\n\t\timpl\u0026 operator=(impl\u0026\u0026) = default;\n\t\timpl(value_type min, value_type max, std::mt19937\u0026 mt) : dist(min, max), engine(mt), next_is_end(false) {}\n\t\tvalue_type generate() { return this-\u003edist(this-\u003eengine.get()); }\n\t};\n\tstd::unique_ptr\u003cimpl\u003e pimpl_;\n\tbool is_end_iterator_;\npublic:\n\tconstexpr random_generator_iterator() noexcept : pimpl_(), is_end_iterator_(true) {};\n\trandom_generator_iterator(const random_generator_iterator\u0026) = delete;\n\trandom_generator_iterator(random_generator_iterator\u0026\u0026) = default;\n\trandom_generator_iterator\u0026 operator=(const random_generator_iterator\u0026) = delete;\n\trandom_generator_iterator\u0026 operator=(random_generator_iterator\u0026\u0026) = default;\n\n\trandom_generator_iterator(value_type min, value_type max, std::mt19937\u0026 mt)\n\t\t: pimpl_(std::make_unique\u003cimpl\u003e(min, max, mt)), is_end_iterator_(false)\n\t{}\n\tvoid stop() noexcept { this-\u003epimpl_-\u003enext_is_end = true; }\n\tvalue_type operator*() { return this-\u003epimpl_-\u003egenerate(); }\n\trandom_generator_iterator\u0026 operator++() noexcept\n\t{ \n\t\tif (this-\u003epimpl_-\u003enext_is_end) this-\u003eis_end_iterator_ = true;\n\t\treturn *this;\n\t}\n\trandom_generator_iterator operator++(int) noexcept\n\t{\n\t\tconst auto re = *this;\n\t\tif (this-\u003epimpl_-\u003enext_is_end) this-\u003eis_end_iterator_ = true;\n\t\treturn re;\n\t}\n\tconstexpr bool operator==(const random_generator_iterator\u0026 r) const noexcept { return this-\u003eis_end_iterator_ == r.is_end_iterator_; }\n\tconstexpr bool operator!=(const random_generator_iterator\u0026 r) const noexcept { return !(*this == r); }\n};\n```\n\nまず、乱数生成器をどうするかという問題があります。\n\nC++の乱数ライブラリは\n\n- 乱数生成器\n- Distribution(ディストリビューション)\n\nを分離した設計になっています。ここで**乱数生成器は基本的には各スレッドで一個持って使いまわすことを想定しています**。\nつまり乱数生成を行うイテレータは**乱数生成器への参照を保持する必要があります**。\nということは``std::reference_wrapper``の出番ですね！\n\n#### range-based forの注意点\n\nC++14までは、range-based forは\n\n```cpp:C++14\n{\n    auto \u0026\u0026 __range = range_expression ; \n    for (auto __begin = begin_expr, __end = end_expr; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n```\n\nのシンタックスシュガーとして定義されていました。**つまり、beginイテレータとendイテレータは同じ型である必要がありました。**\n\nC++17からは\n\n```cpp:C++17\n{\n    auto \u0026\u0026 __range = range_expression ; \n    auto __begin = begin_expr ;\n    auto __end = end_expr ;\n    for ( ; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n```\n\nのシンタックスシュガーとなるので、違う型が利用できます。\n\n#### Forward イテレータの注意点\n\nForward イテレータはDefaultConstructible である必要があります。\n\n#### つまりDefaultConstructibleにしないといけない\n\nC++14まででは、endイテレータの実装のために、DefaultConstructibleにしたほうが楽という事情と、Forward イテレータの要件でDefaultConstructibleを要求されているという理由から、デフォルトコンストラクタを作る必要があります。\nしかし、``std::reference_wrapper``はDefaultConstructibleではありません。\n\nそこで、pimplイデオムを使っています。\n\n【c++】激震が走った、Pimplイディオム - Qiita\nhttp://qiita.com/ashdik/items/b6b9924113f7e8d531cf\n\n### Rangeクラス\n\n```cpp\ntemplate\u003ctypename T\u003e\nclass random_generator_range {\npublic:\n\tusing value_type = T;\n\tusing iterator = random_generator_iterator\u003cvalue_type\u003e;\nprivate:\n\tvalue_type min_;\n\tvalue_type max_;\n\tstd::reference_wrapper\u003cstd::mt19937\u003e mt_;\npublic:\n\trandom_generator_range() = delete;\n\trandom_generator_range(const random_generator_range\u0026) = delete;\n\trandom_generator_range(random_generator_range\u0026\u0026) = default;\n\trandom_generator_range\u0026 operator=(const random_generator_range\u0026) = delete;\n\trandom_generator_range\u0026 operator=(random_generator_range\u0026\u0026) = delete;\n\trandom_generator_range(value_type min, value_type max, std::mt19937\u0026 mt)\n\t\t: min_(min), max_(max), mt_(mt) {}\n\titerator begin() noexcept { return{ min_, max_, mt_.get() }; }\n\titerator end() noexcept { return{}; }\n};\n```\n\nまあとくに難しいことはしていないですね。\n\n### できたもの\n\n```cpp\nstatic auto engine = create_engine();\nint main()\n{\n\tstatic_assert(is_random_generator_iterator_v\u003crandom_generator_iterator\u003cint\u003e\u003e, \"err\");\n\tstd::cout \u003c\u003c \"generate: random_generator_iterator\" \u003c\u003c std::endl;\n\tfor (auto ri = random_generator_iterator\u003cint\u003e(0, 10, engine); ri != random_generator_iterator\u003cint\u003e{}; ++ri) {\n\t\tconst auto n = *ri;\n\t\tstd::cout \u003c\u003c n \u003c\u003c std::endl;\n\t\tif (0 == n) ri.stop();\n\t}\n\tstd::cout \u003c\u003c \"generate: random_generator_range\" \u003c\u003c std::endl;\n\tfor (auto\u0026\u0026 n : random_generator_range\u003cint\u003e(0, 10, engine)) {\n\t\tstd::cout \u003c\u003c n \u003c\u003c std::endl;\n\t\tif (0 == n) break;\n\t}\n\tstatic_assert(is_random_generator_iterator_v\u003crandom_generator_iterator_with_count\u003cint\u003e\u003e, \"err\");\n\tstd::cout \u003c\u003c \"generate: random_generator_iterator_with_count\" \u003c\u003c std::endl;\n\tfor (auto ri = random_generator_iterator_with_count\u003cint\u003e(0, 10, engine); ri != random_generator_iterator_with_count\u003cint\u003e(10); ++ri) {\n\t\tstd::cout \u003c\u003c *ri \u003c\u003c std::endl;\n\t}\n\tstd::cout \u003c\u003c \"generate: random_generator_range_with_count\" \u003c\u003c std::endl;\n\tfor (auto\u0026\u0026 n : random_generator_range_with_count\u003cint\u003e(10, 0, 10, engine)) {\n\t\tstd::cout \u003c\u003c n \u003c\u003c std::endl;\n\t}\n\n\treturn 0;\n}\n```\n\n同様にして、``random_generator_iterator_with_count``と``random_generator_range_with_count``も作っています。\n\n``create_engine``は乱数生成器を初期化して返しています。中では\nhttps://github.com/yumetodo/random_generator_iterator/blob/master/random.hpp\n相当いろいろやっています。正直ここまで凝ったseed生成は必要ない・・・。\n\n# ``int.TryParse``が欲しい\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eC++ でint.tryParseみたいなのってあるのかな(´・ω・｀)いまいちよく分からない・・\u003c/p\u003e\u0026mdash; イロハ㌠ (@iroha_thesleepy) \u003ca href=\"https://twitter.com/iroha_thesleepy/status/812567873029750784\"\u003e2016年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\n``int.TryParse``というのはC#というか.NETにあるやつですね。\n\n\u003e[Int32.TryParse メソッド (String, Int32) (System) | MSDN](https://msdn.microsoft.com/ja-jp/library/f02979c7(v=vs.110).aspx?cs-save-lang=1\u0026cs-lang=csharp#code-snippet-1)\n\n\u003e```csharp\npublic static bool TryParse(\n\tstring s,\n\tout int result\n)\n```\n\n```csharp\nint value;\nint.TryParse( \"100\" , out value );//valueは100\n```\n\nもちろんC++にもC++11で``std::stoi``が追加されたので、\n\n```cpp\nconst int value = std::stoi(\"100\");//100\n```\n\nのようにかけます。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/azaika_\"\u003e@azaika_\u003c/a\u003e なるほど。例外ですか。。。できればfalse返してほしかったｗ\u003c/p\u003e\u0026mdash; イロハ㌠ (@iroha_thesleepy) \u003ca href=\"https://twitter.com/iroha_thesleepy/status/812569523505098752\"\u003e2016年12月24日\u003c/a\u003e\u003c/blockquote\u003e\n\nしかし、例外を使うというのと、c形式の文字列でも一度``std::string``を構築しないといけないという問題があります。\n\n## ``int.TryParse``を自作しよう\n\nつまり、``std::stoi``の実装にも使われる``strtol``系関数を呼び出せばいいわけです。\n\n### ``strtol``系関数を使うときの注意点\n\nところがこの関数、正しく使うのはなかなか大変だったりします。\n\nC言語で安全に標準入力から数値を取得 - Qiita\nhttp://qiita.com/yumetodo/items/238751b879c09b56234b\n\nでも触れましたが、改めて書いておきましょう。\n\nC11規格書によれば\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n\n\n\u003e7.22.1.4 The strtol, strtoll, strtoul, and strtoull functions\nSynopsis\n\n\u003e1 \n\n\u003e```c\n#include \u003cstdlib.h\u003e\nlong int strtol(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nlong long int strtoll(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long int strtoul(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long long int strtoull(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\n```\n\n\u003e7 If the subject sequence is empty or does not have the expected form, **no conversion is\nperformed; the value of nptr is stored in the object pointed to by endptr**, provided\nthat endptr is not a null pointer.\nReturns\n\n\u003e8 The strtol, strtoll, strtoul, and strtoull functions return the converted\nvalue, if any. **If no conversion could be performed, zero is returned.** If the correct value\nis outside the range of representable values, LONG_MIN, LONG_MAX, LLONG_MIN,\nLLONG_MAX, ULONG_MAX, or ULLONG_MAX is returned (according to the return type\nand sign of the value, if any), and the value of the macro ERANGE is stored in errno.\n\nとなっているので、エラーかどうか判定するには、**戻り値や``errno``の値を確認するだけでは不充分**で``endptr``も渡して確認しないといけません。\n\n蛇足ですが、Cで``scanf``系関数や``stoi``系関数を使ってはいけない理由はこれだったりします。\n\n### 実装した\n\n[yumetodo / integer_parse_iterator / ソース / try_integer_parse.hpp — Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/try_integer_parse.hpp?at=master\u0026fileviewer=file-view-default)\n\n```cpp\ntemplate\u003ctypename T, concept_t\u003c\n\tstd::is_signed\u003cT\u003e::value \u0026\u0026 (sizeof(T) \u003c= sizeof(long))\n\u003e = nullptr\u003e\ninline bool try_parse(const char* s, T\u0026 result, T min = std::numeric_limits\u003cT\u003e::min(), T max = std::numeric_limits\u003cT\u003e::max()) noexcept\n{\n\terrno = 0;\n\tchar* endptr;\n\tconst long t = strtol(s, \u0026endptr, 10);\n\tif (0 != errno || (0 == t \u0026\u0026 endptr == s) || t \u003c min || max \u003c t) {\n\t\treturn false;\n\t}\n\telse {\n\t\tresult = static_cast\u003cT\u003e(t);\n\t\treturn true;\n\t}\n}\n```\n\nこんな感じ。実際にはすべての整数型に対応するために、もうすこしオーバーロードを書いているのでリンク先参照。\n\n## ``int.TryParse``の問題点\n\n\u003eTryParse系のメソッドで一時変数を用意したくない… - Qiita\n\u003ehttp://qiita.com/Temarin/items/9aac6c1f569fc2113e0d\n\n\u003eTryParse系のメソッドは、outやrefを使うので、一時変数を用意する必要がある。\n\n\u003eC# 6.0でこんなのが予定されていたが、残念ながら却下されたようだ。\n\n\u003e```csharp\nint.TryParse( \"100\" , out int value );\n```\n\nなんだその構文・・・、まあそれはさておき、パース結果が戻り値としてほしいですよね。constにできないし。\n\n## そこでイテレータですよ\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eC++のoptionalとかC#のNullableとか、最近になって0または1要素のコンテナに見えてきた。foreachに突っ込めてもいいと思うんだけど、現実はなぜか突っ込めない。不思議だ。\u003c/p\u003e\u0026mdash; プププランドのプリンス RiSK (@sscrisk) \u003ca href=\"https://twitter.com/sscrisk/status/702699311050588160\"\u003e2016年2月25日\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003esprout::optional にコンテナインタフェースを追加しました。\u003ca href=\"https://t.co/CgbXSNpl5D\"\u003ehttps://t.co/CgbXSNpl5D\u003c/a\u003e\u003ca href=\"https://t.co/DFw7i4Nby2\"\u003ehttps://t.co/DFw7i4Nby2\u003c/a\u003e\u003c/p\u003e\u0026mdash; 狂える中３女子ボレロ村上／陶芸C++er (@bolero_MURAKAMI) \u003ca href=\"https://twitter.com/bolero_MURAKAMI/status/702792883791749120\"\u003e2016年2月25日\u003c/a\u003e\u003c/blockquote\u003e\n\nこれをみて思うんですね。\n\n```cpp\nfor (int n : integer_parse\u003cint\u003e(s)) {\n\tstd::cout \u003c\u003c n \u003c\u003c std::endl;\n}\n```\n\nこんな風にかければいいんじゃね？と。\n\n``sprout::optional``はそれ自身をコンテナにして、range-based forと組み合わせることで、無効なときは何もせず、有効なときは中身を取り出せるという素晴らしい機能を持っています。\n\n同じように、パーサークラスを作って、range-based forと組み合わせることで、変換できないときは何もせず、変換したときは変換結果を取れればいいのではないでしょうか？\n\n**つまりそういうイテレータをかけばいいんですね**\n\n## 実装した\n\n[yumetodo / integer_parse_iterator / ソース / integer_parse_iterator.hpp — Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/integer_parse_iterator.hpp?at=master\u0026fileviewer=file-view-default)\n\n### まずはイテレータを\n\nイテレータのコンストラクタで変換を先の``try_parse``を呼び出して結果を保存しておくことにします。\n\n```cpp\ntemplate\u003ctypename T\u003e\nclass integer_parse_iterator\n{\n\t//中略\nprivate:\n\tusing lim = std::numeric_limits\u003cvalue_type\u003e;\n\tvalue_type re_;\n\tbool is_not_end_iterator_;\npublic:\n\tconstexpr integer_parse_iterator() noexcept : re_(), is_not_end_iterator_(false) {}\n\tinteger_parse_iterator\u0026 operator=(integer_parse_iterator\u0026\u0026) = default;\n\tinteger_parse_iterator(const std::string\u0026 s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t{\n\t\tthis-\u003eis_not_end_iterator_ = try_parse(s, this-\u003ere_, min, max);\n\t}\n\tinteger_parse_iterator(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t{\n\t\tthis-\u003eis_not_end_iterator_ = try_parse(s, this-\u003ere_, min, max);\n\t}\n\tvalue_type operator*() const noexcept { return this-\u003ere_; }\n\tinteger_parse_iterator\u0026 operator++() noexcept\n\t{\n\t\tthis-\u003ere_ = 0;\n\t\tthis-\u003eis_not_end_iterator_ = false;\n\t\treturn *this;\n\t}\n\tinteger_parse_iterator operator++(int) noexcept\n\t{\n\t\tconst auto re = *this;\n\t\tthis-\u003ere_ = 0;\n\t\tthis-\u003eis_not_end_iterator_ = false;\n\t\treturn re;\n\t}\n\t//以下略\n}\n```\n\n``operator*``は保存した結果を取るだけにして、インクリメントした時は問答無用でend iteratorにすることにします。\n\n### 次にRange\n\n変換を何度も行わないように、イテレータをメンバーに持つことにします。\n\n```cpp\ntemplate\u003ctypename T\u003e\nclass integer_parse_range {\npublic:\n\tusing value_type = T;\n\tusing iterator = integer_parse_iterator\u003cvalue_type\u003e;\nprivate:\n\tusing lim = std::numeric_limits\u003cvalue_type\u003e;\n\titerator it_;\npublic:\n\tinteger_parse_range() = delete;\n\tinteger_parse_range(const integer_parse_range\u0026) = delete;\n\tinteger_parse_range(integer_parse_range\u0026\u0026) = default;\n\tinteger_parse_range\u0026 operator=(const integer_parse_range\u0026) = delete;\n\tinteger_parse_range\u0026 operator=(integer_parse_range\u0026\u0026) = delete;\n\tinteger_parse_range(const std::string\u0026 s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t\t:it_(s, min, max)\n\t{}\n\tinteger_parse_range(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t\t:it_(s, min, max)\n\t{}\n\titerator begin() noexcept { return it_; }\n\tconstexpr iterator end() const noexcept { return{}; }\n};\n```\n\n### 最後にFactory関数を\n\n```cpp\ntemplate\u003ctypename T\u003e\ninline integer_parse_range\u003cT\u003e integer_parse(const std::string\u0026 s, T min = std::numeric_limits\u003cT\u003e::min(), T max = std::numeric_limits\u003cT\u003e::max()) noexcept\n{\n\treturn{ s, min, max };\n}\ntemplate\u003ctypename T\u003e\ninline integer_parse_range\u003cT\u003e integer_parse(const char* s, T min = std::numeric_limits\u003cT\u003e::min(), T max = std::numeric_limits\u003cT\u003e::max()) noexcept\n{\n\treturn{ s, min, max };\n}\n```\n\n## できたもの\n\n[yumetodo / integer_parse_iterator / ソース / main.cpp — Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/main.cpp?at=master\u0026fileviewer=file-view-default)\n\n```cpp\nint main()\n{\n\tusing std::string;\n\tstd::cout \u003c\u003c \"try_parse\" \u003c\u003c std::endl;\n\tstring s = \"1123\";\n\t{\n\t\tstd::uint16_t re;\n\t\tif (try_parse(s, re)) {\n\t\t\tstd::cout \u003c\u003c re \u003c\u003c std::endl;\n\t\t}\n\t}\n\tstd::cout \u003c\u003c \"integer_parse_iterator(expect no output)\" \u003c\u003c std::endl;\n\tfor (integer_parse_iterator\u003cstd::int8_t\u003e it; it != integer_parse_iterator\u003cstd::int8_t\u003e{}; ++it) {\n\t\tstd::cout \u003c\u003c *it \u003c\u003c std::endl;\n\t}\n\tstd::cout \u003c\u003c \"integer_parse\" \u003c\u003c std::endl;\n\tfor (int n : integer_parse\u003cint\u003e(s)) {\n\t\tstd::cout \u003c\u003c n \u003c\u003c std::endl;\n\t}\n}\n```\n\n1123は``std::int8_t``で表せない範囲なので1つ目のrange-based forの中身は実行されません。\n1123は多くの処理系ではint型で表せるので、2つ目のrange-based forの中身は実行される処理系が多いと思います。\n\n変換結果の変数はrange-based forの中でのみ有効になるので、スコープが大きくならずに済みます。\n\n# 結論\n\nイテレータはわりとなんでもできる。**が、作るのに書くコードがものすごく多い。もう少しかんたんに書けるようになって欲しい。**\n~~逆に言えば行数でコードが評価されるような職場ではイテレータを増産しましょう~~\n\nやっぱりC++17では入らなかったけど、非同期周り(``co_async``/``co_await``)とかコルーチンほしいよね。\n\n\u003e[Visual Studio 2015 Update 1 で C++ \u003cexperimental/generator\u003e を試してみる - espresso3389の日記](http://espresso3389.hatenablog.com/entry/2015/12/03/015157)\n\n\u003e```cpp\n#include \u003ccstdio\u003e\n#include \u003crandom\u003e\n#include \u003cexperimental/generator\u003e\nauto random()\n{\n  std::mt19937 r;\n  for (;;)\n    yield r();\n}\nint main()\n{\n  for (auto r : random())\n    std::printf(\"%d\\n\", r);\n}\n```\n\nスッキリするし。\n\n---\n\n・・・あ、これ初心者C++Advent Calendarの記事なのに、SFINAEとか全く説明なしに書いてしまった。\n\n# License\n\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.ja)\n\n\u003ca href=\"https://commons.wikimedia.org/wiki/File:CC-BY_icon.svg#/media/File:CC-BY_icon.svg\"\u003e\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/CC-BY_icon.svg/1200px-CC-BY_icon.svg.png\" alt=\"CC-BY icon.svg\" width=\"88px\"\u003e\u003c/a\u003e\n\n# 初心者C++Advent Calendar 2016\n\n明日はいなむ先生の記事です。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e \u003ca href=\"https://twitter.com/Lost206\"\u003e@Lost206\u003c/a\u003e はよ！\u003c/p\u003e\u0026mdash; いなむのみたま｜超ウィザード級C++er (@enum_hack) \u003ca href=\"https://twitter.com/enum_hack/status/809394764214743040\"\u003e2016年12月15日\u003c/a\u003e\u003c/blockquote\u003e\n\nあらためて遅刻すみません。\n\n[\u003c\u003c 14日目 | ポインタと仲良くなる話 【初心者C++er Advent Calendar 2016 - 14日目】 - をるふちゃんのブログ](http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530) || [16日目 | C++の乱数ライブラリが使いにくい話 \u003e\u003e](http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276)\n","coediting":false,"comments_count":4,"created_at":"2016-12-26T21:43:36+09:00","group":null,"id":"245e94a0e85db9bf5cbb","likes_count":116,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"C++14","versions":[]},{"name":"C++17","versions":[]}],"title":"イテレータの解説をするなんて今更佳代","updated_at":"2019-04-03T14:11:03+09:00","url":"https://qiita.com/yumetodo/items/245e94a0e85db9bf5cbb","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"cadvent-calendar-2016\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cadvent-calendar-2016\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++Advent Calendar 2016\u003c/h1\u003e\n\n\u003cp\u003eこの記事は\u003ca href=\"http://www.adventar.org/calendars/1527\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++Advent Calendar 2016\u003c/a\u003e 8日目の記事です\u003cbr\u003e\n\u003ca href=\"http://qiita.com/Chironian/items/3fb61cffa2a20dbee5c2\" id=\"reference-e281d9ee9fd60b732b03\"\u003e\u0026lt;\u0026lt; 7日目 | C++形式の共有ライブラリの書き方(gcc編)\u003c/a\u003e || 9日目 | \u003ca href=\"http://txt-txt.hateblo.jp/entry/2016/12/09/225148\" rel=\"nofollow noopener\" target=\"_blank\"\u003e最近書いたマクロ（構造体をtupleに変換したい） - TXT.TXT\u003c/a\u003e/\u003ca href=\"http://txt-txt.hateblo.jp/entry/2016/12/09/225641\" rel=\"nofollow noopener\" target=\"_blank\"\u003eそれでも構造体をtupleに変換したい - TXT.TXT\u003c/a\u003e \u0026gt;\u0026gt;\u003c/p\u003e\n\n\u003cp\u003e今年は3日目にして\u003ca href=\"http://kw-udon.hatenablog.com/entry/2016/12/03/201722\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコンパイル時Cコンパイラ\u003c/a\u003eとかいうC++の作者であるBjarne Stroustrupにまで言及されるに至った、頭のおかしい記事が出て、強さしか無いですね！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e皆様、\u003ca href=\"http://www.nicovideo.jp/watch/sm25261912\" rel=\"nofollow noopener\" target=\"_blank\"\u003eナマステ\u003c/a\u003e。\u003c/p\u003e\n\n\u003cp\u003e世の中では、Visual Studio2017 RCがでて、MSが\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2016/11/16/permissive-switch/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e来年にはtwo-phase lookupを実装する\u003c/a\u003eというニュースが駆け巡ったり、C++ Builder 10.1 BerlinがでてClangが使えるようになったり(ただし古い)、C++17の内容がいろいろ見えてきたり、またしても\u003ca href=\"https://botondballo.wordpress.com/2016/11/25/trip-report-c-standards-meeting-in-issaquah-november-2016/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003echar8_t\u003c/code\u003e型がrejectされたり\u003c/a\u003eしましたが、\u003cbr\u003e\nそれについては誰かが書いてくれる気がするので私はスルーして、もう少し小さなネタを書いていこうと思います。なんかC++Advent Calendarのレベルがやたらと高いので皆さんには常識なのかもしれませんが\u003cdel\u003eそれを言ったらネタがない\u003c/del\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e多分読者の方は「艦これ」について名前くらいは聞いたことがあると思います。\u003cbr\u003e\n\u003ca href=\"http://www.dmm.com/netgame/feature/kancolle.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.dmm.com/netgame/feature/kancolle.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://ja.wikipedia.org/wiki/%E8%89%A6%E9%9A%8A%E3%81%93%E3%82%8C%E3%81%8F%E3%81%97%E3%82%87%E3%82%93_-%E8%89%A6%E3%81%93%E3%82%8C-\" rel=\"nofollow noopener\" target=\"_blank\"\u003e艦隊これくしょん -艦これ- - Wikipedia\u003c/a\u003e\u003cbr\u003e\n『艦隊これくしょん -艦これ-』（かんたいこれくしょん かんこれ）は、角川ゲームスが開発しDMM.comがブラウザゲームとして配信している育成シミュレーションゲームおよび、そのメディアミックス作品群。ゲーム内容は、第二次世界大戦時の大日本帝国海軍の軍艦を中心とした艦艇を女性キャラクターに擬人化した「艦娘（かんむす）」をゲーム中で集め、強化しながら敵と戦闘し勝利を目指すというものである。2013年4月23日にブラウザ版のサービスを開始した\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eで、\u003ca href=\"/YSRKEN\" class=\"user-mention js-hovercard\" title=\"YSRKEN\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"YSRKEN\"\u003e@YSRKEN\u003c/a\u003e さんをメイン開発者、 \u003ca href=\"https://github.com/sayurin\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@sayurin\u003c/a\u003eさんと私がリファクタリング\u0026amp;高速化担当をして、艦これの戦闘をシミュレーションするソフトを作っています。\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI\u003c/a\u003e\u003cbr\u003e\n以下\u003ca href=\"https://twitter.com/search?f=tweets\u0026amp;vertical=default\u0026amp;q=%23KCS_KAI\u0026amp;src=typd\" rel=\"nofollow noopener\" target=\"_blank\"\u003eKCS_KAI\u003c/a\u003eと略します。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eそれからもう一つ、SigContrastFastAviUtlという\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl\u003c/a\u003e\u003cbr\u003e\nコントラストをSigmoid関数にもとづいて変更する(マネー)フリーな動画編集ソフトAviUtlのプラグイン\u003cbr\u003e\n\u003ca href=\"https://github.com/MaverickTse/SigColorAviutl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/MaverickTse/SigColorAviutl\u003c/a\u003e\u003cbr\u003e\nを高速化したプラグインを開発したのですが、\u003ca href=\"https://github.com/MaverickTse\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@MaverickTse\u003c/a\u003eさんのコードをベースに大規模なリファクタリングと高速化をしました。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eこのKCS_KAIとSigContrastFastAviUtlで多数の高速化をやった経験などをベースに、今日一般的なPCにおける高速化の技法を書いていこうと思います。\u003c/p\u003e\n\n\u003cp\u003e・・・前置き長いな。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まずはリファクタリングして可読性を上げる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E5%8F%AF%E8%AA%AD%E6%80%A7%E3%82%92%E4%B8%8A%E3%81%92%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまずはリファクタリングして可読性を上げる\u003c/h1\u003e\n\n\u003cp\u003e省略します。やったことが多すぎるので詳細はcommit logでも眺めてください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"きちんと時間計測をして高速化の戦略を練る\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8D%E3%81%A1%E3%82%93%E3%81%A8%E6%99%82%E9%96%93%E8%A8%88%E6%B8%AC%E3%82%92%E3%81%97%E3%81%A6%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%AE%E6%88%A6%E7%95%A5%E3%82%92%E7%B7%B4%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eきちんと時間計測をして高速化の戦略を練る\u003c/h1\u003e\n\n\u003cp\u003e想像と推測で高速化を始めてはいけません。どこがネックなのかを認識してから取り組みましょう。\u003c/p\u003e\n\n\u003cp\u003e計測はIDEやgprofのプロファイリング機能を使ってもいいですし、自力で時間計測コードを埋め込んでもいいと思います。\u003c/p\u003e\n\n\u003cp\u003eプロファイリングをするときは、\u003cstrong\u003eホットスポットでないルーチンの最適化は行わないようにしましょう\u003c/strong\u003e。労力に見合わないですし、プログラミング基本原則である(でっち上げ)\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eプログラム　書かなければ　バグらない\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eに反します。\u003c/p\u003e\n\n\u003cp\u003eホットスポットの最適化をするときに、Functions With Most Indivisual Workの解析が役に立ったりします(後述する\u003ccode\u003estd::vector::push_back\u003c/code\u003eのVSのおバカ実装はコレのお陰で見つかった)。\u003c/p\u003e\n\n\u003cp\u003e自力で時間計測コードを埋め込んでやるときは、\u003cstrong\u003e計測は複数回行って、処理時間の95%信頼区間を求めてそれがコード変更の前後で重ならなくなるか明らかに重なることがわかるまで\u003c/strong\u003e(10回以上は計測したい)計測しましょう。\u003c/p\u003e\n\n\u003cp\u003eExcelとかで数式うつの面倒だからC++で計算する！という人は\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/time_logger.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/time_logger.hpp\u003c/a\u003e\u003cbr\u003e\nこんな感じのコードで求められます。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e_mm_div_ps\u003c/code\u003eは遅いから\u003ccode\u003e_mm_rcp_ps\u003c/code\u003eをニュートン-ラフソン法で高精度化して使おうみたいな記事を見かけて\u003cbr\u003e\n\u003ca href=\"http://www.kaede-software.com/2008/02/post_513.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e楓 software: 逆数の高精度化\u003c/a\u003e\u003cbr\u003e\n実装して計測したら\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/pull/9/commits/50fba5aa61324c2c6eb6e4b44ff815179ed26042\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/pull/9/commits/50fba5aa61324c2c6eb6e4b44ff815179ed26042\u003c/a\u003e\u003cbr\u003e\n1%(+-2.4% N=19)遅くなってたなんてこともありました。\u003c/p\u003e\n\n\u003cp\u003e注意点として、小さすぎる粒度での時間計測はあまり意味がありません。最近のCPUはパイプラインと言って、1clockに1命令なんてのんびりしたことはしないで、開いている演算機を稼働させて1clock1命令以上実行している。処理に依存性が少ないとこのパイプラインがうまく動く。というわけである程度大きめの粒度で計測しましょう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"メモリ律速なものはどうしようもない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%A2%E3%83%AA%E5%BE%8B%E9%80%9F%E3%81%AA%E3%82%82%E3%81%AE%E3%81%AF%E3%81%A9%E3%81%86%E3%81%97%E3%82%88%E3%81%86%E3%82%82%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメモリ律速なものはどうしようもない\u003c/h1\u003e\n\n\u003cp\u003e特に映像処理の分野では、メモリ律速に悩まされることが多いです。メモリ律速なものは多くの場合高速化できないので、DDR4積んでるメモリーを使うとか、メモリー転送帯域の大きいハードウェアをつかうとかそういう話になります。\u003c/p\u003e\n\n\u003cp\u003eそれでもどうにかこうにか高速化しようと奮闘している方もいるのですが。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003erigayaの日記兼メモ帳 2015年を振り返る (エンコ編)\u003cbr\u003e\n\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-715.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-715.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e自動フィールドシフト (afs)\u003cbr\u003e\n今年は自動フィールドシフトを速くするネタを思いつけなかった。誠に遺憾である。\u003c/p\u003e\n\n\u003cp\u003eまあこれまでも結構速くしたのだけど、24pへのインタレ解除はこれしか使わないので、もっと速くしていきたい。とはいっても演算律速というわけではなくメモリ律速なので、できることが限られているのが辛い。\u003c/p\u003e\n\n\u003cp\u003eQSVEnc\u003cbr\u003e\nQSVはハードウェアエンコーダの中でも高速で、画質もまあ、比較的よいほう。\u003c/p\u003e\n\n\u003cp\u003e今年の大半はQSVEncCのavqsv周りをやっていた気がする。QSVでデコード→Vpp→エンコードまでを一貫して行うavqsvモードは、QSV高速化のためには必須であり、やっとQSVEncCが他のQSVエンコーダと比べて遅いという嘆かわしい状態を解決できたと思う。高速化とは良いものだ。まあ、最終的にはメモリ速度律速なのだけど…。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e映像処理はQSVとかNVEncみたいなハードウェアエンコーダー/デコーダーの登場でだいぶ前進した感あるけど結局はメモリ律速に悩まされるという。\u003c/p\u003e\n\n\u003cp\u003e昨年(2015年)バズったwaifu2xなんかはメモリー律速の最たる例で、それでもメモリー配置を予測して頑張ったりと奮闘している方をたくさん見かけましたね。\u003cbr\u003e\n最内ループからはじめる深層学習(waifu2xの高速化)\u003cbr\u003e\n\u003ca href=\"http://int.main.jp/txt/waifu2x.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://int.main.jp/txt/waifu2x.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e私の脳みそでは上記リンク先はちょっと理解しきれないわけですが。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"依存ライブラリが適切か調べる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BE%9D%E5%AD%98%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%8C%E9%81%A9%E5%88%87%E3%81%8B%E8%AA%BF%E3%81%B9%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e依存ライブラリが適切か調べる\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/MaverickTse/SigColorAviutl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/MaverickTse/SigColorAviutl\u003c/a\u003e\u003cbr\u003e\nと\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl\u003c/a\u003e\u003cbr\u003e\nの最も大きい違いは、\u003ca href=\"http://www.imagemagick.org/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eImageMagick\u003c/a\u003eに依存しているか否かです。\u003c/p\u003e\n\n\u003cp\u003eImageMagickは内部で関数呼出しを一度内部でコマンド文字列に変換してそれを再度パースして関数ポインタを介して処理をするとかいう、頭のおかしいことをやっていて、その結果\u003cbr\u003e\n\u003cstrong\u003eImageMagickを使う=遅くなる=ImageMagickを使う者はC++erにあらず\u003c/strong\u003e\u003cbr\u003e\nという等式が成立するレベルで遅いです。\u003c/p\u003e\n\n\u003cp\u003e逆に\u003cstrong\u003e適切なライブラリを選択すれば、下手に自分で書くより高速化できます\u003c/strong\u003e。例えばOpenCVだとちゃんと掛けば自動で並列化したりGPU使ったりできますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"アルゴリズムの見直し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E8%A6%8B%E7%9B%B4%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eアルゴリズムの見直し\u003c/h1\u003e\n\n\u003cp\u003e当たり前といえば当たり前ですが、いくつか。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"テーブル引き\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E5%BC%95%E3%81%8D\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eテーブル引き\u003c/h2\u003e\n\n\u003cp\u003eSigContrastFastAviUtlの場合、Sigmoid関数という処理の肝があります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"math\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ef(u)=\\frac{\\frac{1}{exp(s(m - u)) + 1} - \\frac{1}{exp(sm) + 1}}{\\frac{1}{exp(s(m - 1)) + 1} - \\frac{1}{exp(sm) + 1}}\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003es:strength m:midtone u:input\u003c/p\u003e\n\n\u003cp\u003e見るからに重そうな数式ですが、これを画像の画素数×映像のframe数回呼び出すことになるのでえげつない計算量が必要です。\u003c/p\u003e\n\n\u003cp\u003eしかしSigContrastFastAviUtlの場合、sとmは定数扱いでき、uは0-4096の計4097通りしか無いので\u003cstrong\u003e事前にキャッシュしてあとでそれを参照するtable引きが有効です。\u003c/strong\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epDst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epTable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epDst\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epTable\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003epIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]];\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのような二重テーブル引きをやってくれる\u003ccode\u003evpgatherdd\u003c/code\u003e命令なんてものがAVX2にはあって、Intel Haswellで導入され、Intel Broadwell以降(Skylake含む)では高速に動作するそうです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003evpgatherdd\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epTable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003e__m256i\u003c/span\u003e \u003cspan class=\"n\"\u003eyDst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eyIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eyDst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_mm256_i32gather_epi32\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epTable\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eyIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e詳細は\u003cbr\u003e\nrigayaの日記兼メモ帳 PMD_MT 高速化版+5 gatherの速度とか\u003cbr\u003e\n\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-849.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-849.html\u003c/a\u003e\u003cbr\u003e\nへ。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eただし、\u003cstrong\u003eSIMD化するときにtable引きするより愚直にSIMDの馬力を活かしてひたすら計算したほうが速いこともあるようなので\u003c/strong\u003e都度どちらが速いか考える必要があります。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003erigayaの日記兼メモ帳 PMD_MT 高速化版\u003cbr\u003e\n\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-483.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-483.html\u003c/a\u003e\u003cbr\u003e\nところが、高速化にあたって導入したいSIMD演算はテーブル参照とはあまり相性が良くない。そこで今回のSIMD化による高速化では、「useExp」オプションがオフの時には、テーブル参照をやめて、愚直に浮動小数点演算によって行うようにした。テーブル参照をして演算量を減らすよりも、SIMDの馬力を活かしてひたすら計算したほうが速いみたい。(というより、AVXを使うと浮動小数点演算を一度に8演算、FMA3を使えば一度に16演算できるので、どちらかというとFMA3でゴリ押しできることを前提に作ってる…)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e注意点ですが、テーブル引きするときは、テーブルの参照コストはO(1)にしましょう。\u003cbr\u003e\nもっというと、\u003cstrong\u003eテーブル引きに\u003ccode\u003estd::map\u003c/code\u003e/\u003ccode\u003estd::unorderd_map\u003c/code\u003eを使ってはいけません\u003c/strong\u003e\u003cbr\u003e\n逆関数かくの面倒だからといって元の関数を流用して\u003ccode\u003estd::lower_bound\u003c/code\u003eで誤魔化そうとか思わずに頑張ってはO(1)にしましょう。\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/pull/9\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/pull/9\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"計算オーダーが全てではない\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A8%88%E7%AE%97%E3%82%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%81%8C%E5%85%A8%E3%81%A6%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e計算オーダーが全てではない\u003c/h2\u003e\n\n\u003cp\u003e後述するメモリーアクセスパターンやメモリー確保のコストなどが原因で、計算オーダーが良くても最速ではないことがあります。\u003c/p\u003e\n\n\u003cp\u003eそのいい例が\u003cbr\u003e\n\u003ca href=\"http://qiita.com/hmito/items/9f4bdc8442b6f6b3c7bc#%E7%B5%90%E6%9E%9C\" id=\"reference-a225e133dfdadf71c25a\"\u003eC++で効率よく重複のない乱数列を生成する#結果\u003c/a\u003e\u003cbr\u003e\nこれでしょうか。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F44283%2F505a23b1-aeb0-fd43-e0ae-923e2cb4d605.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cc602d100b68b80e9bc350f3a8f930b9\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F44283%2F505a23b1-aeb0-fd43-e0ae-923e2cb4d605.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=cc602d100b68b80e9bc350f3a8f930b9\" alt=\"img\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/44283/505a23b1-aeb0-fd43-e0ae-923e2cb4d605.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F44283%2F505a23b1-aeb0-fd43-e0ae-923e2cb4d605.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=892cd4155b64f55b3add0701ddf359f3 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n平らなグラフは計算オーダー的に優れていることを示しますが、最速ではないことが分かります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"メモリーアクセスパターンの改善\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AE%E6%94%B9%E5%96%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメモリーアクセスパターンの改善\u003c/h1\u003e\n\n\u003cp\u003e映像処理なんか書いていると、この辺が大事になってきます。\u003c/p\u003e\n\n\u003cp\u003eまず\u003c/p\u003e\n\n\u003cp\u003eCPUの気持ちになれるツール作った - ( ꒪⌓꒪) ゆるよろ日記\u003cbr\u003e\n\u003ca href=\"http://yuroyoro.hatenablog.com/entry/2014/10/20/102416\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://yuroyoro.hatenablog.com/entry/2014/10/20/102416\u003c/a\u003e\u003cbr\u003e\nRemix: Latency Numbers Every Programmer Should Know(2014)\u003cbr\u003e\n\u003ca href=\"http://yuroyoro.net/latency.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://yuroyoro.net/latency.html\u003c/a\u003e\u003cbr\u003e\nを見てみましょう。\u003cdel\u003eCPUの歓声\u003c/del\u003eCPUから見たアクセス速度が実感できます。\u003c/p\u003e\n\n\u003cp\u003eメモリー以外にCPUにはキャッシュがあります。このキャッシュにデータが乗っかりやすいようにメモリーアクセスをすることが大事です。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eつまりシーケンシャルに(連続的に)メモリーアクセスしろ\u003c/strong\u003eということです。\u003c/p\u003e\n\n\u003cp\u003eまた、SIMD化によってメモリーアクセス回数を減らすことも効果的です。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003erigayaの日記兼メモ帳 自動フィールドシフト 高速化版+8\u003cbr\u003e\n\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-360.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-360.html\u003c/a\u003e\u003cbr\u003e\nafsには、メモリ空間に対し飛び飛びにアクセスする部分がある。こういった飛び飛びのアクセスは、非常に時間が掛かってしまう。\u003c/p\u003e\n\n\u003cp\u003eそもそも、(キャッシュに入っていない)メモリアクセスというのはとんでもなく遅い。メモリ上を飛び飛びにアクセスしていると特にひどい。\u003c/p\u003e\n\n\u003cp\u003eこれに対し、オリジナルのafsでは、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMMXの使用により、64bitまとめて処理\n　　→64bitずつのアクセスになり、メモリアクセスの回数自体が減る。\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eにより高速化していたし、さらにこれまでの高速化版では、\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eSSEの使用により、128bitずつ処理\u003c/li\u003e\n\u003cli\u003eprefetch命令の挿入により、必要になる飛び飛びのメモリの断片を明示的に先読み\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eして高速化していた。prefetch命令の挿入は非常に効果が大きかった(高速化の1/3ぐらいはprefetch命令のおかげだった)。\u003c/p\u003e\n\n\u003cp\u003eしかし、いくら先読みしているとはいっても、煩雑な飛び飛びのアクセスをしていることには変わりなく、根本的な解決にはなっていない。\u003c/p\u003e\n\n\u003cp\u003e今回の高速化版では、なるべく連続的なメモリアクセスをするようにプログラムを変更した。こうすることで、\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eprefetch命令不要\u003c/li\u003e\n\u003cli\u003e効率的なメモリアクセス\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eとなり、さらに高速化できた。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eメモリーアクセスパターンといえばC++標準化委員会に\u003ccode\u003eflat_map\u003c/code\u003eが提案されていましたね\u003c/p\u003e\n\n\u003cp\u003e本の虫: C++標準化委員会の文書: P0421R0-P0429R0\u003cbr\u003e\n\u003ca href=\"https://cpplover.blogspot.jp/2016/11/c-p0421r0-p0429r0.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpplover.blogspot.jp/2016/11/c-p0421r0-p0429r0.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0429r0.pdf\" rel=\"nofollow noopener\" target=\"_blank\"\u003e[PDF] P0429R0: A Standard flat_map\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eflat_mapと従来のmapのベンチマーク結果があるが、要素の挿入と削除はとても遅く、イテレートはとても速く、検索はmapより速いがunordered_mapよりは遅い結果となっている。そのデータ構造から考えて予想通りの特性だ。\u003c/p\u003e\n\n\u003cp\u003eまた、メモリ使用量が少ない。これは当然の話で、mapを素直に実装するには左右の葉ノードと親ノードへの3個のポインターを持つノードによるバイナリツリーになる上に、メモリ確保をノード単位で行うためにメモリ管理のためのメモリも必要になる。\u003cstrong\u003eまた、連続したストレージ上に確保されるためキャッシュの局所性が最高だ。\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eシーケンシャルアクセスといえば今年のNHK技研の公開でシーケンシャルアクセスしかできない超高速にRead/Writeできる記憶媒体が紹介されていたなぁ・・・。詳細が思い出せないけど、映像の高精細化に伴うメモリー速度要求に対する一次バッファとしての利用を提案していたっけか。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eさらに詳しいメモリーアクセスパターンの話は\u003cbr\u003e\n\u003ca href=\"http://www.cms-initiative.jp/ja/events/0613watanabe.pdf\" rel=\"nofollow noopener\" target=\"_blank\"\u003e[PDF注意]第9回　高速化チューニングとその関連技術２ | 渡辺宙志\u003c/a\u003e\u003cbr\u003e\nに詳しく書かれているので参照してみてください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"openmpじゃなくてc11のthreadを\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#openmp%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%A6c11%E3%81%AEthread%E3%82%92\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eOpenMPじゃなくてC++11のThreadを\u003c/h1\u003e\n\n\u003cp\u003eつまりマルチスレッド化ですね。\u003cstrong\u003eループ間の作業に依存性が無いときはとりあえずマルチスレッド化するのが常道\u003c/strong\u003eだと思います。\u003cbr\u003e\nKCS_KAIでは最初に数個のスレッドを作るだけなのであまり関係ありませんが、SigContrastFastAviUtlのように映像処理なんかで画像一枚一枚単位でマルチスレッド化する場合はスレッド生成のコストが無視できないので、OpenMPは避けたほうが良いです。オーバーヘッドが大きいので。OpenMPは\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/pull/92\" rel=\"nofollow noopener\" target=\"_blank\"\u003eランタイムをstatic linkできないという問題\u003c/a\u003eもあります。\u003c/p\u003e\n\n\u003cp\u003e他のマルチスレッド化の選択肢としては\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://msdn.microsoft.com/ja-jp/library/hh872235.aspx\" rel=\"nofollow noopener\" target=\"_blank\"\u003eVSのAuto-Parallelizer\u003c/a\u003e→自動変数領域の確保が信じられないほど遅い\u003c/li\u003e\n\u003cli\u003epthread→自力で叩きたくない\u003c/li\u003e\n\u003cli\u003eWin32API→自力で叩きたくない\u003c/li\u003e\n\u003cli\u003eIntel TBB\u003c/li\u003e\n\u003cli\u003eVisual C++に付属するPPL\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eがありますが、せっかくC++11でstd::thread入ったので使いましょう。スレッド生成コストはVSのAuto-Parallelizerと同じか誤差レベルでstd::threadが速かったです。\u003c/p\u003e\n\n\u003cp\u003eとはいえスレッド生成とかタスク分割とかを自分で書かないといけないので\u003cbr\u003e\n\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/thread.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/thread.hpp\u003c/a\u003e\u003cbr\u003e\nこんな風に適当にラップしました。\u003c/p\u003e\n\n\u003cp\u003eC++17ではalgorithmヘッダーとかにある関数が引数一つ増やすだけで並列実行してくれるらしいので早く使いたいですね。\u003cdel\u003e例外周りも\u003ccode\u003eexception_list\u003c/code\u003eがあるのでより気軽に使えそうです。\u003c/del\u003e\u003cbr\u003e\n追記:\u003ccode\u003eexception_list\u003c/code\u003eは死んだそうです。そういや本の虫にそんな話が出てたな、忘れてた。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e本の虫: C++標準化委員会の文書: P0390R0-P0399R0\u003cbr\u003e\n\u003ca href=\"https://cpplover.blogspot.jp/2016/09/c-p0390r0-p0399r0.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpplover.blogspot.jp/2016/09/c-p0390r0-p0399r0.html\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0394r4.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0394R4: Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e並列アルゴリズムに渡した要素アクセス関数が例外を投げた時は、投げられた複数の例外がstd::exception_listに格納されて返されるという仕様になっている。しかし、実行ポリシーがpar_unseqの時だけはstd::terminate()を呼び出すとなっており、一貫性がない。\u003c/p\u003e\n\n\u003cp\u003eこれを考えるに、一律std::terminate()を呼び出すことで統一したほうがよい。そのほうが生成されるコードも簡単になるし、exception_listに持ち上がっている数々の問題への対処も不要になる。\u003c/p\u003e\n\n\u003cp\u003eという変更をする提案。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stdvectorはreserveして使う\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stdvector%E3%81%AFreserve%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003estd::vector\u003c/code\u003eはreserveして使う\u003c/h1\u003e\n\n\u003cp\u003e\u003cdel\u003e特にVisual Studioの付録の\u003ccode\u003estd::vector::push_back\u003c/code\u003eの実装は腐っていて、\u003ccode\u003estd::vector::push_back\u003c/code\u003eを呼び出すたびに、現在の領域の大きさ+1のメモリーを確保して要素をすべてcopy/moveする、というのに近い状況が発生します。\u003c/del\u003e\u003cbr\u003e\n\u003c/p\u003e\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://t.co/lJApJ6CFOL\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003c/a\u003e\u003ca href=\"https://t.co/lJApJ6CFOL\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/lJApJ6CFOL\u003c/a\u003e\u003cbr\u003eこのツイートについて今更検証したところ、VSはDebug/Releaseにかかわらず基数1.5でcapacityを増やしていくので、1～4までは1づつ増加するというだけだった\u003c/p\u003e— Az (@azaika_) \u003ca href=\"https://twitter.com/azaika_/status/807884842318729216\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月11日\u003c/a\u003e\n\u003c/blockquote\u003e\u003cbr\u003e\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/azaika_\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@azaika_\u003c/a\u003e どうやら最初に8要素分確保しておくようなことはしていないらしい(画像参照) \u003ca href=\"https://t.co/JCL0KGLksd\" rel=\"nofollow noopener\" target=\"_blank\"\u003epic.twitter.com/JCL0KGLksd\u003c/a\u003e\u003c/p\u003e— Az (@azaika_) \u003ca href=\"https://twitter.com/azaika_/status/807885024225685504\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月11日\u003c/a\u003e\n\u003c/blockquote\u003e\u003cbr\u003e\n1.5倍ゲームでの実装のようです。reserveして使うべし、という結論に変わりはありませんが。\n\n\u003cp\u003ecf.) \u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/issues/64#issuecomment-196514956\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/issues/64#issuecomment-196514956\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e今日の一般的なPCは潤沢にメモリーがあるので、どんぶり勘定で大きめの領域をreserveしておくか、push_backのときに\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* some type */\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef _MSC_VER\n\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereserve\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* someting */\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように強制的に倍々ゲームをするコードを書きましょう。\u003c/p\u003e\n\n\u003cp\u003eちなみにGCCやClangは倍々ゲームをしてくれます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"メモリー確保を減らす\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E7%A2%BA%E4%BF%9D%E3%82%92%E6%B8%9B%E3%82%89%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eメモリー確保を減らす\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eみんな\u003ccode\u003estd::vector\u003c/code\u003eが便利すぎて使いすぎてませんか？\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e実際適当に書いても動くしそこそこ速いので私も使っていますが、高速化のときはそれを見直す必要があります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eそもそもメモリー確保自体が無茶苦茶重いので高速化の際はそれを減らすことが大事です\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e具体的には、\u003cstrong\u003e要素数が固定か、可変だけども最大数が決まっているもの\u003c/strong\u003eはすべて\u003ccode\u003estd::array\u003c/code\u003eで書き換えるべきです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/blob/a50a2e4dda7fdf11ca192ab4506d96cdfe51f161/KCS_CUI/source/fleet.cpp#L429\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/a50a2e4dda7fdf11ca192ab4506d96cdfe51f161/KCS_CUI/source/fleet.cpp#L429\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e// 生存艦から艦娘をランダムに指定する(航空戦用)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eFleet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eRandomKammusu\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//生存艦をリストアップ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekMaxUnitSize\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ealived_list\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ealived_list_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eui\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetUnit\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eGetUnit\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e()[\u003c/span\u003e\u003cspan class=\"n\"\u003eui\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eStatus\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ekStatusLost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ealived_list\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ealived_list_size\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eui\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ealived_list_size\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ealived_list_size\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003etuple\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eSharedRand\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eselect_random_in_range\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ealived_list\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ealived_list_size\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこのように\u003ccode\u003estd::array::size()\u003c/code\u003eはcapacityとして扱い、別にsizeを管理する変数を作ります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003estd::vector\u003c/code\u003eから\u003ccode\u003estd::array\u003c/code\u003eへの置き換えはかなり強力で、KCS_KAIに施した高速化の1/3くらいは占めていると思います\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eただ、別に変数作るのはつらみがあるので、\u003ca href=\"https://twitter.com/bolero_MURAKAMI\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@bolero_MURAKAMI\u003c/a\u003e氏に問い合わせたところ\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://ask.fm/bolero_MURAKAMI/answers/137022673016\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://ask.fm/bolero_MURAKAMI/answers/137022673016\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003esproutにcapacity固定、sizeが0からcapacityの間で可変の配列クラスはあるか\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003evalarray と sub_array\u0026gt;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとの回答が来ましたが、今のところ私にはこのクラスの使い方がわかっていません。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eなにもメモリー確保はstd::vectorだけではないので、当然その他のメモリー確保も注意が必要です。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-483.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-483.html\u003c/a\u003e\u003cbr\u003e\nほかにも毎フレームメモリを確保して破棄していたのをやめ、一度確保したメモリを使いまわすことでちょっと高速化した。(メモリの確保はとにかく遅いため、毎フレームメモリを確保→開放したりすると重くなる)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e一度確保した領域はなるべく使いまわしましょう(初期化バグに注意)。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stdbasic_stringopeartorに注意せよ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stdbasic_stringopeartor%E3%81%AB%E6%B3%A8%E6%84%8F%E3%81%9B%E3%82%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003ccode\u003estd::basic_string::opeartor==\u003c/code\u003eに注意せよ\u003c/h1\u003e\n\n\u003cp\u003eまたしてもVisual Studioの話ですが、ちょっとここでVisual Studio 2017 RCのリリースノートを見てみましょう。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://www.visualstudio.com/ja-jp/news/releasenotes/vs2017-relnotes#a-namec-librariesac-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\" rel=\"nofollow noopener\" target=\"_blank\"\u003eVisual Studio 2017 リリース ノート#C++ ライブラリ\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eパフォーマンスの向上: basic_string::operator== は、\u003cstrong\u003e文字列の内容を比較する前に文字列のサイズをチェックするようになりました\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eなんだって！？今まで文字列比較は長さを見ていなかったの！？\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eまあお馬鹿なVSの話はさておき、場合によっては文字列のハッシュを計算しておいてそれを比較したり、enum classに変換しておくほうが高速になることがあります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"constexprは市民の義務です\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#constexpr%E3%81%AF%E5%B8%82%E6%B0%91%E3%81%AE%E7%BE%A9%E5%8B%99%E3%81%A7%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003econstexprは市民の義務です\u003c/h1\u003e\n\n\u003cp\u003eC++規格への準拠が遅いVisual StudioでもC++11constexprがVisual Studio 2015 Update 2 から使えるようになりました。これにより、C++ Builder(not clang_based version)とかいう糞を無視すれば、\u003cstrong\u003e我々はconstexprを使えるという人権を得ました。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eもちろんC++11constexprは相当制約がきつく、ひたすら3項演算子と再帰と戯れる世界ですが、それでもいろいろできることはあります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"プリプロセス時ファイル読み込みコンパイル時処理コンパイル時db構築\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%83%97%E3%83%AA%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E6%99%82%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E6%99%82%E5%87%A6%E7%90%86%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E6%99%82db%E6%A7%8B%E7%AF%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eプリプロセス時ファイル読み込み+コンパイル時処理→コンパイル時DB構築\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/pull/46\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/46\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/pull/57\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/57\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/pull/62\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/62\u003c/a\u003e\u003cbr\u003e\nでそんなことをやるコードを\u003ca href=\"https://github.com/sayurin\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@sayurin\u003c/a\u003e氏が実装したので要約して紹介します。\u003c/p\u003e\n\n\u003cp\u003e材料\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e細工したcsvファイル\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e#include\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econstexpr\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd::integral_const\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUDLs\u003c/li\u003e\n\u003cli\u003eプリプロセッサマクロ関数少々\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eまず\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e艦船ID,艦名,艦種,耐久,装甲,火力,雷撃,対空,運,速力,射程,スロット数,搭載数,回避,対潜,索敵,初期装備,艦娘フラグ\n1,睦月,2,13/24,5/18,6/29,18/59,7/29,12/49,10,1,2,0/0/0/0/0,37/79,16/39,4/17,1/37/-1/-1/-1,1\n2,如月,2,13/24,5/18,6/29,18/49,7/29,10/49,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n6,長月,2,13/24,5/18,6/29,18/49,7/29,15/69,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n7,三日月,2,13/24,5/18,6/29,18/49,7/29,10/49,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n9,吹雪,2,15/29,5/19,10/29,27/79,10/39,17/49,10,1,2,0/0/0/0/0,40/89,20/49,5/19,2/13/-1/-1/-1,1\n10,白雪,2,15/29,5/19,10/29,27/69,10/39,10/49,10,1,2,0/0/0/0/0,40/79,20/49,5/19,2/-1/-1/-1/-1,1\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな感じのcsvがあります。これを\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eships.csv\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\n\u003cspan class=\"c1\"\u003e//PREFIX,艦船ID,艦名,艦種,耐久,装甲,火力,雷撃,対空,運,速力,射程,スロット数,搭載数,回避,対潜,索敵,初期装備,艦娘フラグ,POSTFIX\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"睦月\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"如月\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"長月\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"三日月\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"吹雪\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e89\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eSHIP\u003c/span\u003e\u003cspan class=\"p\"\u003e(,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"白雪\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e39\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこんな感じに細工します。\u003cbr\u003e\nこの変換はもちろん自動化できます。\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/pull/174\" rel=\"nofollow noopener\" target=\"_blank\"\u003e(Feat)generate csv for cpp by yumetodo · Pull Request #174 · YSRKEN/KanColleSimulator_KAI\u003c/a\u003e\u003cbr\u003e\n試しにpowershellとbash scriptで自動化しました\u003c/p\u003e\n\n\u003cp\u003e次に\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/kammusu.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/kammusu.hpp\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShipId\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define SHIP(PREFIX, ID, NAME, SHIPCLASS, MAX_HP, DEFENSE, ATTACK, TORPEDO, ANTI_AIR, LUCK, SPEED, RANGE, SLOTS, MAX_AIRS, EVADE, ANTI_SUB, SEARCH, FIRST_WEAPONS, KAMMUSU_FLG, POSTFIX)    \\\n    I ## D ## ID = ID,\n#include \"ships.csv\"\n#undef SHIP\n\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eSHIP\u003c/code\u003eという関数マクロを作って、変換しているんですね。同様にして\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eShipClass\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePT\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000001\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 魚雷艇\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eDD\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000002\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 駆逐艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCL\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000004\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 軽巡洋艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCLT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000008\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 重雷装巡洋艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCA\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000010\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 重巡洋艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCAV\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000020\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 航空巡洋艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCVL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000040\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 軽空母\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCC\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000080\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 巡洋戦艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBB\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000100\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 戦艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eBBV\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000200\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 航空戦艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCV\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000400\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 正規空母\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAF\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00000800\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 陸上型\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSS\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00001000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 潜水艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eSSV\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00002000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 潜水空母\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLST\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00004000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 輸送艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAV\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00008000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 水上機母艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLHA\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00010000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 揚陸艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eACV\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00020000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 装甲空母\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAR\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00040000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 工作艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAS\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00080000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 潜水母艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCP\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00100000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 練習巡洋艦\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAO\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00200000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// 給油艦\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecstring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipId\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eshipIdMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define SHIP(PREFIX, ID, NAME, SHIPCLASS, MAX_HP, DEFENSE, ATTACK, TORPEDO, ANTI_AIR, LUCK, SPEED, RANGE, SLOTS, MAX_AIRS, EVADE, ANTI_SUB, SEARCH, FIRST_WEAPONS, KAMMUSU_FLG, POSTFIX)    \\\n        { L##NAME, ShipId::I##D##ID },\n#include \"ships.csv\"\n#undef SHIP\n\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ecstring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ewchar_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eshipClassMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"魚雷艇\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePT\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"駆逐艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eDD\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"軽巡洋艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCL\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"重雷装巡洋艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCLT\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"重巡洋艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCA\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"航空巡洋艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCAV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"軽空母\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCVL\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"巡洋戦艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCC\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"戦艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eBB\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"航空戦艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eBBV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"正規空母\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"陸上型\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAF\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"潜水艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSS\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"潜水空母\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eSSV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"輸送艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eLST\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"水上機母艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"揚陸艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eLHA\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"装甲空母\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eACV\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"工作艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAR\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"潜水母艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAS\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"練習巡洋艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eCP\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003eL\"給油艦\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eShipClass\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAO\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ecstring\u003c/code\u003eは変更操作ができないコンパイル文字列クラスと思ってください。\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/cstring.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/cstring.hpp\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eそうしたら\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e// 文字列から艦船IDへ変換します。\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define SID(STR) (std::integral_constant\u0026lt;ShipId, Single(detail::shipIdMap, L##STR##_cs)\u0026gt;{}())\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 文字列から艦種へ変換します。\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define SC(STR) (std::integral_constant\u0026lt;ShipClass, Single(detail::shipClassMap, L##STR##_cs)\u0026gt;{}())\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんなマクロを追加します。\u003ccode\u003e_cs\u003c/code\u003eは\u003ccode\u003ecstring\u003c/code\u003eを作るUDLsで、\u003ccode\u003eSingle\u003c/code\u003eは分割統治法を使って第1引数に与えられた配列から第2引数の文字列に対応する値を取ってくるconstexpr関数です。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estd::integral_constant\u003c/code\u003eを噛ませている理由ですが、こうしないで例えばこれ自体もUDLsにすると、コンパイル時に評価してくれなかったので、強制的にコンパイル時に\u003ccode\u003eSingle\u003c/code\u003e関数を走らせるためにtemplate実引数で呼び出すためです。で、毎回\u003ccode\u003estd::integral_constant\u003c/code\u003eと書くのは辛いのでマクロを使っています。\u003c/p\u003e\n\n\u003cp\u003eこうすることで、例えば\u003ccode\u003eSID(\"五十鈴改二\")\u003c/code\u003eとすることでenum classである\u003ccode\u003eShipId\u003c/code\u003e型にコンパイル時に変換できたり、\u003ccode\u003eSC(\"戦艦\")\u003c/code\u003eとすることでenum classである\u003ccode\u003eShipClass\u003c/code\u003e型にコンパイル時に変換できたりします。\u003c/p\u003e\n\n\u003cp\u003e残念ながらKCS_KAIではコンパイル時にDB検索まではしていませんが、実装は可能だと思います(将来実装したい)。\u003c/p\u003e\n\n\u003cp\u003eコンパイル時にDB検索まではしていないものの、文字列での\u003ccode\u003estd::unorderd_map\u003c/code\u003e検索より遥かに高速化できています。また、ついでに動的確保を減らせているのでさらなる高速化に寄与しています。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003ecpp（≠c++）の勝利！ \u003ca href=\"https://t.co/4EBEkVZm6d\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/4EBEkVZm6d\u003c/a\u003e\u003c/p\u003e— はぇ～☆ (@haxe) \u003ca href=\"https://twitter.com/haxe/status/806780847747518465\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年12月8日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"条件分岐予測を成功させる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E4%BA%88%E6%B8%AC%E3%82%92%E6%88%90%E5%8A%9F%E3%81%95%E3%81%9B%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e条件分岐予測を成功させる\u003c/h1\u003e\n\n\u003cp\u003e御存知の通り、CPUは条件分岐予測を行っています。その詳しい仕組みはCPU屋の腕の見せ所ですしすでにたくさん解説があるのでばっさりカットして、\u003cstrong\u003e問題は条件分岐予測に失敗したときのコストが大きいことです\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eとはいえ普通はそんなコストは埋もれて見えないのですが、処理内容によっては重要な事があります。\u003c/p\u003e\n\n\u003cp\u003e条件分岐予測がうまくいくと、\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://apollon.issp.u-tokyo.ac.jp/%7Ewatanabe/diary/d201612.html#d14\" rel=\"nofollow noopener\" target=\"_blank\"\u003e曰記 | 12月14日(水) Hiroshi Watanabe Home Page\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eのように、SIMD化するより速くなることがあるようです(データの依存性が関係する)\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"コンパイラにヒントを与える\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%81%AB%E3%83%92%E3%83%B3%E3%83%88%E3%82%92%E4%B8%8E%E3%81%88%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eコンパイラにヒントを与える\u003c/h2\u003e\n\n\u003cp\u003eGCC/Clangには\u003ccode\u003e__builtin_expect\u003c/code\u003eがあります。これは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"C\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e./linux/include/linux/compiler.h\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#define likely(x)   __builtin_expect(!!(x), 1)\n#define unlikely(x) __builtin_expect(!!(x), 0)\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eのようにして\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003efail\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eみたいに使います。Linuxカーネルではよく使われているようで、これをC++のattributeとして\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eP0479\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e([[\u003c/span\u003e\u003cspan class=\"n\"\u003eunlikely\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eerrno\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003efail\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e追加する提案がC++標準化委員会に上がっていました。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e本の虫: C++標準化委員会の文書: P0471R0-P0479R0\u003cbr\u003e\n\u003ca href=\"https://cpplover.blogspot.jp/2016/11/c-p0471r0-p0479r0.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpplover.blogspot.jp/2016/11/c-p0471r0-p0479r0.html\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0479r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0479R0: Attributes for Likely and Unlikely Branches\u003c/a\u003e\u003cbr\u003e\n条件分岐の分岐が実行される頻度をヒントとして与える属性、[[likely]]と[[unlikely]]の提案。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"profile-guided-optimization\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#profile-guided-optimization\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eProfile Guided Optimization\u003c/h2\u003e\n\n\u003cp\u003eコンパイル時に条件分岐を予測できないなら、一度実行してみてプロファイルをとればいいじゃない、というのがPGOビルドです。他にも関数をinline展開したりします。\u003c/p\u003e\n\n\u003cp\u003eGCCでは\u003ccode\u003e-fprofile-generate\u003c/code\u003eをつけてコンパイルして一度実行し、今度は\u003ccode\u003e-fprofile-use\u003c/code\u003eをつけてコンパイルすればいいようです。\u003c/p\u003e\n\n\u003cp\u003eVisual StudioでもCommunity版でPGOビルドできます。\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://freesofutotravel.blog94.fc2.com/blog-entry-20.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eフリーソフトの旅（windows）　 無意味だとしても私はPGOビルドをする\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://rigaya34589.blog135.fc2.com/blog-entry-540.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003erigayaの日記兼メモ帳 x265 ビルド ～ Visual Studio PGOビルド\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eまあそこまで手間もかからないのでやって損はしないかなぁ・・・。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"条件分岐をbit演算にして消す\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E3%82%92bit%E6%BC%94%E7%AE%97%E3%81%AB%E3%81%97%E3%81%A6%E6%B6%88%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e条件分岐をbit演算にして消す\u003c/h1\u003e\n\n\u003cp\u003e分岐予測を成功させる手段を書きましたが、\u003cstrong\u003e分岐がほぼ同確率な時はどうにもなりません。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eそこで活躍することがある\u003cstrong\u003eかも\u003c/strong\u003eしれないのがbit演算です。bit演算はSIMDとの相性も良いので、条件分岐がネックな場合は切り札になるかもしれません。\u003c/p\u003e\n\n\u003cp\u003eビット演算についてはガチ勢?の方たちが\u003cbr\u003e\nビット演算テクニック Advent Calendar 2016 - Adventar\u003cbr\u003e\n\u003ca href=\"http://www.adventar.org/calendars/1403\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.adventar.org/calendars/1403\u003c/a\u003e\u003cbr\u003e\n記事を書いています。\u003c/p\u003e\n\n\u003cp\u003e先程から何回か名前が出てきた \u003ca href=\"/YSRKEN\" class=\"user-mention js-hovercard\" title=\"YSRKEN\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"YSRKEN\"\u003e@YSRKEN\u003c/a\u003e さんが開発中の連珠の解法探索ソフトShioiでは現在判定の多くをSIMD化したbit演算で行うという\u003cdel\u003e暴挙\u003c/del\u003e快挙に出ようとしています\u003cbr\u003e\nYSRKEN/Shioi at add_iona\u003cbr\u003e\n\u003ca href=\"https://github.com/YSRKEN/Shioi/tree/add_iona\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/YSRKEN/Shioi/tree/add_iona\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれの解説記事が\u003cbr\u003e\nYSR研究所 |連珠をビットボードで表現してみる【ビット演算テクニック Advent Calendar 2016 6日目】\u003cbr\u003e\n\u003ca href=\"http://ysrken.blog.fc2.com/blog-entry-86.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://ysrken.blog.fc2.com/blog-entry-86.html\u003c/a\u003e\u003cbr\u003e\nビットボードの凄さをざっくりと解説してみる\u003cbr\u003e\n\u003ca href=\"http://qiita.com/YSRKEN/items/29829c7f5beae7900f36\" class=\"autolink\" id=\"reference-8168f77f493cb6b004a5\"\u003ehttp://qiita.com/YSRKEN/items/29829c7f5beae7900f36\u003c/a\u003e\u003cbr\u003e\n本人が執筆していらっしゃるので読んでみると面白いと思います。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まとめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまとめ\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e気分で高速化しない、きちんと計測して戦略を練ってから\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eアルゴリズムの選択は計算オーダーばっかりじゃなくて、メモリー確保回数やメモリーアクセスパターンのことも考えよう\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eメモリー確保はとにかく重いから消し飛ばせ、\u003ccode\u003estd::array\u003c/code\u003e強い\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eコンパイル時にできることはコンパイル時に\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"終わりに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e終わりに\u003c/h1\u003e\n\n\u003cp\u003eちょっと来週のAdCの準備に手間取ってたらこの記事書くの遅れましたすみません。もう少し絵をいれて説明したかったけど文字ばっかになってしまった。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cadvent-calendar-2016-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cadvent-calendar-2016-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++Advent Calendar 2016\u003c/h1\u003e\n\n\u003cp\u003e明日はFuyutsubakiさんがなんか書くそうです。\u003cdel\u003e何を書くんでしょうかねぇ・・・(震え)。\u003c/del\u003eマクロからのC++17で追加された構造化束縛の活用例でした。\u003cbr\u003e\n\u003ca href=\"http://qiita.com/Chironian/items/3fb61cffa2a20dbee5c2\"\u003e\u0026lt;\u0026lt; 7日目 | C++形式の共有ライブラリの書き方(gcc編)\u003c/a\u003e || 9日目 | \u003ca href=\"http://txt-txt.hateblo.jp/entry/2016/12/09/225148\" rel=\"nofollow noopener\" target=\"_blank\"\u003e最近書いたマクロ（構造体をtupleに変換したい） - TXT.TXT\u003c/a\u003e/\u003ca href=\"http://txt-txt.hateblo.jp/entry/2016/12/09/225641\" rel=\"nofollow noopener\" target=\"_blank\"\u003eそれでも構造体をtupleに変換したい - TXT.TXT\u003c/a\u003e \u0026gt;\u0026gt;\u003c/p\u003e\n","body":"# C++Advent Calendar 2016\nこの記事は[C++Advent Calendar 2016](http://www.adventar.org/calendars/1527) 8日目の記事です\n[\u003c\u003c 7日目 | C++形式の共有ライブラリの書き方(gcc編)](http://qiita.com/Chironian/items/3fb61cffa2a20dbee5c2) || 9日目 | [最近書いたマクロ（構造体をtupleに変換したい） - TXT.TXT](http://txt-txt.hateblo.jp/entry/2016/12/09/225148)/[それでも構造体をtupleに変換したい - TXT.TXT](http://txt-txt.hateblo.jp/entry/2016/12/09/225641) \u003e\u003e\n\n今年は3日目にして[コンパイル時Cコンパイラ](http://kw-udon.hatenablog.com/entry/2016/12/03/201722)とかいうC++の作者であるBjarne Stroustrupにまで言及されるに至った、頭のおかしい記事が出て、強さしか無いですね！\n\n# はじめに\n皆様、[ナマステ](http://www.nicovideo.jp/watch/sm25261912)。\n\n世の中では、Visual Studio2017 RCがでて、MSが[来年にはtwo-phase lookupを実装する](https://blogs.msdn.microsoft.com/vcblog/2016/11/16/permissive-switch/)というニュースが駆け巡ったり、C++ Builder 10.1 BerlinがでてClangが使えるようになったり(ただし古い)、C++17の内容がいろいろ見えてきたり、またしても[``char8_t``型がrejectされたり](https://botondballo.wordpress.com/2016/11/25/trip-report-c-standards-meeting-in-issaquah-november-2016/)しましたが、\nそれについては誰かが書いてくれる気がするので私はスルーして、もう少し小さなネタを書いていこうと思います。なんかC++Advent Calendarのレベルがやたらと高いので皆さんには常識なのかもしれませんが~~それを言ったらネタがない~~\n\n---\n\n多分読者の方は「艦これ」について名前くらいは聞いたことがあると思います。\nhttp://www.dmm.com/netgame/feature/kancolle.html\n\n\u003e[艦隊これくしょん -艦これ- - Wikipedia](https://ja.wikipedia.org/wiki/%E8%89%A6%E9%9A%8A%E3%81%93%E3%82%8C%E3%81%8F%E3%81%97%E3%82%87%E3%82%93_-%E8%89%A6%E3%81%93%E3%82%8C-)\n\u003e『艦隊これくしょん -艦これ-』（かんたいこれくしょん かんこれ）は、角川ゲームスが開発しDMM.comがブラウザゲームとして配信している育成シミュレーションゲームおよび、そのメディアミックス作品群。ゲーム内容は、第二次世界大戦時の大日本帝国海軍の軍艦を中心とした艦艇を女性キャラクターに擬人化した「艦娘（かんむす）」をゲーム中で集め、強化しながら敵と戦闘し勝利を目指すというものである。2013年4月23日にブラウザ版のサービスを開始した\n\nで、@YSRKEN さんをメイン開発者、 [@sayurin](https://github.com/sayurin)さんと私がリファクタリング\u0026高速化担当をして、艦これの戦闘をシミュレーションするソフトを作っています。\nhttps://github.com/YSRKEN/KanColleSimulator_KAI\n以下[KCS_KAI](https://twitter.com/search?f=tweets\u0026vertical=default\u0026q=%23KCS_KAI\u0026src=typd)と略します。\n\n---\n\nそれからもう一つ、SigContrastFastAviUtlという\nhttps://github.com/yumetodo/SigContrastFastAviUtl\nコントラストをSigmoid関数にもとづいて変更する(マネー)フリーな動画編集ソフトAviUtlのプラグイン\nhttps://github.com/MaverickTse/SigColorAviutl\nを高速化したプラグインを開発したのですが、[@MaverickTse](https://github.com/MaverickTse)さんのコードをベースに大規模なリファクタリングと高速化をしました。\n\n---\n\nこのKCS_KAIとSigContrastFastAviUtlで多数の高速化をやった経験などをベースに、今日一般的なPCにおける高速化の技法を書いていこうと思います。\n\n・・・前置き長いな。\n\n# まずはリファクタリングして可読性を上げる\n\n省略します。やったことが多すぎるので詳細はcommit logでも眺めてください。\n\n# きちんと時間計測をして高速化の戦略を練る\n\n想像と推測で高速化を始めてはいけません。どこがネックなのかを認識してから取り組みましょう。\n\n計測はIDEやgprofのプロファイリング機能を使ってもいいですし、自力で時間計測コードを埋め込んでもいいと思います。\n\nプロファイリングをするときは、**ホットスポットでないルーチンの最適化は行わないようにしましょう**。労力に見合わないですし、プログラミング基本原則である(でっち上げ)\n\n\u003eプログラム　書かなければ　バグらない\n\nに反します。\n\nホットスポットの最適化をするときに、Functions With Most Indivisual Workの解析が役に立ったりします(後述する``std::vector::push_back``のVSのおバカ実装はコレのお陰で見つかった)。\n\n自力で時間計測コードを埋め込んでやるときは、**計測は複数回行って、処理時間の95%信頼区間を求めてそれがコード変更の前後で重ならなくなるか明らかに重なることがわかるまで**(10回以上は計測したい)計測しましょう。\n\nExcelとかで数式うつの面倒だからC++で計算する！という人は\nhttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/time_logger.hpp\nこんな感じのコードで求められます。\n\n``_mm_div_ps``は遅いから``_mm_rcp_ps``をニュートン-ラフソン法で高精度化して使おうみたいな記事を見かけて\n[楓 software: 逆数の高精度化](http://www.kaede-software.com/2008/02/post_513.html)\n実装して計測したら\nhttps://github.com/yumetodo/SigContrastFastAviUtl/pull/9/commits/50fba5aa61324c2c6eb6e4b44ff815179ed26042\n1%(+-2.4% N=19)遅くなってたなんてこともありました。\n\n注意点として、小さすぎる粒度での時間計測はあまり意味がありません。最近のCPUはパイプラインと言って、1clockに1命令なんてのんびりしたことはしないで、開いている演算機を稼働させて1clock1命令以上実行している。処理に依存性が少ないとこのパイプラインがうまく動く。というわけである程度大きめの粒度で計測しましょう。\n\n# メモリ律速なものはどうしようもない\n\n特に映像処理の分野では、メモリ律速に悩まされることが多いです。メモリ律速なものは多くの場合高速化できないので、DDR4積んでるメモリーを使うとか、メモリー転送帯域の大きいハードウェアをつかうとかそういう話になります。\n\nそれでもどうにかこうにか高速化しようと奮闘している方もいるのですが。\n\n\u003erigayaの日記兼メモ帳 2015年を振り返る (エンコ編)\nhttp://rigaya34589.blog135.fc2.com/blog-entry-715.html\n\n\u003e自動フィールドシフト (afs)\n今年は自動フィールドシフトを速くするネタを思いつけなかった。誠に遺憾である。\n\n\u003eまあこれまでも結構速くしたのだけど、24pへのインタレ解除はこれしか使わないので、もっと速くしていきたい。とはいっても演算律速というわけではなくメモリ律速なので、できることが限られているのが辛い。\n\n\u003eQSVEnc\nQSVはハードウェアエンコーダの中でも高速で、画質もまあ、比較的よいほう。\n\n\u003e今年の大半はQSVEncCのavqsv周りをやっていた気がする。QSVでデコード→Vpp→エンコードまでを一貫して行うavqsvモードは、QSV高速化のためには必須であり、やっとQSVEncCが他のQSVエンコーダと比べて遅いという嘆かわしい状態を解決できたと思う。高速化とは良いものだ。まあ、最終的にはメモリ速度律速なのだけど…。\n\n映像処理はQSVとかNVEncみたいなハードウェアエンコーダー/デコーダーの登場でだいぶ前進した感あるけど結局はメモリ律速に悩まされるという。\n\n昨年(2015年)バズったwaifu2xなんかはメモリー律速の最たる例で、それでもメモリー配置を予測して頑張ったりと奮闘している方をたくさん見かけましたね。\n最内ループからはじめる深層学習(waifu2xの高速化)\nhttp://int.main.jp/txt/waifu2x.html\n\n私の脳みそでは上記リンク先はちょっと理解しきれないわけですが。\n\n# 依存ライブラリが適切か調べる\n\nhttps://github.com/MaverickTse/SigColorAviutl\nと\nhttps://github.com/yumetodo/SigContrastFastAviUtl\nの最も大きい違いは、[ImageMagick](http://www.imagemagick.org/)に依存しているか否かです。\n\nImageMagickは内部で関数呼出しを一度内部でコマンド文字列に変換してそれを再度パースして関数ポインタを介して処理をするとかいう、頭のおかしいことをやっていて、その結果\n**ImageMagickを使う=遅くなる=ImageMagickを使う者はC++erにあらず**\nという等式が成立するレベルで遅いです。\n\n逆に**適切なライブラリを選択すれば、下手に自分で書くより高速化できます**。例えばOpenCVだとちゃんと掛けば自動で並列化したりGPU使ったりできますね。\n\n# アルゴリズムの見直し\n\n当たり前といえば当たり前ですが、いくつか。\n\n## テーブル引き\nSigContrastFastAviUtlの場合、Sigmoid関数という処理の肝があります。\n\n```math\nf(u)=\\frac{\\frac{1}{exp(s(m - u)) + 1} - \\frac{1}{exp(sm) + 1}}{\\frac{1}{exp(s(m - 1)) + 1} - \\frac{1}{exp(sm) + 1}}\n```\n\ns:strength m:midtone u:input\n\n見るからに重そうな数式ですが、これを画像の画素数×映像のframe数回呼び出すことになるのでえげつない計算量が必要です。\n\nしかしSigContrastFastAviUtlの場合、sとmは定数扱いでき、uは0-4096の計4097通りしか無いので**事前にキャッシュしてあとでそれを参照するtable引きが有効です。**\n\n---\n\n```cpp\n\nint *pDst, *pTable, *pIndex;\nfor (int i = 0; i \u003c 8; i++) {\n    pDst[i] = pTable[pIndex[i]];\n}\n```\n\nのような二重テーブル引きをやってくれる``vpgatherdd``命令なんてものがAVX2にはあって、Intel Haswellで導入され、Intel Broadwell以降(Skylake含む)では高速に動作するそうです。\n\n```cpp:vpgatherdd\nint *pTable;\n__m256i yDst, yIndex;\nyDst = _mm256_i32gather_epi32(pTable, yIndex, 4);\n```\n\n詳細は\nrigayaの日記兼メモ帳 PMD_MT 高速化版+5 gatherの速度とか\nhttp://rigaya34589.blog135.fc2.com/blog-entry-849.html\nへ。\n\n---\n\nただし、**SIMD化するときにtable引きするより愚直にSIMDの馬力を活かしてひたすら計算したほうが速いこともあるようなので**都度どちらが速いか考える必要があります。\n\n\u003erigayaの日記兼メモ帳 PMD_MT 高速化版\n\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-483.html\n\u003eところが、高速化にあたって導入したいSIMD演算はテーブル参照とはあまり相性が良くない。そこで今回のSIMD化による高速化では、「useExp」オプションがオフの時には、テーブル参照をやめて、愚直に浮動小数点演算によって行うようにした。テーブル参照をして演算量を減らすよりも、SIMDの馬力を活かしてひたすら計算したほうが速いみたい。(というより、AVXを使うと浮動小数点演算を一度に8演算、FMA3を使えば一度に16演算できるので、どちらかというとFMA3でゴリ押しできることを前提に作ってる…)\n\n---\n\n注意点ですが、テーブル引きするときは、テーブルの参照コストはO(1)にしましょう。\nもっというと、**テーブル引きに``std::map``/``std::unorderd_map``を使ってはいけません**\n逆関数かくの面倒だからといって元の関数を流用して``std::lower_bound``で誤魔化そうとか思わずに頑張ってはO(1)にしましょう。\nhttps://github.com/yumetodo/SigContrastFastAviUtl/pull/9\n\n## 計算オーダーが全てではない\n\n後述するメモリーアクセスパターンやメモリー確保のコストなどが原因で、計算オーダーが良くても最速ではないことがあります。\n\nそのいい例が\n[C++で効率よく重複のない乱数列を生成する#結果](http://qiita.com/hmito/items/9f4bdc8442b6f6b3c7bc#%E7%B5%90%E6%9E%9C)\nこれでしょうか。\n\n![img](https://qiita-image-store.s3.amazonaws.com/0/44283/505a23b1-aeb0-fd43-e0ae-923e2cb4d605.png)\n平らなグラフは計算オーダー的に優れていることを示しますが、最速ではないことが分かります。\n\n# メモリーアクセスパターンの改善\n\n映像処理なんか書いていると、この辺が大事になってきます。\n\nまず\n\nCPUの気持ちになれるツール作った - ( ꒪⌓꒪) ゆるよろ日記\nhttp://yuroyoro.hatenablog.com/entry/2014/10/20/102416\nRemix: Latency Numbers Every Programmer Should Know(2014)\nhttp://yuroyoro.net/latency.html\nを見てみましょう。~~CPUの歓声~~CPUから見たアクセス速度が実感できます。\n\nメモリー以外にCPUにはキャッシュがあります。このキャッシュにデータが乗っかりやすいようにメモリーアクセスをすることが大事です。\n\n**つまりシーケンシャルに(連続的に)メモリーアクセスしろ**ということです。\n\nまた、SIMD化によってメモリーアクセス回数を減らすことも効果的です。\n\n\u003erigayaの日記兼メモ帳 自動フィールドシフト 高速化版+8\n\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-360.html\n\u003eafsには、メモリ空間に対し飛び飛びにアクセスする部分がある。こういった飛び飛びのアクセスは、非常に時間が掛かってしまう。\n\n\u003eそもそも、(キャッシュに入っていない)メモリアクセスというのはとんでもなく遅い。メモリ上を飛び飛びにアクセスしていると特にひどい。\n\n\u003eこれに対し、オリジナルのafsでは、\n\n\u003e- MMXの使用により、64bitまとめて処理\n　　→64bitずつのアクセスになり、メモリアクセスの回数自体が減る。\n\n\u003eにより高速化していたし、さらにこれまでの高速化版では、\n\n\u003e1. SSEの使用により、128bitずつ処理\n\u003e2. prefetch命令の挿入により、必要になる飛び飛びのメモリの断片を明示的に先読み\n\n\u003eして高速化していた。prefetch命令の挿入は非常に効果が大きかった(高速化の1/3ぐらいはprefetch命令のおかげだった)。\n\n\u003eしかし、いくら先読みしているとはいっても、煩雑な飛び飛びのアクセスをしていることには変わりなく、根本的な解決にはなっていない。\n\n\u003e今回の高速化版では、なるべく連続的なメモリアクセスをするようにプログラムを変更した。こうすることで、\n\n\u003e- prefetch命令不要\n- 効率的なメモリアクセス\n\n\u003eとなり、さらに高速化できた。\n\n---\n\nメモリーアクセスパターンといえばC++標準化委員会に``flat_map``が提案されていましたね\n\n本の虫: C++標準化委員会の文書: P0421R0-P0429R0\nhttps://cpplover.blogspot.jp/2016/11/c-p0421r0-p0429r0.html\n\u003e[[PDF] P0429R0: A Standard flat_map](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0429r0.pdf)\n\n\u003eflat_mapと従来のmapのベンチマーク結果があるが、要素の挿入と削除はとても遅く、イテレートはとても速く、検索はmapより速いがunordered_mapよりは遅い結果となっている。そのデータ構造から考えて予想通りの特性だ。\n\n\u003eまた、メモリ使用量が少ない。これは当然の話で、mapを素直に実装するには左右の葉ノードと親ノードへの3個のポインターを持つノードによるバイナリツリーになる上に、メモリ確保をノード単位で行うためにメモリ管理のためのメモリも必要になる。**また、連続したストレージ上に確保されるためキャッシュの局所性が最高だ。**\n\n---\n\nシーケンシャルアクセスといえば今年のNHK技研の公開でシーケンシャルアクセスしかできない超高速にRead/Writeできる記憶媒体が紹介されていたなぁ・・・。詳細が思い出せないけど、映像の高精細化に伴うメモリー速度要求に対する一次バッファとしての利用を提案していたっけか。\n\n---\n\nさらに詳しいメモリーアクセスパターンの話は\n[[PDF注意]第9回　高速化チューニングとその関連技術２ | 渡辺宙志](http://www.cms-initiative.jp/ja/events/0613watanabe.pdf)\nに詳しく書かれているので参照してみてください。\n\n# OpenMPじゃなくてC++11のThreadを\n\nつまりマルチスレッド化ですね。**ループ間の作業に依存性が無いときはとりあえずマルチスレッド化するのが常道**だと思います。\nKCS_KAIでは最初に数個のスレッドを作るだけなのであまり関係ありませんが、SigContrastFastAviUtlのように映像処理なんかで画像一枚一枚単位でマルチスレッド化する場合はスレッド生成のコストが無視できないので、OpenMPは避けたほうが良いです。オーバーヘッドが大きいので。OpenMPは[ランタイムをstatic linkできないという問題](https://github.com/YSRKEN/KanColleSimulator_KAI/pull/92)もあります。\n\n他のマルチスレッド化の選択肢としては\n\n- [VSのAuto-Parallelizer](https://msdn.microsoft.com/ja-jp/library/hh872235.aspx)→自動変数領域の確保が信じられないほど遅い\n- pthread→自力で叩きたくない\n- Win32API→自力で叩きたくない\n- Intel TBB\n- Visual C++に付属するPPL\n\nがありますが、せっかくC++11でstd::thread入ったので使いましょう。スレッド生成コストはVSのAuto-Parallelizerと同じか誤差レベルでstd::threadが速かったです。\n\nとはいえスレッド生成とかタスク分割とかを自分で書かないといけないので\nhttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/thread.hpp\nこんな風に適当にラップしました。\n\nC++17ではalgorithmヘッダーとかにある関数が引数一つ増やすだけで並列実行してくれるらしいので早く使いたいですね。~~例外周りも``exception_list``があるのでより気軽に使えそうです。~~\n追記:``exception_list``は死んだそうです。そういや本の虫にそんな話が出てたな、忘れてた。\n\n\u003e本の虫: C++標準化委員会の文書: P0390R0-P0399R0\n\u003ehttps://cpplover.blogspot.jp/2016/09/c-p0390r0-p0399r0.html\n\u003e[P0394R4: Hotel Parallelifornia: terminate() for Parallel Algorithms Exception Handling](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0394r4.html)\n\n\u003e並列アルゴリズムに渡した要素アクセス関数が例外を投げた時は、投げられた複数の例外がstd::exception_listに格納されて返されるという仕様になっている。しかし、実行ポリシーがpar_unseqの時だけはstd::terminate()を呼び出すとなっており、一貫性がない。\n\n\u003eこれを考えるに、一律std::terminate()を呼び出すことで統一したほうがよい。そのほうが生成されるコードも簡単になるし、exception_listに持ち上がっている数々の問題への対処も不要になる。\n\n\u003eという変更をする提案。\n\n# ``std::vector``はreserveして使う\n\n~~特にVisual Studioの付録の``std::vector::push_back``の実装は腐っていて、``std::vector::push_back``を呼び出すたびに、現在の領域の大きさ+1のメモリーを確保して要素をすべてcopy/moveする、というのに近い状況が発生します。~~\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://t.co/lJApJ6CFOL\"\u003ehttps://t.co/lJApJ6CFOL\u003c/a\u003e\u003cbr\u003eこのツイートについて今更検証したところ、VSはDebug/Releaseにかかわらず基数1.5でcapacityを増やしていくので、1～4までは1づつ増加するというだけだった\u003c/p\u003e\u0026mdash; Az (@azaika_) \u003ca href=\"https://twitter.com/azaika_/status/807884842318729216\"\u003e2016年12月11日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/azaika_\"\u003e@azaika_\u003c/a\u003e どうやら最初に8要素分確保しておくようなことはしていないらしい(画像参照) \u003ca href=\"https://t.co/JCL0KGLksd\"\u003epic.twitter.com/JCL0KGLksd\u003c/a\u003e\u003c/p\u003e\u0026mdash; Az (@azaika_) \u003ca href=\"https://twitter.com/azaika_/status/807885024225685504\"\u003e2016年12月11日\u003c/a\u003e\u003c/blockquote\u003e\n1.5倍ゲームでの実装のようです。reserveして使うべし、という結論に変わりはありませんが。\n\ncf.) https://github.com/YSRKEN/KanColleSimulator_KAI/issues/64#issuecomment-196514956\n\n今日の一般的なPCは潤沢にメモリーがあるので、どんぶり勘定で大きめの領域をreserveしておくか、push_backのときに\n\n\n```cpp\nvector\u003c/* some type */\u003e re;\n#ifdef _MSC_VER\nif (v.capacity() \u003c v.size() + 1) v.reserve((std::numeric_limits\u003csize_t\u003e::max() / 2 \u003c v.size()) ? std::numeric_limits\u003csize_t\u003e::max() : v.size() * 2);\n#endif\nv.push_back(/* someting */);\n```\n\nのように強制的に倍々ゲームをするコードを書きましょう。\n\nちなみにGCCやClangは倍々ゲームをしてくれます。\n\n# メモリー確保を減らす\n\n**みんな``std::vector``が便利すぎて使いすぎてませんか？**\n\n実際適当に書いても動くしそこそこ速いので私も使っていますが、高速化のときはそれを見直す必要があります。\n\n**そもそもメモリー確保自体が無茶苦茶重いので高速化の際はそれを減らすことが大事です**\n\n具体的には、**要素数が固定か、可変だけども最大数が決まっているもの**はすべて``std::array``で書き換えるべきです。\n\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/a50a2e4dda7fdf11ca192ab4506d96cdfe51f161/KCS_CUI/source/fleet.cpp#L429\n\n```cpp\n// 生存艦から艦娘をランダムに指定する(航空戦用)\ntuple\u003cbool, size_t\u003e Fleet::RandomKammusu() const {\n\t//生存艦をリストアップ\n\tstd::array\u003csize_t, kMaxUnitSize\u003e alived_list;\n\tsize_t alived_list_size = 0;\n\tfor (size_t ui = 0; ui \u003c this-\u003eGetUnit().front().size(); ++ui) {\n\t\tif (this-\u003eGetUnit().front()[ui].Status() != kStatusLost) {\n\t\t\talived_list[alived_list_size] = ui;\n\t\t\t++alived_list_size;\n\t\t}\n\t}\n\tif (alived_list_size == 0) return tuple\u003cbool, size_t\u003e(false, 0);\n\treturn tuple\u003cbool, size_t\u003e(true, SharedRand::select_random_in_range(alived_list, alived_list_size));\n}\n```\n\nこのように``std::array::size()``はcapacityとして扱い、別にsizeを管理する変数を作ります。\n\n**``std::vector``から``std::array``への置き換えはかなり強力で、KCS_KAIに施した高速化の1/3くらいは占めていると思います**。\n\nただ、別に変数作るのはつらみがあるので、[@bolero_MURAKAMI](https://twitter.com/bolero_MURAKAMI)氏に問い合わせたところ\n\n\u003ehttp://ask.fm/bolero_MURAKAMI/answers/137022673016\n\u003e\u003esproutにcapacity固定、sizeが0からcapacityの間で可変の配列クラスはあるか\n\n\u003evalarray と sub_array\u003e\n\nとの回答が来ましたが、今のところ私にはこのクラスの使い方がわかっていません。\n\n---\n\nなにもメモリー確保はstd::vectorだけではないので、当然その他のメモリー確保も注意が必要です。\n\n\u003ehttp://rigaya34589.blog135.fc2.com/blog-entry-483.html\n\u003eほかにも毎フレームメモリを確保して破棄していたのをやめ、一度確保したメモリを使いまわすことでちょっと高速化した。(メモリの確保はとにかく遅いため、毎フレームメモリを確保→開放したりすると重くなる)\n\n一度確保した領域はなるべく使いまわしましょう(初期化バグに注意)。\n\n\n# ``std::basic_string::opeartor==``に注意せよ\n\nまたしてもVisual Studioの話ですが、ちょっとここでVisual Studio 2017 RCのリリースノートを見てみましょう。\n\n\u003e[Visual Studio 2017 リリース ノート#C++ ライブラリ](https://www.visualstudio.com/ja-jp/news/releasenotes/vs2017-relnotes#a-namec-librariesac-ライブラリ)\n\n\u003e- パフォーマンスの向上: basic_string::operator== は、**文字列の内容を比較する前に文字列のサイズをチェックするようになりました**。\n\nなんだって！？今まで文字列比較は長さを見ていなかったの！？\n\n---\n\nまあお馬鹿なVSの話はさておき、場合によっては文字列のハッシュを計算しておいてそれを比較したり、enum classに変換しておくほうが高速になることがあります。\n\n# constexprは市民の義務です\n\nC++規格への準拠が遅いVisual StudioでもC++11constexprがVisual Studio 2015 Update 2 から使えるようになりました。これにより、C++ Builder(not clang_based version)とかいう糞を無視すれば、**我々はconstexprを使えるという人権を得ました。**\n\nもちろんC++11constexprは相当制約がきつく、ひたすら3項演算子と再帰と戯れる世界ですが、それでもいろいろできることはあります。\n\n## プリプロセス時ファイル読み込み+コンパイル時処理→コンパイル時DB構築\n\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/46\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/57\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/pull/62\nでそんなことをやるコードを[@sayurin](https://github.com/sayurin)氏が実装したので要約して紹介します。\n\n材料\n\n- 細工したcsvファイル\n- ``#include``\n- ``constexpr``\n- ``std::integral_const``\n- UDLs\n- プリプロセッサマクロ関数少々\n\nまず\n\n```\n艦船ID,艦名,艦種,耐久,装甲,火力,雷撃,対空,運,速力,射程,スロット数,搭載数,回避,対潜,索敵,初期装備,艦娘フラグ\n1,睦月,2,13/24,5/18,6/29,18/59,7/29,12/49,10,1,2,0/0/0/0/0,37/79,16/39,4/17,1/37/-1/-1/-1,1\n2,如月,2,13/24,5/18,6/29,18/49,7/29,10/49,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n6,長月,2,13/24,5/18,6/29,18/49,7/29,15/69,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n7,三日月,2,13/24,5/18,6/29,18/49,7/29,10/49,10,1,2,0/0/0/0/0,37/69,16/39,4/17,1/-1/-1/-1/-1,1\n9,吹雪,2,15/29,5/19,10/29,27/79,10/39,17/49,10,1,2,0/0/0/0/0,40/89,20/49,5/19,2/13/-1/-1/-1,1\n10,白雪,2,15/29,5/19,10/29,27/69,10/39,10/49,10,1,2,0/0/0/0/0,40/79,20/49,5/19,2/-1/-1/-1/-1,1\n```\n\nこんな感じのcsvがあります。これを\n\n```c:ships.csv\n\n//PREFIX,艦船ID,艦名,艦種,耐久,装甲,火力,雷撃,対空,運,速力,射程,スロット数,搭載数,回避,対潜,索敵,初期装備,艦娘フラグ,POSTFIX\nSHIP(,1,\"睦月\",2,13.24,5.18,6.29,18.59,7.29,12.49,10,1,2,0.0.0.0.0,37.79,16.39,4.17,1.37.-1.-1.-1,1,)\nSHIP(,2,\"如月\",2,13.24,5.18,6.29,18.49,7.29,10.49,10,1,2,0.0.0.0.0,37.69,16.39,4.17,1.-1.-1.-1.-1,1,)\nSHIP(,6,\"長月\",2,13.24,5.18,6.29,18.49,7.29,15.69,10,1,2,0.0.0.0.0,37.69,16.39,4.17,1.-1.-1.-1.-1,1,)\nSHIP(,7,\"三日月\",2,13.24,5.18,6.29,18.49,7.29,10.49,10,1,2,0.0.0.0.0,37.69,16.39,4.17,1.-1.-1.-1.-1,1,)\nSHIP(,9,\"吹雪\",2,15.29,5.19,10.29,27.79,10.39,17.49,10,1,2,0.0.0.0.0,40.89,20.49,5.19,2.13.-1.-1.-1,1,)\nSHIP(,10,\"白雪\",2,15.29,5.19,10.29,27.69,10.39,10.49,10,1,2,0.0.0.0.0,40.79,20.49,5.19,2.-1.-1.-1.-1,1,)\n```\n\nこんな感じに細工します。\nこの変換はもちろん自動化できます。\n[(Feat)generate csv for cpp by yumetodo · Pull Request #174 · YSRKEN/KanColleSimulator_KAI](https://github.com/YSRKEN/KanColleSimulator_KAI/pull/174)\n試しにpowershellとbash scriptで自動化しました\n\n次に\n\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/kammusu.hpp\n\n```cpp\nenum class ShipId {\n#define SHIP(PREFIX, ID, NAME, SHIPCLASS, MAX_HP, DEFENSE, ATTACK, TORPEDO, ANTI_AIR, LUCK, SPEED, RANGE, SLOTS, MAX_AIRS, EVADE, ANTI_SUB, SEARCH, FIRST_WEAPONS, KAMMUSU_FLG, POSTFIX)\t\\\n\tI ## D ## ID = ID,\n#include \"ships.csv\"\n#undef SHIP\n};\n```\n\n``SHIP``という関数マクロを作って、変換しているんですね。同様にして\n\n```cpp\nenum class ShipClass {\n\tPT  = 0x00000001,\t// 魚雷艇\n\tDD  = 0x00000002,\t// 駆逐艦\n\tCL  = 0x00000004,\t// 軽巡洋艦\n\tCLT = 0x00000008,\t// 重雷装巡洋艦\n\tCA  = 0x00000010,\t// 重巡洋艦\n\tCAV = 0x00000020,\t// 航空巡洋艦\n\tCVL = 0x00000040,\t// 軽空母\n\tCC  = 0x00000080,\t// 巡洋戦艦\n\tBB  = 0x00000100,\t// 戦艦\n\tBBV = 0x00000200,\t// 航空戦艦\n\tCV  = 0x00000400,\t// 正規空母\n\tAF  = 0x00000800,\t// 陸上型\n\tSS  = 0x00001000,\t// 潜水艦\n\tSSV = 0x00002000,\t// 潜水空母\n\tLST = 0x00004000,\t// 輸送艦\n\tAV  = 0x00008000,\t// 水上機母艦\n\tLHA = 0x00010000,\t// 揚陸艦\n\tACV = 0x00020000,\t// 装甲空母\n\tAR  = 0x00040000,\t// 工作艦\n\tAS  = 0x00080000,\t// 潜水母艦\n\tCP  = 0x00100000,\t// 練習巡洋艦\n\tAO  = 0x00200000,\t// 給油艦\n};\nnamespace detail {\n\tconstexpr std::pair\u003ccstring\u003cwchar_t\u003e, ShipId\u003e shipIdMap[] = {\n#define SHIP(PREFIX, ID, NAME, SHIPCLASS, MAX_HP, DEFENSE, ATTACK, TORPEDO, ANTI_AIR, LUCK, SPEED, RANGE, SLOTS, MAX_AIRS, EVADE, ANTI_SUB, SEARCH, FIRST_WEAPONS, KAMMUSU_FLG, POSTFIX)\t\\\n\t\t{ L##NAME, ShipId::I##D##ID },\n#include \"ships.csv\"\n#undef SHIP\n\t};\n\tconstexpr std::pair\u003ccstring\u003cwchar_t\u003e, ShipClass\u003e shipClassMap[] = {\n\t\t{ L\"魚雷艇\", ShipClass::PT },\n\t\t{ L\"駆逐艦\", ShipClass::DD },\n\t\t{ L\"軽巡洋艦\", ShipClass::CL },\n\t\t{ L\"重雷装巡洋艦\", ShipClass::CLT },\n\t\t{ L\"重巡洋艦\", ShipClass::CA },\n\t\t{ L\"航空巡洋艦\", ShipClass::CAV },\n\t\t{ L\"軽空母\", ShipClass::CVL },\n\t\t{ L\"巡洋戦艦\", ShipClass::CC },\n\t\t{ L\"戦艦\", ShipClass::BB },\n\t\t{ L\"航空戦艦\", ShipClass::BBV },\n\t\t{ L\"正規空母\", ShipClass::CV },\n\t\t{ L\"陸上型\", ShipClass::AF },\n\t\t{ L\"潜水艦\", ShipClass::SS },\n\t\t{ L\"潜水空母\", ShipClass::SSV },\n\t\t{ L\"輸送艦\", ShipClass::LST },\n\t\t{ L\"水上機母艦\", ShipClass::AV },\n\t\t{ L\"揚陸艦\", ShipClass::LHA },\n\t\t{ L\"装甲空母\",ShipClass::ACV },\n\t\t{ L\"工作艦\", ShipClass::AR },\n\t\t{ L\"潜水母艦\", ShipClass::AS },\n\t\t{ L\"練習巡洋艦\", ShipClass::CP },\n\t\t{ L\"給油艦\", ShipClass::AO },\n\t};\n}\n```\n\n``cstring``は変更操作ができないコンパイル文字列クラスと思ってください。\nhttps://github.com/YSRKEN/KanColleSimulator_KAI/blob/master/KCS_CUI/source/cstring.hpp\n\nそうしたら\n\n```cpp\n// 文字列から艦船IDへ変換します。\n#define SID(STR) (std::integral_constant\u003cShipId, Single(detail::shipIdMap, L##STR##_cs)\u003e{}())\n// 文字列から艦種へ変換します。\n#define SC(STR) (std::integral_constant\u003cShipClass, Single(detail::shipClassMap, L##STR##_cs)\u003e{}())\n```\n\nこんなマクロを追加します。``_cs``は``cstring``を作るUDLsで、``Single``は分割統治法を使って第1引数に与えられた配列から第2引数の文字列に対応する値を取ってくるconstexpr関数です。\n\n``std::integral_constant``を噛ませている理由ですが、こうしないで例えばこれ自体もUDLsにすると、コンパイル時に評価してくれなかったので、強制的にコンパイル時に``Single``関数を走らせるためにtemplate実引数で呼び出すためです。で、毎回``std::integral_constant``と書くのは辛いのでマクロを使っています。\n\nこうすることで、例えば``SID(\"五十鈴改二\")``とすることでenum classである``ShipId``型にコンパイル時に変換できたり、``SC(\"戦艦\")``とすることでenum classである``ShipClass``型にコンパイル時に変換できたりします。\n\n残念ながらKCS_KAIではコンパイル時にDB検索まではしていませんが、実装は可能だと思います(将来実装したい)。\n\nコンパイル時にDB検索まではしていないものの、文字列での``std::unorderd_map``検索より遥かに高速化できています。また、ついでに動的確保を減らせているのでさらなる高速化に寄与しています。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003ecpp（≠c++）の勝利！ \u003ca href=\"https://t.co/4EBEkVZm6d\"\u003ehttps://t.co/4EBEkVZm6d\u003c/a\u003e\u003c/p\u003e\u0026mdash; はぇ～☆ (@haxe) \u003ca href=\"https://twitter.com/haxe/status/806780847747518465\"\u003e2016年12月8日\u003c/a\u003e\u003c/blockquote\u003e\n\n# 条件分岐予測を成功させる\n\n御存知の通り、CPUは条件分岐予測を行っています。その詳しい仕組みはCPU屋の腕の見せ所ですしすでにたくさん解説があるのでばっさりカットして、**問題は条件分岐予測に失敗したときのコストが大きいことです**。\n\nとはいえ普通はそんなコストは埋もれて見えないのですが、処理内容によっては重要な事があります。\n\n条件分岐予測がうまくいくと、\n\n[曰記 | 12月14日(水) Hiroshi Watanabe Home Page](http://apollon.issp.u-tokyo.ac.jp/~watanabe/diary/d201612.html#d14)\n\nのように、SIMD化するより速くなることがあるようです(データの依存性が関係する)\n\n## コンパイラにヒントを与える\n\nGCC/Clangには``__builtin_expect``があります。これは\n\n```C:./linux/include/linux/compiler.h \n#define likely(x)\t__builtin_expect(!!(x), 1)\n#define unlikely(x)\t__builtin_expect(!!(x), 0)\n```\n\nのようにして\n\n```c\nif(unlikely(0 != errno)) goto fail;\n```\n\nみたいに使います。Linuxカーネルではよく使われているようで、これをC++のattributeとして\n\n```cpp:P0479\nif([[unlikely]] 0 != errno) goto fail;\n```\n\n追加する提案がC++標準化委員会に上がっていました。\n\n\u003e本の虫: C++標準化委員会の文書: P0471R0-P0479R0\n\u003ehttps://cpplover.blogspot.jp/2016/11/c-p0471r0-p0479r0.html\n\u003e[P0479R0: Attributes for Likely and Unlikely Branches](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0479r0.html)\n\u003e条件分岐の分岐が実行される頻度をヒントとして与える属性、[[likely]]と[[unlikely]]の提案。\n\n## Profile Guided Optimization\n\nコンパイル時に条件分岐を予測できないなら、一度実行してみてプロファイルをとればいいじゃない、というのがPGOビルドです。他にも関数をinline展開したりします。\n\nGCCでは``-fprofile-generate``をつけてコンパイルして一度実行し、今度は``-fprofile-use``をつけてコンパイルすればいいようです。\n\nVisual StudioでもCommunity版でPGOビルドできます。\n\n- [フリーソフトの旅（windows）　 無意味だとしても私はPGOビルドをする](http://freesofutotravel.blog94.fc2.com/blog-entry-20.html)\n- [rigayaの日記兼メモ帳 x265 ビルド ～ Visual Studio PGOビルド](http://rigaya34589.blog135.fc2.com/blog-entry-540.html)\n\nまあそこまで手間もかからないのでやって損はしないかなぁ・・・。\n\n# 条件分岐をbit演算にして消す\n\n分岐予測を成功させる手段を書きましたが、**分岐がほぼ同確率な時はどうにもなりません。**\n\nそこで活躍することがある**かも**しれないのがbit演算です。bit演算はSIMDとの相性も良いので、条件分岐がネックな場合は切り札になるかもしれません。\n\nビット演算についてはガチ勢?の方たちが\nビット演算テクニック Advent Calendar 2016 - Adventar\nhttp://www.adventar.org/calendars/1403\n記事を書いています。\n\n先程から何回か名前が出てきた @YSRKEN さんが開発中の連珠の解法探索ソフトShioiでは現在判定の多くをSIMD化したbit演算で行うという~~暴挙~~快挙に出ようとしています\nYSRKEN/Shioi at add_iona\nhttps://github.com/YSRKEN/Shioi/tree/add_iona\n\nこれの解説記事が\nYSR研究所 |連珠をビットボードで表現してみる【ビット演算テクニック Advent Calendar 2016 6日目】\nhttp://ysrken.blog.fc2.com/blog-entry-86.html\nビットボードの凄さをざっくりと解説してみる\nhttp://qiita.com/YSRKEN/items/29829c7f5beae7900f36\n本人が執筆していらっしゃるので読んでみると面白いと思います。\n\n# まとめ\n\n- **気分で高速化しない、きちんと計測して戦略を練ってから**\n- アルゴリズムの選択は計算オーダーばっかりじゃなくて、メモリー確保回数やメモリーアクセスパターンのことも考えよう\n- **メモリー確保はとにかく重いから消し飛ばせ、``std::array``強い**\n- コンパイル時にできることはコンパイル時に\n\n# 終わりに\n\nちょっと来週のAdCの準備に手間取ってたらこの記事書くの遅れましたすみません。もう少し絵をいれて説明したかったけど文字ばっかになってしまった。\n\n# C++Advent Calendar 2016\n\n明日はFuyutsubakiさんがなんか書くそうです。~~何を書くんでしょうかねぇ・・・(震え)。~~マクロからのC++17で追加された構造化束縛の活用例でした。\n[\u003c\u003c 7日目 | C++形式の共有ライブラリの書き方(gcc編)](http://qiita.com/Chironian/items/3fb61cffa2a20dbee5c2) || 9日目 | [最近書いたマクロ（構造体をtupleに変換したい） - TXT.TXT](http://txt-txt.hateblo.jp/entry/2016/12/09/225148)/[それでも構造体をtupleに変換したい - TXT.TXT](http://txt-txt.hateblo.jp/entry/2016/12/09/225641) \u003e\u003e\n","coediting":false,"comments_count":7,"created_at":"2016-12-08T18:52:41+09:00","group":null,"id":"c7c00b371f6c4a1be668","likes_count":40,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"最適化","versions":[]},{"name":"高速化","versions":[]},{"name":"performance","versions":[]}],"title":"艦これシミュレーターを作ったときとかに得た高速化のノウハウ","updated_at":"2017-02-04T20:13:39+09:00","url":"https://qiita.com/yumetodo/items/c7c00b371f6c4a1be668","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"caution\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#caution\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eCaution\u003c/h1\u003e\n\n\u003cp\u003e記事中で符号なし整数の演算結果が負になる場合の挙動をUBとして紹介していますが、定義された動作でした。\u003c/p\u003e\n\n\u003cp\u003eN4318の\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAs can be seen, per the standard the negative result wraps around from the maximum positive value for the simple minus operation\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eの文章ちゃんと読んで、執筆時の私・・・\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e最近、ツイッターを見ていると、プログラマの間でnull安全という言葉がバズっていますね。私も次のようなエントリを楽しく眺めていた訳です：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/koher/items/e4835bd429b88809ab33\" id=\"reference-420dab1b3a16b5e3124c\"\u003enull安全でない言語は、もはやレガシー言語だ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/takasek/items/119218a2bae2f75062c0\" id=\"reference-17107a03dc3943999283\"\u003enull安全はいいぞ。だって、型安全はいいぞ。\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15\" id=\"reference-72626f95d7b8c6f808e3\"\u003enull安全を誤解している人達へのメッセージ\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eさてそんな中、少しだけ私の心に留まったエントリがこれです：\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/kazatsuyu/items/a040992c5dff7cfe6537\" id=\"reference-abb5a3c2c608959fc863\"\u003enull安全な言語は、本当にゼロコストか\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e何ていうことが書かれている\u003cbr\u003e\n\u003ca href=\"http://qiita.com/AoiMoe/items/2554f78dc9c197d22109\" id=\"reference-7a6906ba4d9a4b8e72ca\"\u003eコンパイラのリミッタが外れつつある今、null安全は必須なのかもしれない\u003c/a\u003e\u003cbr\u003e\n記事を見かけました。確かに、null安全という言葉がバズっていますなぁ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ccにおけるnull安全が必要な理由はなにか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cc%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bnull%E5%AE%89%E5%85%A8%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E7%90%86%E7%94%B1%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC/C++におけるnull安全が必要な理由はなにか\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://qiita.com/AoiMoe/items/2554f78dc9c197d22109\"\u003eコンパイラのリミッタが外れつつある今、null安全は必須なのかもしれない\u003c/a\u003e\u003cbr\u003e\nコンパイラが斜め上の最適化をするようになったからnull安全ないと怖いよね\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eこの一言に尽きます。\u003cstrong\u003eが、そもそもなぜ斜め上の最適化をするのでしょうか？\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"いろいろあるけどundefined-behaviorを踏んでいるからじゃね\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E3%81%82%E3%82%8B%E3%81%91%E3%81%A9undefined-behavior%E3%82%92%E8%B8%8F%E3%82%93%E3%81%A7%E3%81%84%E3%82%8B%E3%81%8B%E3%82%89%E3%81%98%E3%82%83%E3%81%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eいろいろあるけどundefined behaviorを踏んでいるからじゃね？\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2014/06/old-new-thing.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eOld New Thing: 未定義動作はタイムトラベルを引き起こす（他にもいろいろあるけど、タイムトラベルが一番ぶっ飛んでる） | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2015/12/blog-post_21.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eとても賢いコンパイラーの逆襲 | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eおなじみ本の虫の記事です。C++erなら当然すでに読んでいると思います。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eもっとも注目されるundefined behaviorはNULL Pointer Dereferenceです\u003c/strong\u003e(当社比)\u003c/p\u003e\n\n\u003cp\u003eここまで見てきたリンク先も口酸っぱく注意を発しています。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"undefined-behaviorとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#undefined-behavior%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eundefined behaviorとは\u003c/h1\u003e\n\n\u003cp\u003e規格上一般人には理解不能な言葉がどっさりあるので頭を整理してから読み進めることにしましょう。\u003c/p\u003e\n\n\u003cp\u003e下図は私が作ったわけではなく、C++の会のSlackで \u003ca href=\"/akinomyoga\" class=\"user-mention js-hovercard\" title=\"akinomyoga\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"akinomyoga\"\u003e@akinomyoga\u003c/a\u003e さんが作られたものです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff97aa909-61ae-aa0d-5ac0-08b2bfc8f718.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9e60f0f63ede81ec36766aaba469a74c\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff97aa909-61ae-aa0d-5ac0-08b2bfc8f718.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=9e60f0f63ede81ec36766aaba469a74c\" alt=\"Conformance levels of C++ programs v3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/f97aa909-61ae-aa0d-5ac0-08b2bfc8f718.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff97aa909-61ae-aa0d-5ac0-08b2bfc8f718.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=4d2ad49657626a946468f0dbae45323e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれの詳細についてはそのうち誰かが詳しく書いてくれるのを信じて(Advent Calendarとか)そこに丸投げします。まあまだ若干解釈に揺れがあるようですが。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e追記：\u003cbr\u003e\nなんと \u003ca href=\"/akinomyoga\" class=\"user-mention js-hovercard\" title=\"akinomyoga\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"akinomyoga\"\u003e@akinomyoga\u003c/a\u003e さんががっつり記事を書いてくれた。\u003c/p\u003e\n\n\u003cp\u003eC++er は“合法”だとか“違法”だとか言いたくて仕方がないけれど、結局どういう意味? それより適合・適格・○○動作・○○規則・診断不要いろいろの関係が謎 - Qiita\u003cbr\u003e\n\u003ca href=\"http://qiita.com/akinomyoga/items/592e5a3b8438a0c8556b\" class=\"autolink\" id=\"reference-d6037cd623f0ef782000\"\u003ehttp://qiita.com/akinomyoga/items/592e5a3b8438a0c8556b\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"もっと身近なundefined-behavior四則演算\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%82%82%E3%81%A3%E3%81%A8%E8%BA%AB%E8%BF%91%E3%81%AAundefined-behavior%E5%9B%9B%E5%89%87%E6%BC%94%E7%AE%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eもっと身近なundefined behavior=四則演算\u003c/h1\u003e\n\n\u003cp\u003eしかし、なにもNULL Pointer Dereferenceだけがundefined behaviorなわけではありません。\u003c/p\u003e\n\n\u003cp\u003e例えばこんなコードを見てみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cmath\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ethree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efive\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"The difference between three and five is \"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ethree\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003efive\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"The absolute value of that difference is \"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003ethree\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003efive\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e出力例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eThe difference between three and five is 4294967294\nThe absolute value of that difference is 4.29497e+09\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこのコードは数学的に書けば\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"math\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e|a - b|\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。しかしプログラミング言語においては、無限精度整数型でもない限り、表せる範囲が決まっているため、期待している\u003ccode\u003e2\u003c/code\u003eではなくこのような結果になってしまいます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ふふんじゃあn4318のabs_diffを使えばいいんでしょ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%B5%E3%81%B5%E3%82%93%E3%81%98%E3%82%83%E3%81%82n4318%E3%81%AEabs_diff%E3%82%92%E4%BD%BF%E3%81%88%E3%81%B0%E3%81%84%E3%81%84%E3%82%93%E3%81%A7%E3%81%97%E3%82%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eふふ～ん、じゃあN4318のabs_diffを使えばいいんでしょ？\u003c/h1\u003e\n\n\u003cp\u003eというわけで\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4318.pdf\" rel=\"nofollow noopener\" target=\"_blank\"\u003e[PDF] N4318: Proposal to add an absolute difference function to the C++ Standard Library\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eが提案されています。\u003c/p\u003e\n\n\u003cp\u003eつまり\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eN4318\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edecltype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCompare\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edecltype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eCompare\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecomp\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecomp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eCompare\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eDifference\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edecltype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eCompare\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecomp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eDifference\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ediff\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecomp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ediff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこういうラッパーです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eN4318\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;cmath\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ethree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efive\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ethree\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efive\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e出力例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e2\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eじゃあこんなコードはどうでしょう？\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;limits\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eわかりやすさのために展開してみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;limits\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれはだめですね。オーバーフローしてしまっています。これは Undefined Behaviorです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"つまり安全に差の絶対値を計算できるようにはどうすればいいのか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A4%E3%81%BE%E3%82%8A%E5%AE%89%E5%85%A8%E3%81%AB%E5%B7%AE%E3%81%AE%E7%B5%B6%E5%AF%BE%E5%80%A4%E3%82%92%E8%A8%88%E7%AE%97%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%AE%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eつまり安全に差の絶対値を計算できるようにはどうすればいいのか\u003c/h1\u003e\n\n\u003cp\u003eまず絶対条件として絶対値の差は\u003ccode\u003eunsigned\u003c/code\u003e な型であるべきです。計算結果が格納できなくなるケースが激減します。\u003c/p\u003e\n\n\u003cp\u003eで、これを実現するためのコードがこちらです。長いですがあえて載せます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;limits\u0026gt;\n#include \u0026lt;type_traits\u0026gt;\n#include \u0026lt;stdexcept\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003emath\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_two_s_complement\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eis_one_s_complement_like\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff_both_signed_can_noexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eis_two_s_complement\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eis_one_s_complement_like\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/**\n        * @param a bigger unsigned num\n        * @param b smaller signed negative num\n        */\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n            \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eutype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eulim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//prevent overflow\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//http://qiita.com/a4lg/items/bc4d2cfbce22fe749589\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//-std::numeric_limits\u0026lt;T\u0026gt;::min() \u0026lt; std::numeric_limits\u0026lt;T\u0026gt;::max() : iregal after C99\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//std::numeric_limits\u0026lt;T\u0026gt;::min() \u0026lt; -std::numeric_limits\u0026lt;T\u0026gt;::max() : most familiar behavior\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//std::numeric_limits\u0026lt;T\u0026gt;::min() = -std::numeric_limits\u0026lt;T\u0026gt;::max() : possible\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//note: 0 \u0026lt;= a, b \u0026lt; 0\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//    |\u0026lt;------------b--------------\u0026gt;|\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//lim::min()   -lim::max()          0                  a            lim::max()\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//    |             |               |                  |                |\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//----+-------------+-----.......---+------.......-----+----.......-----+-----\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//note: ``-b`` is no problem\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//lim::min()   -lim::max()          b                  0\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//    |             |               |                  |\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//----+-------------+-----.......---+------.......-----+----.......\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eulim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//can store\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//There is no possibility when ``a`` is signed number before a was passed to this fuction.\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einvalid_argument\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"cannot store result.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//note: std::numeric_limits\u0026lt;T\u0026gt;::min() \u0026lt;= b \u0026lt; -std::numeric_limits\u0026lt;T\u0026gt;::max()\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//lim::min()        b          -lim::max()             0\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//    |             |               |                  |\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//----+-------------+-----.......---+------.......-----+----.......\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n                    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eulim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//  (---------try to store rest---------)    (----------------storable max num----------------)\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eulim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)))\u003c/span\u003e\n                \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//can store\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//when processing system doesn't use two's complement and\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//std::numeric_limits\u0026lt;T\u0026gt;::min() \u0026lt; -std::numeric_limits\u0026lt;T\u0026gt;::max(),\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//or\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//a, before pass to this function, is unsigned and type of a is utype,\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//there is possibility no way to store result.\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//In that case, we throw exception.\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003einvalid_argument\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"cannot store result.\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//b \u0026lt; 0\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_signed\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff_both_signed_can_noexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ebigger_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enumeric_limits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebigger_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eutype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emake_unsigned_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ebigger_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e//a \u0026lt;= b\u003c/span\u003e\n            \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// 0 \u0026lt;= a \u0026lt;= b\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e//a \u0026lt;= b, a \u0026lt; 0\u003c/span\u003e\n                \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//a \u0026lt; 0 \u0026lt; b\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"c1\"\u003e//a \u0026lt;= b \u0026lt;= 0\u003c/span\u003e\n                    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e//-lim::max() \u0026lt;= a \u0026lt;= b \u0026lt;= -(-lim::max() - lim::min())\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                        \u003cspan class=\"c1\"\u003e// lim::min() \u0026lt;= a \u0026lt; -lim::max(), -(-lim::max() - lim::min()) \u0026lt; b \u0026lt;= 0\u003c/span\u003e\n                        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eutype\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003esigned\u003c/code\u003eと\u003ccode\u003esigned\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esigned\u003c/code\u003eと\u003ccode\u003eunsigned\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eunsigned\u003c/code\u003eと\u003ccode\u003esigned\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eunsigned\u003c/code\u003eと\u003ccode\u003eunsigned\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eの計4パターンについてそれぞれ関数をオーバーロードさせています。\u003cbr\u003e\n\u003ccode\u003esigned\u003c/code\u003eと\u003ccode\u003eunsigned\u003c/code\u003eが混ざっている2パターンと\u003cbr\u003e\n処理系が\u003ccode\u003estd::numeric_limits\u0026lt;T\u0026gt;::min() + 1 \u0026lt; -std::numeric_limits\u0026lt;T\u0026gt;::max()\u003c/code\u003eとなる場合、格納できない場合があるので例外を投げています。\u003c/p\u003e\n\n\u003cp\u003eつまり、C/C++において、安全に絶対値の差を計算するには毎度この100行超えのコードを書く必要があります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"あなた騙されていますよ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%82%E3%81%AA%E3%81%9F%E9%A8%99%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%82%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eあなた、騙されていますよ？\u003c/h1\u003e\n\n\u003cp\u003eはい、安全に絶対値の差を計算するのに100行超えのコードを書くなんて馬鹿げてます。もう一度先のコードを見てみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e両方共unsignedの時\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_unsigned\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econditional_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e)),\u003c/span\u003e \u003cspan class=\"n\"\u003eT2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eついでにN4318提案のコードも見てみましょう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eN4318\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003edecltype\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eabs_diff\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eつまり、\u003ccode\u003eunsigned\u003c/code\u003e同士での差の絶対値は容易に安全に求められるわけです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e一応100行を超えるコードを書けば安全に差の絶対値を計算することはできる\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eunsigned\u003c/code\u003e同士での差の絶対値は容易に安全に求められる\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e→ 積極的に\u003ccode\u003eunsigned\u003c/code\u003eな整数型を使おう\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eunsigned\u003c/code\u003eな整数型はいいぞ、bit演算もできるし。\u003ccode\u003esigned\u003c/code\u003eな整数型はbit演算してはいけないですからねぇ。\u003c/p\u003e\n\n\u003cp\u003eGoogleのコーディング規約は\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLength\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこういうコードが無限ループするからつかうなとか言ってますが、\u003cstrong\u003eこれに警告を出せないコンパイラを投げ捨てればいいだけで\u003c/strong\u003e、そのために\u003ccode\u003esigned\u003c/code\u003eな整数型をつかうなんで馬鹿げてます。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003esigned と unsigned を比較するときにも同じくらいひどいバグを引き起こすおそれが\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとかいうことも言ってますが、それは\u003ccode\u003esigned\u003c/code\u003e/\u003ccode\u003eunsigned\u003c/code\u003eどっちの整数型を使うか以前の問題ですからね。しかもこれまた\u003cstrong\u003eこれに警告を出せないコンパイラを投げ捨てればいいだけです\u003c/strong\u003e。Visual Studioでも\u003ccode\u003e/W4\u003c/code\u003eをつければ教えてくれます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ところでこの記事を書くにあたりお世話になった記事\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%81%93%E3%82%8D%E3%81%A7%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%AB%E3%81%82%E3%81%9F%E3%82%8A%E3%81%8A%E4%B8%96%E8%A9%B1%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E8%A8%98%E4%BA%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eところでこの記事を書くにあたりお世話になった記事\u003c/h1\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f\" id=\"reference-7547e1cc56d577afbdaf\"\u003eC++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/a4lg/items/3b92538049969715bf10\" id=\"reference-ee17d6d2554be5f003db\"\u003eC++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第2回 : 符号無し整数型のチェック)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/a4lg/items/9546ea49b8c1f98e6603\" id=\"reference-814133038e2d999a63f6\"\u003eC++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第3回 : C言語の整数の性質を知る)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/a4lg/items/68b7fab23678b5354b01\" id=\"reference-10441ef28f00c26fdb80\"\u003eC++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第4回 : 符号付き整数型のチェックと動機の動機)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/a4lg/items/bc4d2cfbce22fe749589\" id=\"reference-6e06bf62bea0bf2edc4f\"\u003eC++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第5回 : 続・符号付き整数型のチェック)\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eCoqをもちいて\u003c/strong\u003e、C/C++の整数演算が安全な条件を求め証明していくという\u003cdel\u003e頭のおかしい\u003c/del\u003e\u003cstrong\u003e素晴らしい\u003c/strong\u003e試みをしている記事があります(第6回お待ちしています！)。これのお陰でどうにか頭がこんがらがらずに一応それらしいコードを書くことができました。\u003c/p\u003e\n\n\u003cp\u003e上記の記事にもあるように、\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e整数オーバーフローは、特に C/C++ においては深刻な脆弱性の原因になりがちです。昨年界隈を騒がせた Android の Stagefright としてくくられている複数の脆弱性のうち大部分は、この整数オーバーフローが原因となっています。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e整数演算はちょっとしたことで整数オーバーフローをやらかしてしまいがちです。そしてそれらは、深刻な脆弱性の原因になったり、コンパイラが思いもよらないコードを吐く原因になります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h1\u003e\n\n\u003cp\u003eこの記事を書いている最中で \u003ca href=\"/yohhoy\" class=\"user-mention js-hovercard\" title=\"yohhoy\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yohhoy\"\u003e@yohhoy\u003c/a\u003e さんに先を越されたんですよね・・・。\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yohhoy/items/7d39b7958418f784f793\" id=\"reference-ead3ecad3ea7aeba734d\"\u003e鼻から悪魔：不定値(indeterminate value)バージョン\u003c/a\u003e\u003cbr\u003e\nC/C++においてnull安全が求められる理由の一つははnull pointer dereferenceという名のundefined behaviorをやらかすかもしれないからだけど、undefined behaviorはなにもnull pointer dereferenceだけじゃねーぞってことが書いてあるという意味で。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"資料\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%B3%87%E6%96%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e資料\u003c/h1\u003e\n\n\u003cp\u003e100行超えの上記コードは\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/math.hpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/math.hpp\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれのテストコードは\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/SigContrastFastAviUtl/blob/master/test/test.cpp#L92-L272\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/test/test.cpp#L92-L272\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記\u003c/h1\u003e\n\n\u003cp\u003e似たような話として、安全にsignedな整数とunsignedな整数を比較できない問題について、標準ライブラリでどうにかしようという提案が出ています\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0586r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eP0586R0: Safe integral comparisons\u003c/a\u003e\u003cbr\u003e\n解説: \u003ca href=\"https://cpplover.blogspot.jp/2017/11/c-p0586r0-p0649r0.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://cpplover.blogspot.jp/2017/11/c-p0586r0-p0649r0.html\u003c/a\u003e\u003c/p\u003e\n","body":"# Caution\n\n記事中で符号なし整数の演算結果が負になる場合の挙動をUBとして紹介していますが、定義された動作でした。\n\nN4318の\n\n\u003eAs can be seen, per the standard the negative result wraps around from the maximum positive value for the simple minus operation\n\nの文章ちゃんと読んで、執筆時の私・・・\n\n# はじめに\n\n\u003e最近、ツイッターを見ていると、プログラマの間でnull安全という言葉がバズっていますね。私も次のようなエントリを楽しく眺めていた訳です：\n\n\u003e\n- [null安全でない言語は、もはやレガシー言語だ](http://qiita.com/koher/items/e4835bd429b88809ab33)\n- [null安全はいいぞ。だって、型安全はいいぞ。](http://qiita.com/takasek/items/119218a2bae2f75062c0)\n- [null安全を誤解している人達へのメッセージ](http://qiita.com/omochimetaru/items/ee29d4c6eb0d78f02b15)\n\n\u003eさてそんな中、少しだけ私の心に留まったエントリがこれです：\n\n\u003e\n- [null安全な言語は、本当にゼロコストか](http://qiita.com/kazatsuyu/items/a040992c5dff7cfe6537)\n\n何ていうことが書かれている\n[コンパイラのリミッタが外れつつある今、null安全は必須なのかもしれない](http://qiita.com/AoiMoe/items/2554f78dc9c197d22109)\n記事を見かけました。確かに、null安全という言葉がバズっていますなぁ。\n\n# C/C++におけるnull安全が必要な理由はなにか\n\n\u003e[コンパイラのリミッタが外れつつある今、null安全は必須なのかもしれない](http://qiita.com/AoiMoe/items/2554f78dc9c197d22109)\n\u003eコンパイラが斜め上の最適化をするようになったからnull安全ないと怖いよね\n\nこの一言に尽きます。**が、そもそもなぜ斜め上の最適化をするのでしょうか？**\n\n\n# いろいろあるけどundefined behaviorを踏んでいるからじゃね？\n\n- [Old New Thing: 未定義動作はタイムトラベルを引き起こす（他にもいろいろあるけど、タイムトラベルが一番ぶっ飛んでる） | 本の虫](https://cpplover.blogspot.jp/2014/06/old-new-thing.html)\n- [とても賢いコンパイラーの逆襲 | 本の虫](https://cpplover.blogspot.jp/2015/12/blog-post_21.html)\n\nおなじみ本の虫の記事です。C++erなら当然すでに読んでいると思います。\n\n**もっとも注目されるundefined behaviorはNULL Pointer Dereferenceです**(当社比)\n\nここまで見てきたリンク先も口酸っぱく注意を発しています。\n\n# undefined behaviorとは\n\n規格上一般人には理解不能な言葉がどっさりあるので頭を整理してから読み進めることにしましょう。\n\n下図は私が作ったわけではなく、C++の会のSlackで @akinomyoga さんが作られたものです。\n\n![Conformance levels of C++ programs v3.png](https://qiita-image-store.s3.amazonaws.com/0/94177/f97aa909-61ae-aa0d-5ac0-08b2bfc8f718.png)\n\nこれの詳細についてはそのうち誰かが詳しく書いてくれるのを信じて(Advent Calendarとか)そこに丸投げします。まあまだ若干解釈に揺れがあるようですが。\n\n---\n\n追記：\nなんと @akinomyoga さんががっつり記事を書いてくれた。\n\nC++er は“合法”だとか“違法”だとか言いたくて仕方がないけれど、結局どういう意味? それより適合・適格・○○動作・○○規則・診断不要いろいろの関係が謎 - Qiita\nhttp://qiita.com/akinomyoga/items/592e5a3b8438a0c8556b\n\n# もっと身近なundefined behavior=四則演算\n\nしかし、なにもNULL Pointer Dereferenceだけがundefined behaviorなわけではありません。\n\n例えばこんなコードを見てみましょう。\n\n```cpp\n#include \u003ciostream\u003e\n#include \u003ccmath\u003e\nint main() {\n unsigned int three = 3;\n unsigned int five = 5;\n std::cout \u003c\u003c \"The difference between three and five is \";\n std::cout \u003c\u003c three - five \u003c\u003c std::endl;\n std::cout \u003c\u003c \"The absolute value of that difference is \";\n std::cout \u003c\u003c abs( three - five ) \u003c\u003c std::endl;\n return 0;\n}\n```\n\n```plain:出力例\nThe difference between three and five is 4294967294\nThe absolute value of that difference is 4.29497e+09\n```\n\nこのコードは数学的に書けば\n\n```math\n|a - b|\n```\n\nですね。しかしプログラミング言語においては、無限精度整数型でもない限り、表せる範囲が決まっているため、期待している``2``ではなくこのような結果になってしまいます。\n\n# ふふ～ん、じゃあN4318のabs_diffを使えばいいんでしょ？\n\nというわけで\n\n[[PDF] N4318: Proposal to add an absolute difference function to the C++ Standard Library](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4318.pdf)\n\nが提案されています。\n\n\nつまり\n\n```cpp:N4318\ntemplate \u003ctypename T\u003e\ndecltype(auto) std::abs_diff( const T\u0026 a, const T\u0026 b )\n{\n    if (a\u003cb) return b-a; return a-b;\n}\ntemplate \u003ctypename T, typename Compare\u003e\ndecltype(auto) std::abs_diff( const T\u0026 a, const T\u0026 b, const Compare\u0026 comp )\n{\n    if (comp(a,b)) return b-a; return a-b;\n}\ntemplate \u003ctypename T, typename Compare, typename Difference\u003e\ndecltype(auto) std::abs_diff( const T\u0026 a, const T\u0026 b, const Compare\u0026 comp, const Difference\u0026 diff )\n{\n    if (comp(a,b)) return diff(b,a); return diff(a,b);\n}\n```\n\nこういうラッパーです。\n\n```cpp:N4318\n#include \u003ciostream\u003e\n#include \u003ccmath\u003e\nint main() {\n unsigned int three = 3;\n unsigned int five = 5;\n std::cout \u003c\u003c std::abs_diff(three, five) \u003c\u003c std::endl;\n return 0;\n}\n```\n\n```plain:出力例\n2\n```\n\nじゃあこんなコードはどうでしょう？\n\n```cpp\n#include \u003ciostream\u003e\n#include \u003climits\u003e\nint main() {\n using lim = std::numeric_limits\u003cint\u003e;\n std::cout \u003c\u003c std::abs_diff(lim::min(), 15) \u003c\u003c std::endl;\n return 0;\n}\n```\n\nわかりやすさのために展開してみましょう。\n\n```cpp\n#include \u003ciostream\u003e\n#include \u003climits\u003e\nint main() {\n using lim = std::numeric_limits\u003cint\u003e;\n std::cout \u003c\u003c (15 - lim::min()) \u003c\u003c std::endl;\n return 0;\n}\n```\n\nこれはだめですね。オーバーフローしてしまっています。これは Undefined Behaviorです。\n\n# つまり安全に差の絶対値を計算できるようにはどうすればいいのか\n\nまず絶対条件として絶対値の差は``unsigned`` な型であるべきです。計算結果が格納できなくなるケースが激減します。\n\nで、これを実現するためのコードがこちらです。長いですがあえて載せます。\n\n\n```cpp\n#include \u003climits\u003e\n#include \u003ctype_traits\u003e\n#include \u003cstdexcept\u003e\nnamespace math {\n\tnamespace detail {\n\t\tconstexpr bool is_two_s_complement() noexcept {\n\t\t\treturn std::numeric_limits\u003cint\u003e::min() + 1 == -std::numeric_limits\u003cint\u003e::max();\n\t\t}\n\t\tconstexpr bool is_one_s_complement_like() noexcept {\n\t\t\treturn std::numeric_limits\u003cint\u003e::min() == -std::numeric_limits\u003cint\u003e::max();\n\t\t}\n\t\tconstexpr bool abs_diff_both_signed_can_noexcept() noexcept {\n\t\t\treturn is_two_s_complement() || is_one_s_complement_like();\n\t\t}\n\t\t/**\n\t\t* @param a bigger unsigned num\n\t\t* @param b smaller signed negative num\n\t\t*/\n\t\ttemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\t\t\tstd::is_unsigned\u003cT1\u003e::value \u0026\u0026 std::is_signed\u003cT2\u003e::value,\n\t\t\tstd::nullptr_t\n\t\t\u003e = nullptr\u003e\n\t\tstatic inline constexpr auto abs_diff_impl(const T1\u0026 a, const T2\u0026 b)\n\t\t\t-\u003estd::make_unsigned_t\u003cstd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e\u003e\n\t\t{\n\t\t\tusing lim = std::numeric_limits\u003cT2\u003e;\n\t\t\tusing utype = std::make_unsigned_t\u003cstd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e\u003e;\n\t\t\tusing ulim = std::numeric_limits\u003cutype\u003e;\n\t\t\t//prevent overflow\n\t\t\t//http://qiita.com/a4lg/items/bc4d2cfbce22fe749589\n\t\t\t//-std::numeric_limits\u003cT\u003e::min() \u003c std::numeric_limits\u003cT\u003e::max() : iregal after C99\n\t\t\t//std::numeric_limits\u003cT\u003e::min() \u003c -std::numeric_limits\u003cT\u003e::max() : most familiar behavior\n\t\t\t//std::numeric_limits\u003cT\u003e::min() = -std::numeric_limits\u003cT\u003e::max() : possible\n\t\t\t//note: 0 \u003c= a, b \u003c 0\n\t\t\t//    |\u003c------------b--------------\u003e|\n\t\t\t//lim::min()   -lim::max()          0                  a            lim::max()\n\t\t\t//    |             |               |                  |                |\n\t\t\t//----+-------------+-----.......---+------.......-----+----.......-----+-----\n\t\t\treturn (-lim::max() \u003c= b)\n\t\t\t\t//note: ``-b`` is no problem\n\t\t\t\t//lim::min()   -lim::max()          b                  0\n\t\t\t\t//    |             |               |                  |\n\t\t\t\t//----+-------------+-----.......---+------.......-----+----.......\n\t\t\t\t? (static_cast\u003cutype\u003e(-b) \u003c= (ulim::max() - a))\n\t\t\t\t\t//can store\n\t\t\t\t\t? static_cast\u003cutype\u003e(a) + static_cast\u003cutype\u003e(-b)\n\t\t\t\t\t//There is no possibility when ``a`` is signed number before a was passed to this fuction.\n\t\t\t\t\t: throw std::invalid_argument(\"cannot store result.\")\n\t\t\t\t//note: std::numeric_limits\u003cT\u003e::min() \u003c= b \u003c -std::numeric_limits\u003cT\u003e::max()\n\t\t\t\t//lim::min()        b          -lim::max()             0\n\t\t\t\t//    |             |               |                  |\n\t\t\t\t//----+-------------+-----.......---+------.......-----+----.......\n\t\t\t\t:\n\t\t\t\t(\n\t\t\t\t\t(static_cast\u003cutype\u003e(lim::max()) \u003c (ulim::max() - static_cast\u003cutype\u003e(a)))\n\t\t\t\t\t//  (---------try to store rest---------)    (----------------storable max num----------------)\n\t\t\t\t\t\u0026\u0026 (static_cast\u003cutype\u003e((-lim::max()) - b) \u003c= (ulim::max() - lim::max() - static_cast\u003cutype\u003e(a)))\n\t\t\t\t)\n\t\t\t\t\t//can store\n\t\t\t\t\t? static_cast\u003cutype\u003e(a) + static_cast\u003cutype\u003e(lim::max()) + static_cast\u003cutype\u003e((-lim::max()) - b)\n\t\t\t\t\t//when processing system doesn't use two's complement and\n\t\t\t\t\t//std::numeric_limits\u003cT\u003e::min() \u003c -std::numeric_limits\u003cT\u003e::max(),\n\t\t\t\t\t//or\n\t\t\t\t\t//a, before pass to this function, is unsigned and type of a is utype,\n\t\t\t\t\t//there is possibility no way to store result.\n\t\t\t\t\t//In that case, we throw exception.\n\t\t\t\t\t: throw std::invalid_argument(\"cannot store result.\");\n\t\t}\n\t}\n\ttemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\t\tstd::is_unsigned\u003cT1\u003e::value \u0026\u0026 std::is_signed\u003cT2\u003e::value,\n\t\tstd::nullptr_t\n\t\u003e = nullptr\u003e\n\tstatic inline constexpr auto abs_diff(const T1\u0026 a, const T2\u0026 b)\n\t\t-\u003estd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), std::make_unsigned_t\u003cT2\u003e, T1\u003e\n\t{\n\t\treturn (0 \u003c b \u0026\u0026 a \u003c static_cast\u003cstd::make_unsigned_t\u003cT2\u003e\u003e(b))\n\t\t\t? static_cast\u003cstd::make_unsigned_t\u003cT2\u003e\u003e(b) - a\n\t\t\t: (0 \u003c= b)\n\t\t\t\t? a - static_cast\u003cstd::make_unsigned_t\u003cT2\u003e\u003e(b)\n\t\t\t\t//b \u003c 0\n\t\t\t\t: detail::abs_diff_impl(a, b);\n\t}\n\ttemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\t\tstd::is_signed\u003cT1\u003e::value \u0026\u0026 std::is_unsigned\u003cT2\u003e::value,\n\t\tstd::nullptr_t\n\t\u003e = nullptr\u003e\n\tstatic inline constexpr auto abs_diff(const T1\u0026 a, const T2\u0026 b)\n\t\t-\u003estd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, std::make_unsigned_t\u003cT1\u003e\u003e\n\t{\n\t\treturn abs_diff(b, a);\n\t}\n\ttemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\t\tstd::is_unsigned\u003cT1\u003e::value \u0026\u0026 std::is_unsigned\u003cT2\u003e::value,\n\t\tstd::nullptr_t\n\t\u003e = nullptr\u003e\n\tstatic inline constexpr auto abs_diff(const T1\u0026 a, const T2\u0026 b) noexcept\n\t\t-\u003estd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e\n\t{\n\t\treturn (a \u003c b) ? b - a : a - b;\n\t}\n\ttemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\t\tstd::is_signed\u003cT1\u003e::value \u0026\u0026 std::is_signed\u003cT2\u003e::value,\n\t\tstd::nullptr_t\n\t\u003e = nullptr\u003e\n\tstatic inline constexpr auto abs_diff(const T1\u0026 a, const T2\u0026 b) noexcept(detail::abs_diff_both_signed_can_noexcept())\n\t\t-\u003estd::make_unsigned_t\u003cstd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e\u003e\n\t{\n\t\tusing bigger_type = std::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e;\n\t\tusing lim = std::numeric_limits\u003cbigger_type\u003e;\n\t\tusing utype = std::make_unsigned_t\u003cbigger_type\u003e;\n\t\treturn (b \u003c a)\n\t\t\t? abs_diff(b, a)\n\t\t\t//a \u003c= b\n\t\t\t: (0 \u003c= a)\n\t\t\t\t// 0 \u003c= a \u003c= b\n\t\t\t\t? abs_diff(static_cast\u003cutype\u003e(a), static_cast\u003cutype\u003e(b))\n\t\t\t\t//a \u003c= b, a \u003c 0\n\t\t\t\t: (0 \u003c b)\n\t\t\t\t\t//a \u003c 0 \u003c b\n\t\t\t\t\t? detail::abs_diff_impl(static_cast\u003cutype\u003e(b), a)\n\t\t\t\t\t//a \u003c= b \u003c= 0\n\t\t\t\t\t: (-lim::max() \u003c= a || b \u003c= -(-lim::max() - lim::min()))\n\t\t\t\t\t\t//-lim::max() \u003c= a \u003c= b \u003c= -(-lim::max() - lim::min())\n\t\t\t\t\t\t? static_cast\u003cutype\u003e(b - a)\n\t\t\t\t\t\t// lim::min() \u003c= a \u003c -lim::max(), -(-lim::max() - lim::min()) \u003c b \u003c= 0\n\t\t\t\t\t\t: static_cast\u003cutype\u003e(-(a + lim::max())) + static_cast\u003cutype\u003e(b + lim::max());\n\t}\n}\n```\n\n- ``signed``と``signed``\n- ``signed``と``unsigned``\n- ``unsigned``と``signed``\n- ``unsigned``と``unsigned``\n\nの計4パターンについてそれぞれ関数をオーバーロードさせています。\n``signed``と``unsigned``が混ざっている2パターンと\n処理系が``std::numeric_limits\u003cT\u003e::min() + 1 \u003c -std::numeric_limits\u003cT\u003e::max()``となる場合、格納できない場合があるので例外を投げています。\n\nつまり、C/C++において、安全に絶対値の差を計算するには毎度この100行超えのコードを書く必要があります。\n\n# あなた、騙されていますよ？\n\nはい、安全に絶対値の差を計算するのに100行超えのコードを書くなんて馬鹿げてます。もう一度先のコードを見てみましょう。\n\n```cpp:両方共unsignedの時\ntemplate \u003ctypename T1, typename T2, std::enable_if_t\u003c\n\tstd::is_unsigned\u003cT1\u003e::value \u0026\u0026 std::is_unsigned\u003cT2\u003e::value,\n\tstd::nullptr_t\n\u003e = nullptr\u003e\nstatic inline constexpr auto abs_diff(const T1\u0026 a, const T2\u0026 b) noexcept\n\t-\u003estd::conditional_t\u003c(sizeof(T1) \u003c sizeof(T2)), T2, T1\u003e\n{\n\treturn (a \u003c b) ? b - a : a - b;\n}\n```\n\nついでにN4318提案のコードも見てみましょう\n\n```cpp:N4318\ntemplate \u003ctypename T\u003e\ndecltype(auto) std::abs_diff( const T\u0026 a, const T\u0026 b )\n{\n    if (a\u003cb) return b-a; return a-b;\n}\n```\n\nつまり、``unsigned``同士での差の絶対値は容易に安全に求められるわけです。\n\n# 結論\n\n- 一応100行を超えるコードを書けば安全に差の絶対値を計算することはできる\n- **``unsigned``同士での差の絶対値は容易に安全に求められる**\n\n→ 積極的に``unsigned``な整数型を使おう\n\n``unsigned``な整数型はいいぞ、bit演算もできるし。``signed``な整数型はbit演算してはいけないですからねぇ。\n\nGoogleのコーディング規約は\n\n```cpp\nfor (unsigned int i = foo.Length()-1; i \u003e= 0; --i)\n```\n\nこういうコードが無限ループするからつかうなとか言ってますが、**これに警告を出せないコンパイラを投げ捨てればいいだけで**、そのために``signed``な整数型をつかうなんで馬鹿げてます。\n\n\u003esigned と unsigned を比較するときにも同じくらいひどいバグを引き起こすおそれが\n\nとかいうことも言ってますが、それは``signed``/``unsigned``どっちの整数型を使うか以前の問題ですからね。しかもこれまた**これに警告を出せないコンパイラを投げ捨てればいいだけです**。Visual Studioでも``/W4``をつければ教えてくれます。\n\n# ところでこの記事を書くにあたりお世話になった記事\n\n1. [C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第1回 : 整数型の怪と対策の不足)](http://qiita.com/a4lg/items/541c9d9dd5d874eeef2f)\n2. [C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第2回 : 符号無し整数型のチェック)](http://qiita.com/a4lg/items/3b92538049969715bf10)\n3. [C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第3回 : C言語の整数の性質を知る)](http://qiita.com/a4lg/items/9546ea49b8c1f98e6603)\n4. [C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第4回 : 符号付き整数型のチェックと動機の動機)](http://qiita.com/a4lg/items/68b7fab23678b5354b01)\n5. [C++ における整数型の怪と \"移植性のある\" オーバーフローチェッカー (第5回 : 続・符号付き整数型のチェック)](http://qiita.com/a4lg/items/bc4d2cfbce22fe749589)\n\n**Coqをもちいて**、C/C++の整数演算が安全な条件を求め証明していくという~~頭のおかしい~~**素晴らしい**試みをしている記事があります(第6回お待ちしています！)。これのお陰でどうにか頭がこんがらがらずに一応それらしいコードを書くことができました。\n\n上記の記事にもあるように、\n\n\u003e整数オーバーフローは、特に C/C++ においては深刻な脆弱性の原因になりがちです。昨年界隈を騒がせた Android の Stagefright としてくくられている複数の脆弱性のうち大部分は、この整数オーバーフローが原因となっています。\n\n整数演算はちょっとしたことで整数オーバーフローをやらかしてしまいがちです。そしてそれらは、深刻な脆弱性の原因になったり、コンパイラが思いもよらないコードを吐く原因になります。\n\n# 余談\n\nこの記事を書いている最中で @yohhoy さんに先を越されたんですよね・・・。\n[鼻から悪魔：不定値(indeterminate value)バージョン](http://qiita.com/yohhoy/items/7d39b7958418f784f793)\nC/C++においてnull安全が求められる理由の一つははnull pointer dereferenceという名のundefined behaviorをやらかすかもしれないからだけど、undefined behaviorはなにもnull pointer dereferenceだけじゃねーぞってことが書いてあるという意味で。\n\n# 資料\n\n100行超えの上記コードは\n\nhttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/SigColorFastAviUtl/math.hpp\n\nこれのテストコードは\n\nhttps://github.com/yumetodo/SigContrastFastAviUtl/blob/master/test/test.cpp#L92-L272\n\nです。\n\n# 追記\n\n似たような話として、安全にsignedな整数とunsignedな整数を比較できない問題について、標準ライブラリでどうにかしようという提案が出ています\n\n[P0586R0: Safe integral comparisons](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0586r0.html)\n解説: https://cpplover.blogspot.jp/2017/11/c-p0586r0-p0649r0.html\n","coediting":false,"comments_count":2,"created_at":"2016-11-21T18:07:16+09:00","group":null,"id":"4ea151e15b5e540cfef5","likes_count":52,"private":false,"reactions_count":0,"tags":[{"name":"C","versions":[]},{"name":"C++","versions":[]},{"name":"C++規格書リーディング","versions":[]}],"title":"C/C++はnull安全になる前に安全に差の絶対値を計算できるようになるべきではないか","updated_at":"2017-11-11T15:28:12+09:00","url":"https://qiita.com/yumetodo/items/4ea151e15b5e540cfef5","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003e普段はC++を書いています。\u003c/p\u003e\n\n\u003cp\u003eブログとかでコードをハイライトしたいとき、最近では\u003ccode\u003ehighlight.js\u003c/code\u003eとか\u003ccode\u003egoogle code prettify\u003c/code\u003eとか色々ありますが、私は未だに\u003ccode\u003eSyntaxHighlighter version 3.0.83\u003c/code\u003eを使っています。\u003c/p\u003e\n\n\u003cp\u003eというのはC++を書く上で「自分で型定義をどっさり追加できる」OR「C++を構文解析できる」が必須要件だからです。\u003c/p\u003e\n\n\u003cp\u003e後者はハードルが高すぎるので前者を満たす\u003ccode\u003eSyntaxHighlighter\u003c/code\u003e大好きです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"githubとかから動的にソースコードを読み込むにはgist-it\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#github%E3%81%A8%E3%81%8B%E3%81%8B%E3%82%89%E5%8B%95%E7%9A%84%E3%81%AB%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80%E3%81%AB%E3%81%AFgist-it\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGithubとかから動的にソースコードを読み込むには=\u0026gt;gist-it\u003c/h1\u003e\n\n\u003cp\u003eさて、今日なにかソースコードを書いたら\u003ca href=\"https://github.com/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGithub\u003c/a\u003eとか\u003ca href=\"https://gist.github.com/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eGist\u003c/a\u003eとか\u003ca href=\"http://pastebin.com/\" rel=\"nofollow noopener\" target=\"_blank\"\u003epastebin\u003c/a\u003eで公開するわけです。だれもブログにいちいちコピペなんてしません。\u003c/p\u003e\n\n\u003cp\u003eつまり動的にソースコードを読み込んでハイライトする必要があります。\u003c/p\u003e\n\n\u003cp\u003e例えばGithubのソースコードを読み込むには\u003ca href=\"http://gist-it.appspot.com/\" rel=\"nofollow noopener\" target=\"_blank\"\u003egist-it\u003c/a\u003eがありました。\u003cbr\u003e\nGistとpastebinは特に何もしないでもそのまま読み込めますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"それでも私はsyntaxhighlighterが使いたい\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E7%A7%81%E3%81%AFsyntaxhighlighter%E3%81%8C%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそれでも私はSyntaxHighlighterが使いたい\u003c/h1\u003e\n\n\u003cp\u003epastebinが何でハイライトしているか忘れましたが、Gistやgist-itは\u003ccode\u003egoogle code prettify\u003c/code\u003eを使っています。\u003c/p\u003e\n\n\u003cp\u003eでもそうやってあちこちから読み込んでいるとデザインがバラバラになってしまいますね！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"utf-8なplain-textをfetchしてsyntaxhighlighterに力技でぶち込むクラスを作る\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#utf-8%E3%81%AAplain-text%E3%82%92fetch%E3%81%97%E3%81%A6syntaxhighlighter%E3%81%AB%E5%8A%9B%E6%8A%80%E3%81%A7%E3%81%B6%E3%81%A1%E8%BE%BC%E3%82%80%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eUTF-8なplain textをfetchしてsyntaxhighlighterに力技でぶち込むクラスを作る\u003c/h1\u003e\n\n\u003cp\u003eというわけで作ります。\u003c/p\u003e\n\n\u003cp\u003e要件\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://qiita.com/tomoyukilabs/items/9b464c53450acc0b9574\" id=\"reference-5d805694bf5a8b098c3c\"\u003efetch\u003c/a\u003eしてソースコードを非同期に取ってくる\u003c/li\u003e\n\u003cli\u003eあかん文字はエスケープする\u003c/li\u003e\n\u003cli\u003eHTML中に\u003ccode\u003einnerHTML\u003c/code\u003eを使ってぶち込む\u003c/li\u003e\n\u003cli\u003e全部ぶち込み終わったら\u003ccode\u003eSyntaxHighlighter.all();\u003c/code\u003eする(頻繁にDOMの大規模更新すると重い)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eこの仕様ならUTF-8なplain textが手に入れば問答無用でぶち込めるし、少しいじれば他のハイライターでも使えそう。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"作った\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e作った\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://gist.github.com/yumetodo/15c507cabf753d6d36842fe7c87edc6b\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://gist.github.com/yumetodo/15c507cabf753d6d36842fe7c87edc6b\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eclass\u003c/code\u003e初めて書いた、\u003ccode\u003efetch\u003c/code\u003e初めて書いた、\u003ccode\u003eArrow function\u003c/code\u003e初めて書いた、\u003ccode\u003egetter/setter\u003c/code\u003e初めて書いた出遅れ勢のコードです。大目に見てください。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ethis\u003c/code\u003eを前もって束縛しなくていいの便利ですね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使い方\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使い方\u003c/h1\u003e\n\n\u003cp\u003eいつも通り\u003ccode\u003esyntaxhighlighter\u003c/code\u003eのJSとCSSを読み込んだあと、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;script \u003c/span\u003e\u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/javascript\"\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://cdn.rawgit.com/yumetodo/15c507cabf753d6d36842fe7c87edc6b/raw/2cf4c48dec052b86c0558cce5209391c4e9297aa/syntaxhighlighter_from_web.js\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"romaji2kana_h\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Source_c\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;script\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003esyntaxhighlight_manager\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003esyntaxhighlighter_from_web\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003esyntaxhighlight_manager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehttps://raw.githubusercontent.com/yumetodo/romaji2kana/master/romaji2kana/romaji2kana.h\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eromaji2kana_h\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ecpp\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eromaji2kana.h\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003esyntaxhighlight_manager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehttps://raw.githubusercontent.com/yumetodo/romaji2kana/master/romaji2kana/Source.c\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSource_c\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ecpp\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSource.c\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003esyntaxhighlight_manager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehighlight\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}());\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな風に書く。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"動作例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8B%95%E4%BD%9C%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e動作例\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"http://freesofutotravel.blog94.fc2.com/blog-entry-36.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eフリーソフトの旅（windows）Re:ある「プロ」の書いた、初心者向けc言語入門プログラム\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"書き終わって気がついたこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%9B%B8%E3%81%8D%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%A6%E6%B0%97%E3%81%8C%E3%81%A4%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e書き終わって気がついたこと\u003c/h1\u003e\n\n\u003cp\u003e\u003ccode\u003eclass\u003c/code\u003eってIE11では動かないんですね。普段FirefoxとChrome使ってたから気が付かなかった。Edgeでは動いた。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"将来\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%B0%86%E6%9D%A5\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e将来\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/syntaxhighlighter/syntaxhighlighter/issues/306\" rel=\"nofollow noopener\" target=\"_blank\"\u003eFeature Request -- option to import file contents to be highlighted. · Issue #306 · syntaxhighlighter/syntaxhighlighter\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"html\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;pre\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"brush: lisp\"\u003c/span\u003e \u003cspan class=\"na\"\u003edata-sh-content-uri=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"/home/lawlist/archives/init.el\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\nthis will be replaced and highlighted here when content is loaded..\n\u003cspan class=\"nt\"\u003e\u0026lt;/pre\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこんな感じにかけるようにする提案が出ている。\u003c/p\u003e\n","body":"# はじめに\n\n普段はC++を書いています。\n\nブログとかでコードをハイライトしたいとき、最近では``highlight.js``とか``google code prettify``とか色々ありますが、私は未だに``SyntaxHighlighter version 3.0.83``を使っています。\n\nというのはC++を書く上で「自分で型定義をどっさり追加できる」OR「C++を構文解析できる」が必須要件だからです。\n\n後者はハードルが高すぎるので前者を満たす``SyntaxHighlighter``大好きです。\n\n# Githubとかから動的にソースコードを読み込むには=\u003egist-it\n\nさて、今日なにかソースコードを書いたら[Github](https://github.com/)とか[Gist](https://gist.github.com/)とか[pastebin](http://pastebin.com/)で公開するわけです。だれもブログにいちいちコピペなんてしません。\n\nつまり動的にソースコードを読み込んでハイライトする必要があります。\n\n例えばGithubのソースコードを読み込むには[gist-it](http://gist-it.appspot.com/)がありました。\nGistとpastebinは特に何もしないでもそのまま読み込めますね。\n\n# それでも私はSyntaxHighlighterが使いたい\n\npastebinが何でハイライトしているか忘れましたが、Gistやgist-itは``google code prettify``を使っています。\n\nでもそうやってあちこちから読み込んでいるとデザインがバラバラになってしまいますね！\n\n# UTF-8なplain textをfetchしてsyntaxhighlighterに力技でぶち込むクラスを作る\n\nというわけで作ります。\n\n要件\n\n- [fetch](http://qiita.com/tomoyukilabs/items/9b464c53450acc0b9574)してソースコードを非同期に取ってくる\n- あかん文字はエスケープする\n- HTML中に``innerHTML``を使ってぶち込む\n- 全部ぶち込み終わったら``SyntaxHighlighter.all();``する(頻繁にDOMの大規模更新すると重い)\n\nこの仕様ならUTF-8なplain textが手に入れば問答無用でぶち込めるし、少しいじれば他のハイライターでも使えそう。\n\n# 作った\n\nhttps://gist.github.com/yumetodo/15c507cabf753d6d36842fe7c87edc6b\n\n``class``初めて書いた、``fetch``初めて書いた、``Arrow function ``初めて書いた、``getter/setter``初めて書いた出遅れ勢のコードです。大目に見てください。\n\n``this``を前もって束縛しなくていいの便利ですね。\n\n# 使い方\n\nいつも通り``syntaxhighlighter``のJSとCSSを読み込んだあと、\n\n```html\n\u003cscript type=\"text/javascript\" src=\"https://cdn.rawgit.com/yumetodo/15c507cabf753d6d36842fe7c87edc6b/raw/2cf4c48dec052b86c0558cce5209391c4e9297aa/syntaxhighlighter_from_web.js\"\u003e\u003c/script\u003e\n\u003cdiv id=\"romaji2kana_h\"\u003e\u003c/div\u003e\n\u003cdiv id=\"Source_c\"\u003e\u003c/div\u003e\n\u003cscript\u003e\n\t(function(){\n\t\tlet syntaxhighlight_manager = new syntaxhighlighter_from_web();\n\t\tsyntaxhighlight_manager.load(\n\t\t\t\"https://raw.githubusercontent.com/yumetodo/romaji2kana/master/romaji2kana/romaji2kana.h\",\n\t\t\t\"romaji2kana_h\", \"cpp\", \"romaji2kana.h\"\n\t\t);\n\t\tsyntaxhighlight_manager.load(\n\t\t\t\"https://raw.githubusercontent.com/yumetodo/romaji2kana/master/romaji2kana/Source.c\",\n\t\t\t\"Source_c\", \"cpp\", \"Source.c\"\n\t\t);\n\t\tsyntaxhighlight_manager.highlight();\n\t}());\n\u003c/script\u003e\n```\n\nこんな風に書く。\n\n# 動作例\n\n[フリーソフトの旅（windows）Re:ある「プロ」の書いた、初心者向けc言語入門プログラム](http://freesofutotravel.blog94.fc2.com/blog-entry-36.html)\n\n# 書き終わって気がついたこと\n\n``class``ってIE11では動かないんですね。普段FirefoxとChrome使ってたから気が付かなかった。Edgeでは動いた。\n\n# 将来\n\n[Feature Request -- option to import file contents to be highlighted. · Issue #306 · syntaxhighlighter/syntaxhighlighter](https://github.com/syntaxhighlighter/syntaxhighlighter/issues/306)\n\n```html\n\u003cpre class=\"brush: lisp\" data-sh-content-uri=\"/home/lawlist/archives/init.el\"\u003e\nthis will be replaced and highlighted here when content is loaded..\n\u003c/pre\u003e\n```\n\nこんな感じにかけるようにする提案が出ている。\n","coediting":false,"comments_count":1,"created_at":"2016-11-11T17:24:28+09:00","group":null,"id":"432653e4ee596c8d085c","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"es6","versions":[]},{"name":"SyntaxHighlighter","versions":[]},{"name":"es2015","versions":[]}],"title":"Githubとかのソースを動的に読み込むためにUTF-8なplain textをfetchしてsyntaxhighlighterに力技でぶち込む","updated_at":"2016-11-11T22:17:26+09:00","url":"https://qiita.com/yumetodo/items/432653e4ee596c8d085c","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cp\u003e正直AviUtlのプラグイン作成は詳しくないけど\u003cbr\u003e\n\u003ca href=\"https://github.com/MaverickTse/SigContrastFastAviUtl\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/MaverickTse/SigContrastFastAviUtl\u003c/a\u003e\u003cbr\u003e\nに関わってて気がついたこととしてメモしておく。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"現象\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%8F%BE%E8%B1%A1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e現象\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eプラグイン情報構造体初期化\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eFILTER_DLL\u003c/span\u003e \u003cspan class=\"n\"\u003escon_en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e               \u003cspan class=\"c1\"\u003e// English UI filter info\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  filter flags, use bitwise OR to add more\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_ALWAYS_ACTIVE       //: フィルタを常にアクティブにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_CONFIG_POPUP        //: 設定をポップアップメニューにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_CONFIG_CHECK        //: 設定をチェックボックスメニューにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_CONFIG_RADIO        //: Only one of the checkboxes can be ticked at one time.\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_EX_DATA             //: 拡張データを保存出来るようにします。\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_PRIORITY_HIGHEST    //: Make this plugin highest priority(i.e. always run before other filters)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eFILTER_FLAG_PRIORITY_LOWEST\u003c/span\u003e     \u003cspan class=\"c1\"\u003e//: Make this plugin lowest priority\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_WINDOW_THICKFRAME   //: user-draggable dialog box\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_WINDOW_SIZE         //: Custom dialogbox size (size defined in argument 2 and 3)\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_DISP_FILTER         //: 表示フィルタにします\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e|\u003c/span\u003e   \u003cspan class=\"n\"\u003eFILTER_FLAG_EX_INFORMATION\u003c/span\u003e      \u003cspan class=\"c1\"\u003e//: フィルタの拡張情報を設定できるようにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_NO_CONFIG           //: 設定ウィンドウを表示しないようにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_AUDIO_FILTER        //: オーディオフィルタにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_RADIO_BUTTON        //: チェックボックスをラジオボタンにします\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_WINDOW_HSCROLL      //: 水平スクロールバーを持つウィンドウを作ります\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_WINDOW_VSCROLL      //: 垂直スクロールバーを持つウィンドウを作ります\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_IMPORT              //: インポートメニューを作ります\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  FILTER_FLAG_EXPORT              //: エクスポートメニューを作ります\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e//  dialogbox size\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ePLUGIN_NAME_SCON\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e           \u003cspan class=\"c1\"\u003e//  Filter plugin name\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTRACK_N\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e//  トラックバーの数 (0なら名前初期値等もNULLでよい)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003een_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e//  slider label names in English\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etrack_default\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e              \u003cspan class=\"c1\"\u003e//  トラックバーの初期値郡へのポインタ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etrack_s\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etrack_e\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e           \u003cspan class=\"c1\"\u003e//  トラックバーの数値の下限上限 (NULLなら全て0～256)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eCHECK_N\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                    \u003cspan class=\"c1\"\u003e//  チェックボックスの数 (0なら名前初期値等もNULLでよい)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003echeck_name_en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e//  チェックボックスの名前郡へのポインタ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003echeck_default\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e              \u003cspan class=\"c1\"\u003e//  チェックボックスの初期値郡へのポインタ\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_proc_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                  \u003cspan class=\"c1\"\u003e//  main filter function, use NULL to skip\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_init_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                      \u003cspan class=\"c1\"\u003e//  initialization function, use NULL to skip\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_exit_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                      \u003cspan class=\"c1\"\u003e//  on-exit function, use NULL to skip\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_update_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e//  invokes when when settings changed. use NULL to skip\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_WndProc_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e//  for capturing dialog's control messages. Essential if you use button or auto uncheck some checkboxes.\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e//  Reserved. Do not use.\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e//  pointer to extra data when FILTER_FLAG_EX_DATA is set\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e//  extra data size\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eVERSION_STR_SCON\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//  pointer or c-string for full filter info when FILTER_FLAG_EX_INFORMATION is set.\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efunc_save_start_con\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                        \u003cspan class=\"c1\"\u003e//  invoke just before saving starts. NULL to skip\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e                       \u003cspan class=\"c1\"\u003e//  invoke just after saving ends. NULL to skip\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこういう構造体を作って\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e登録\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eFILTER_DLL\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epluginlist\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003escon_en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esdecon_en\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Export the above filter table\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXTERN_C\u003c/span\u003e  \u003cspan class=\"nf\"\u003e__declspec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edllexport\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eFILTER_DLL\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"n\"\u003eGetFilterTableList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epluginlist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこんな風に登録するごくごくありきたりなプログラムを書いていました。\u003c/p\u003e\n\n\u003cp\u003eところが\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F19844312%2Fd0371f1a-9f6e-11e6-92a5-af4aa01751bb.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0da04a57e53e0e7fe8b4618365ed7ecf\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F19844312%2Fd0371f1a-9f6e-11e6-92a5-af4aa01751bb.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=0da04a57e53e0e7fe8b4618365ed7ecf\" alt=\"img\" data-canonical-src=\"https://cloud.githubusercontent.com/assets/10869046/19844312/d0371f1a-9f6e-11e6-92a5-af4aa01751bb.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fcloud.githubusercontent.com%2Fassets%2F10869046%2F19844312%2Fd0371f1a-9f6e-11e6-92a5-af4aa01751bb.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=106cb720621501ceecf9b455071f71ca 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eWM_COMMAND\u003c/code\u003eが来てかつ\u003ccode\u003ewparam\u003c/code\u003eが\u003ccode\u003e50344749\u003c/code\u003eのときのプロージャーが呼ばれた直後、AviUtl内部でバグります。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"対策\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AF%BE%E7%AD%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e対策\u003c/h1\u003e\n\n\u003cp\u003eGetFilterTableListの戻り値に利用する配列は必ずNULL終端させましょう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e登録\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eFILTER_DLL\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epluginlist\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003escon_en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esdecon_en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"c1\"\u003e//NULL終端させる！\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Export the above filter table\u003c/span\u003e\n\u003cspan class=\"n\"\u003eEXTERN_C\u003c/span\u003e  \u003cspan class=\"nf\"\u003e__declspec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edllexport\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eFILTER_DLL\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"n\"\u003eGetFilterTableList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epluginlist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eつまりは単なるバッファオーバーラン。\u003c/p\u003e\n","body":"正直AviUtlのプラグイン作成は詳しくないけど\nhttps://github.com/MaverickTse/SigContrastFastAviUtl\nに関わってて気がついたこととしてメモしておく。\n\n# 現象\n\n```cpp:プラグイン情報構造体初期化\nFILTER_DLL scon_en = {               // English UI filter info\n    //\tfilter flags, use bitwise OR to add more\n    //\tFILTER_FLAG_ALWAYS_ACTIVE\t\t//: フィルタを常にアクティブにします\n    //\tFILTER_FLAG_CONFIG_POPUP\t\t//: 設定をポップアップメニューにします\n    //\tFILTER_FLAG_CONFIG_CHECK\t\t//: 設定をチェックボックスメニューにします\n    //\tFILTER_FLAG_CONFIG_RADIO\t\t//: Only one of the checkboxes can be ticked at one time.\n    //\tFILTER_FLAG_EX_DATA\t\t\t\t//: 拡張データを保存出来るようにします。\n    //\tFILTER_FLAG_PRIORITY_HIGHEST\t//: Make this plugin highest priority(i.e. always run before other filters)\n    \tFILTER_FLAG_PRIORITY_LOWEST\t\t//: Make this plugin lowest priority\n    //\tFILTER_FLAG_WINDOW_THICKFRAME\t//: user-draggable dialog box\n    //\tFILTER_FLAG_WINDOW_SIZE\t\t\t//: Custom dialogbox size (size defined in argument 2 and 3)\n    //\tFILTER_FLAG_DISP_FILTER\t\t\t//: 表示フィルタにします\n    |\tFILTER_FLAG_EX_INFORMATION\t\t//: フィルタの拡張情報を設定できるようにします\n    //\tFILTER_FLAG_NO_CONFIG\t\t\t//: 設定ウィンドウを表示しないようにします\n    //\tFILTER_FLAG_AUDIO_FILTER\t\t//: オーディオフィルタにします\n    //\tFILTER_FLAG_RADIO_BUTTON\t\t//: チェックボックスをラジオボタンにします\n    //\tFILTER_FLAG_WINDOW_HSCROLL\t\t//: 水平スクロールバーを持つウィンドウを作ります\n    //\tFILTER_FLAG_WINDOW_VSCROLL\t\t//: 垂直スクロールバーを持つウィンドウを作ります\n    //\tFILTER_FLAG_IMPORT\t\t\t\t//: インポートメニューを作ります\n    //\tFILTER_FLAG_EXPORT\t\t\t\t//: エクスポートメニューを作ります\n    ,\n    0, 0,\t\t\t\t\t\t//\tdialogbox size\n    PLUGIN_NAME_SCON,\t\t\t//\tFilter plugin name\n    TRACK_N,\t\t\t\t\t//\tトラックバーの数 (0なら名前初期値等もNULLでよい)\n    en_name,\t\t\t\t\t//\tslider label names in English\n    track_default,\t\t\t\t//\tトラックバーの初期値郡へのポインタ\n    track_s, track_e,\t\t\t//\tトラックバーの数値の下限上限 (NULLなら全て0～256)\n    CHECK_N,\t\t\t\t\t//\tチェックボックスの数 (0なら名前初期値等もNULLでよい)\n    check_name_en,\t\t\t\t\t//\tチェックボックスの名前郡へのポインタ\n    check_default,\t\t\t\t//\tチェックボックスの初期値郡へのポインタ\n    func_proc_con,\t\t\t\t\t//\tmain filter function, use NULL to skip\n    func_init_con,\t\t\t\t\t\t//\tinitialization function, use NULL to skip\n    func_exit_con,\t\t\t\t\t\t//\ton-exit function, use NULL to skip\n    func_update_con,\t\t\t\t\t\t//\tinvokes when when settings changed. use NULL to skip\n    func_WndProc_con,\t\t\t\t\t\t//\tfor capturing dialog's control messages. Essential if you use button or auto uncheck some checkboxes.\n    NULL, NULL,\t\t\t\t\t//\tReserved. Do not use.\n    NULL,\t\t\t\t\t\t//  pointer to extra data when FILTER_FLAG_EX_DATA is set\n    NULL,\t\t\t\t\t\t//  extra data size\n    VERSION_STR_SCON,\n    //  pointer or c-string for full filter info when FILTER_FLAG_EX_INFORMATION is set.\n    func_save_start_con,\t\t\t\t\t\t//\tinvoke just before saving starts. NULL to skip\n    NULL,\t\t\t\t\t\t//\tinvoke just after saving ends. NULL to skip\n};\n```\n\nこういう構造体を作って\n\n```cpp:登録\nFILTER_DLL* pluginlist[] = { \u0026scon_en, \u0026sdecon_en };\n// Export the above filter table\nEXTERN_C  __declspec(dllexport) FILTER_DLL** GetFilterTableList(void)\n{\n\t\n\treturn pluginlist;\n}\n```\n\nこんな風に登録するごくごくありきたりなプログラムを書いていました。\n\nところが\n\n![img](https://cloud.githubusercontent.com/assets/10869046/19844312/d0371f1a-9f6e-11e6-92a5-af4aa01751bb.png)\n\n``WM_COMMAND``が来てかつ``wparam``が``50344749``のときのプロージャーが呼ばれた直後、AviUtl内部でバグります。\n\n# 対策\n\nGetFilterTableListの戻り値に利用する配列は必ずNULL終端させましょう\n\n\n```cpp:登録\nFILTER_DLL* pluginlist[] = { \u0026scon_en, \u0026sdecon_en, nullptr };//NULL終端させる！\n// Export the above filter table\nEXTERN_C  __declspec(dllexport) FILTER_DLL** GetFilterTableList(void)\n{\n\t\n\treturn pluginlist;\n}\n```\n\nつまりは単なるバッファオーバーラン。\n","coediting":false,"comments_count":0,"created_at":"2016-10-31T15:38:53+09:00","group":null,"id":"4d972da03b3be788fcda","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"C","versions":[]},{"name":"C++","versions":[]},{"name":"AviUtl","versions":[]},{"name":"WM_COMMAND","versions":[]}],"title":"AviUtlプラグインを作る時GetFilterTableListの戻り値に注意せよ","updated_at":"2016-10-31T15:38:53+09:00","url":"https://qiita.com/yumetodo/items/4d972da03b3be788fcda","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eC++11では、文脈依存キーワード\u003ccode\u003efinal\u003c/code\u003eと\u003ccode\u003eoverride\u003c/code\u003eが追加されました。ここで\u003ccode\u003eoverride\u003c/code\u003eについて見てみます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e問題\u003c/h1\u003e\n\n\u003cp\u003e次の2つのコードは合法でしょうか？違法でしょうか？\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e1つ目\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//合法？違法？\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e2つ目\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//合法？違法？\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"規格書を読みつつ答えよう\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A6%8F%E6%A0%BC%E6%9B%B8%E3%82%92%E8%AA%AD%E3%81%BF%E3%81%A4%E3%81%A4%E7%AD%94%E3%81%88%E3%82%88%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e規格書を読みつつ答えよう\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"1つめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#1%E3%81%A4%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e1つめ\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e違法です\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e根拠を見てみましょう。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"103-virtual-functions-classvirtual\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#103-virtual-functions-classvirtual\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e10.3 Virtual functions [class.virtual]\u003c/h3\u003e\n\n\u003cp\u003e5 If a virtual function is marked with the virt-specifier override and does not override a member function of\u003cbr\u003e\na base class, the program is ill-formed. [ Example:\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// error: wrong signature overriding B::f\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// OK\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e—end example ]\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ccode\u003eoverride\u003c/code\u003e指定子は仮想関数につけるものです。もう一度コードを見ると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e1つ目\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//合法？違法？\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eD::f\u003c/code\u003eは仮想関数ではありません。よって\u003ccode\u003eoverride\u003c/code\u003e指定子はつけられません。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"2つめ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#2%E3%81%A4%E3%82%81\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e2つめ\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e合法です\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e根拠を見てみましょう。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"103-virtual-functions-classvirtual-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#103-virtual-functions-classvirtual-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e10.3 Virtual functions [class.virtual]\u003c/h3\u003e\n\n\u003cp\u003e2 If a virtual member function vf is declared in a class \u003ccode\u003eBase\u003c/code\u003e and in a class \u003ccode\u003eDerived\u003c/code\u003e, derived directly or indirectly from \u003ccode\u003eBase\u003c/code\u003e, a member function vf with the same name, parameter-type-list (8.3.5), cv-qualification, and ref-qualifier (or absence of same) as \u003ccode\u003eBase::vf\u003c/code\u003e is declared, then \u003ccode\u003eDerived::vf\u003c/code\u003e is also virtual (whether or not it is so declared) and it overrides \u003ccode\u003eBase::vf\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eもう一度コードを見てみましょう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e2つ目\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//合法？違法？\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eD::f\u003c/code\u003eは\u003cstrong\u003e一見仮想関数ではないように見えますが\u003c/strong\u003e、基底クラス\u003ccode\u003eB\u003c/code\u003eに\u003cstrong\u003e同じシグネチャー\u003c/strong\u003e(名前や引数とか)の仮想メンバー関数\u003ccode\u003eB::f\u003c/code\u003eがあります。\u003cstrong\u003eなので\u003ccode\u003eD::f\u003c/code\u003eは仮想関数となり\u003c/strong\u003e、同じシグネチャーなのでオーバーライドしているため、\u003ccode\u003eoverride\u003c/code\u003e指定子をつけることができます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eD\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eB\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//これは仮想関数\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ところでcpprefjpをみてみようか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A8%E3%81%93%E3%82%8D%E3%81%A7cpprefjp%E3%82%92%E3%81%BF%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eところでcpprefjpをみてみようか\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ecpprefjpの例より抜粋\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e//基底クラス\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ebase\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_final\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003efinal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_virt\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_virt_int\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_non_virt\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e//派生クラス\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ederived\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e//NG, final メンバ関数はオーバーライドできない\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_final\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e//OK, オーバーライドできている\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_virt\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e//NG, 引数の個数、型が違っており、オーバーライドできてない\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_virt_int\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eshort\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e//NG, 基底クラスの func_non_virt() は仮想関数では無いので、オーバーライドできていない\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003efunc_non_virt\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003eoverride\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eがっつり書いてあったぞい。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"経緯\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%8C%E7%B7%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e経緯\u003c/h1\u003e\n\n\u003cp\u003e最初は\u003cbr\u003e\n\u003ca href=\"http://qiita.com/knknkn1162/items/9a65ca65b558f31121f0\" class=\"autolink\" id=\"reference-cfa4a5e1327fc07fe4b1\"\u003ehttp://qiita.com/knknkn1162/items/9a65ca65b558f31121f0\u003c/a\u003e\u003cbr\u003e\nにツッコミを入れようと規格書を読んでいた。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003estruct B {\u003cbr\u003evirtual void f(int);\u003cbr\u003e};\u003cbr\u003estruct D : B {\u003cbr\u003evoid f(int) override;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evirtualついてないメンバー関数にoverride指定つけるのって合法なの？\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791647990440079364\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 基底クラスでvirtualならシグネチャーが同一の関数は暗黙的にvirtualなので合法\u003c/p\u003e— 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/791653436471123968\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u0026gt;基底クラスでvirtualならシグネチャーが同一の関数は暗黙的にvirtual\u003cbr\u003e\u003cbr\u003e(つд⊂)ｺﾞｼｺﾞｼ\u003cbr\u003e\u003cbr\u003e\u0026gt;暗黙的にvirtual\u003cbr\u003e\u003cbr\u003e・・・！？なにそれ！おどろ木ももの木さんしょの木！ \u003ca href=\"https://t.co/SM2REc7Muc\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/SM2REc7Muc\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791654350623866880\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e本当に \u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 氏は継承には弱いな \u003ca href=\"https://t.co/qT8qptPOFD\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/qT8qptPOFD\u003c/a\u003e\u003c/p\u003e— 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/791655135021641728\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e継承なんて大嫌いだーーーーー！！！！ \u003ca href=\"https://t.co/mu3tBaSQlM\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/mu3tBaSQlM\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791655643002175488\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e規格書読みに行ったら§ 10.3の1と3に本当に書いてあった。 \u003ca href=\"https://t.co/mu3tBaSQlM\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/mu3tBaSQlM\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791655747830452226\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eつーか一度見たはずのcpprefjpにもきっちり書いてあったorz\u003ca href=\"https://t.co/G4C9vag2JK\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/G4C9vag2JK\u003c/a\u003e\u003cbr\u003e注意力散漫だった \u003ca href=\"https://t.co/SM2REc7Muc\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/SM2REc7Muc\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791656561940713472\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年10月27日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eC++の会Slackにて\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eそうですね。補足すると、当然ながらデストラクタも同様です。\u003c/p\u003e\n\u003c/blockquote\u003e\n","body":"# はじめに\n\nC++11では、文脈依存キーワード``final``と``override``が追加されました。ここで``override``について見てみます。\n\n# 問題\n\n次の2つのコードは合法でしょうか？違法でしょうか？\n\n```cpp:1つ目\nstruct B {\nvoid f(int);\n};\nstruct D : B {\nvoid f(int) override;//合法？違法？\n};\n```\n\n```cpp:2つ目\nstruct B {\nvirtual void f(int);\n};\nstruct D : B {\nvoid f(int) override;//合法？違法？\n};\n```\n\n# 規格書を読みつつ答えよう\n\n## 1つめ\n\n**違法です**\n\n根拠を見てみましょう。\n\n\u003e### 10.3 Virtual functions [class.virtual]\n\u003e5 If a virtual function is marked with the virt-specifier override and does not override a member function of\na base class, the program is ill-formed. [ Example:\n\n\u003e```cpp\nstruct B {\nvirtual void f(int);\n};\nstruct D : B {\nvirtual void f(long) override; // error: wrong signature overriding B::f\nvirtual void f(int) override; // OK\n};\n\u003e```\n\u003e—end example ]\n\n``override``指定子は仮想関数につけるものです。もう一度コードを見ると\n\n```cpp:1つ目\nstruct B {\nvoid f(int);\n};\nstruct D : B {\nvoid f(int) override;//合法？違法？\n};\n```\n\n``D::f``は仮想関数ではありません。よって``override``指定子はつけられません。\n\n## 2つめ\n\n**合法です**\n\n根拠を見てみましょう。\n\n\u003e### 10.3 Virtual functions [class.virtual]\n\u003e2 If a virtual member function vf is declared in a class ``Base`` and in a class ``Derived``, derived directly or indirectly from ``Base``, a member function vf with the same name, parameter-type-list (8.3.5), cv-qualification, and ref-qualifier (or absence of same) as ``Base::vf`` is declared, then ``Derived::vf`` is also virtual (whether or not it is so declared) and it overrides ``Base::vf``\n\nもう一度コードを見てみましょう\n\n```cpp:2つ目\nstruct B {\nvirtual void f(int);\n};\nstruct D : B {\nvoid f(int) override;//合法？違法？\n};\n```\n\n``D::f``は**一見仮想関数ではないように見えますが**、基底クラス``B``に**同じシグネチャー**(名前や引数とか)の仮想メンバー関数``B::f``があります。**なので``D::f``は仮想関数となり**、同じシグネチャーなのでオーバーライドしているため、``override``指定子をつけることができます。\n\n# 結論\n\n```cpp\nstruct B {\nvirtual void f(int);\n};\nstruct D : B {\nvoid f(int) override;//これは仮想関数\n};\n```\n\n# ところでcpprefjpをみてみようか\n\n```cpp:cpprefjpの例より抜粋\n//基底クラス\nclass base {\n  virtual void func_final() final;\n  virtual void func_virt();\n  virtual void func_virt_int(int a);\n  void func_non_virt();\n};\n\n//派生クラス\nclass derived : public base {\n  //NG, final メンバ関数はオーバーライドできない\n  void func_final();\n\n  //OK, オーバーライドできている\n  void func_virt() override;\n\n  //NG, 引数の個数、型が違っており、オーバーライドできてない\n  void func_virt_int(short a) override;\n\n  //NG, 基底クラスの func_non_virt() は仮想関数では無いので、オーバーライドできていない\n  void func_non_virt() override;\n};\n```\n\nがっつり書いてあったぞい。\n\n# 経緯\n\n最初は\nhttp://qiita.com/knknkn1162/items/9a65ca65b558f31121f0\nにツッコミを入れようと規格書を読んでいた。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003estruct B {\u003cbr\u003evirtual void f(int);\u003cbr\u003e};\u003cbr\u003estruct D : B {\u003cbr\u003evoid f(int) override;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003evirtualついてないメンバー関数にoverride指定つけるのって合法なの？\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791647990440079364\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 基底クラスでvirtualならシグネチャーが同一の関数は暗黙的にvirtualなので合法\u003c/p\u003e\u0026mdash; 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/791653436471123968\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u0026gt;基底クラスでvirtualならシグネチャーが同一の関数は暗黙的にvirtual\u003cbr\u003e\u003cbr\u003e(つд⊂)ｺﾞｼｺﾞｼ\u003cbr\u003e\u003cbr\u003e\u0026gt;暗黙的にvirtual\u003cbr\u003e\u003cbr\u003e・・・！？なにそれ！おどろ木ももの木さんしょの木！ \u003ca href=\"https://t.co/SM2REc7Muc\"\u003ehttps://t.co/SM2REc7Muc\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791654350623866880\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e本当に \u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 氏は継承には弱いな \u003ca href=\"https://t.co/qT8qptPOFD\"\u003ehttps://t.co/qT8qptPOFD\u003c/a\u003e\u003c/p\u003e\u0026mdash; 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/791655135021641728\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e継承なんて大嫌いだーーーーー！！！！ \u003ca href=\"https://t.co/mu3tBaSQlM\"\u003ehttps://t.co/mu3tBaSQlM\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791655643002175488\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e規格書読みに行ったら§ 10.3の1と3に本当に書いてあった。 \u003ca href=\"https://t.co/mu3tBaSQlM\"\u003ehttps://t.co/mu3tBaSQlM\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791655747830452226\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eつーか一度見たはずのcpprefjpにもきっちり書いてあったorz\u003ca href=\"https://t.co/G4C9vag2JK\"\u003ehttps://t.co/G4C9vag2JK\u003c/a\u003e\u003cbr\u003e注意力散漫だった \u003ca href=\"https://t.co/SM2REc7Muc\"\u003ehttps://t.co/SM2REc7Muc\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/791656561940713472\"\u003e2016年10月27日\u003c/a\u003e\u003c/blockquote\u003e\n\nC++の会Slackにて\n\n\u003eそうですね。補足すると、当然ながらデストラクタも同様です。\n","coediting":false,"comments_count":0,"created_at":"2016-10-28T01:03:25+09:00","group":null,"id":"f3ceb1a64a1540f85568","likes_count":12,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]}],"title":"そのoverride指定は合法ですか？違法ですか？","updated_at":"2016-10-31T02:50:47+09:00","url":"https://qiita.com/yumetodo/items/f3ceb1a64a1540f85568","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=731517341761821e0bd941badf4e35b2\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=731517341761821e0bd941badf4e35b2\" alt=\"https://qiita-image-store.s3.amazonaws.com/0/94177/bad14252-5d04-b289-a3c3-8de401452c91.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f4238dc2a0bb29824efd6a42e3e6080e 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f5c67e49ee41c02e30b638f203f48365\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f5c67e49ee41c02e30b638f203f48365\" alt=\"https://qiita-image-store.s3.amazonaws.com/0/94177/d0cf1077-71ed-51ed-b8b0-c114eb6afe90.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=b76fdf443e7dab3b0b79427575d6933b 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fd527307f-92fa-d4de-e5f2-06afc1eea59e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7987db6658b8ec8bc5a610665047fde1\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fd527307f-92fa-d4de-e5f2-06afc1eea59e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=7987db6658b8ec8bc5a610665047fde1\" alt=\"https://qiita-image-store.s3.amazonaws.com/0/94177/af75d6ef-1c6d-70f8-1d00-e77932af499d.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/d527307f-92fa-d4de-e5f2-06afc1eea59e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fd527307f-92fa-d4de-e5f2-06afc1eea59e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=8f96215c7775570efc6d3ceec1c2bc73 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F659619e8-fea6-a9bd-db28-5bf569227a2c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8590c445d038e90997b378f362eac489\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F659619e8-fea6-a9bd-db28-5bf569227a2c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8590c445d038e90997b378f362eac489\" alt=\"https://qiita-image-store.s3.amazonaws.com/0/94177/64174025-1492-17f2-9fa2-15087830ed08.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/659619e8-fea6-a9bd-db28-5bf569227a2c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F659619e8-fea6-a9bd-db28-5bf569227a2c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=f1df73e9e84c491bbc6197c16df29d87 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eはい、雑コラすみません。きっと\u003cbr\u003e\n\u003ca href=\"http://qiita.com/endam/items/c77396705e2a158f1952\" id=\"reference-bf140d7d7bce9c3e97f3\"\u003e君の名は・・YARN！\u003c/a\u003e\u003cbr\u003e\nなんてものを見たせいです(責任転嫁)。\u003c/p\u003e\n\n\u003cp\u003eまだ映画上映していますから見に行きましょう。原作小説も絶賛発売中なので\u003cstrong\u003e買いましょう\u003c/strong\u003e(宣伝は基本)。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.kiminona.com/index.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e映画『君の名は。』公式サイト\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"recのscoped-enumで関数のフラグ指定をしたい\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#rec%E3%81%AEscoped-enum%E3%81%A7%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%95%E3%83%A9%E3%82%B0%E6%8C%87%E5%AE%9A%E3%82%92%E3%81%97%E3%81%9F%E3%81%84\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eRe:C++のscoped enumで関数のフラグ指定をしたい\u003c/h1\u003e\n\n\u003cp\u003e改めましてみなさま、ナマステ。この記事は\u003cbr\u003e\n\u003ca href=\"http://qiita.com/prickle/items/c4de8cc23556c6a3d93b\" id=\"reference-36a529c7ef1c4813956b\"\u003eC++のscoped enumで関数のフラグ指定をしたい\u003c/a\u003e\u003cbr\u003e\nへの返信記事です。\u003cbr\u003e\n同時に\u003cbr\u003e\n\u003ca href=\"http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef\" id=\"reference-2c32fb2eeb62b368068f\"\u003eRe2: C++のscoped enumで関数のフラグ指定をしたい \u0026amp; 君の名は・・・enum class\u003c/a\u003e\u003cbr\u003e\nから返信されています。\u003c/p\u003e\n\n\u003cp\u003e見てわかるように、「君の名は。」と「Re:ゼロから始める異世界生活」とC++の加重平均をとったような記事です。\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eなんか自分で作りたくなる人がいるようで2つほどこの記事が参照されています(が圧倒的akinomyoga氏の記事の影響力。そんなに異なるenum class同士の演算を定義したいか？)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/LNSEAB/items/6d92635b17b65be2ca64#_reference-7328c523e59b347df26c\" id=\"reference-d8c37eec297a5de697ce\"\u003e自分なりのscoped enumビットフラグヘルパー\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://qiita.com/leico/items/d137399e9b926678af44#_reference-823dcd50b29ea2b5a67d\" id=\"reference-503f83d18ff289f9d8eb\"\u003eenum class 同士の計算を僕も実装してみた\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"注意\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B3%A8%E6%84%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e注意\u003c/h2\u003e\n\n\u003cp\u003eこの記事はSFINAEについてそこはかとなく理解していることが求められます。これを満たさない人は先に各自ググってから読み進んでください。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"そもそもフラグ定数とは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%83%95%E3%83%A9%E3%82%B0%E5%AE%9A%E6%95%B0%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそもそもフラグ定数とは\u003c/h2\u003e\n\n\u003cp\u003e例えばWin32APIでレジストリの値を読み取るとき、\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eHKEY\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTCHAR\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esub_key_root\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_T\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Software\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003eMicrosoft\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003eWindows\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003eCurrentVersion\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003eExplorer\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s\"\u003eUser Shell Folders\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eERROR_SUCCESS\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eRegOpenKeyEx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHKEY_CURRENT_USER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esub_key_root\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eKEY_READ\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eKEY_WOW64_64KEY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"error\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003edwType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eREG_SZ\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003edwByte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eERROR_SUCCESS\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eRegQueryValueEx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_T\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Personal\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edwType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edwByte\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003eREG_SZ\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003edwType\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"error\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ebasic_string\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTCHAR\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edwByte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eRegQueryValueEx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_T\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Personal\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLPBYTE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edwByte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003echar_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eTCAHR\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ec_str\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eKEY_READ | KEY_WOW64\u003c/code\u003eみたいに指定するわけですが、これがいわゆるフラグ定数ですね。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"cなのにマクロをつかうの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E3%81%AA%E3%81%AE%E3%81%AB%E3%83%9E%E3%82%AF%E3%83%AD%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++なのにマクロをつかうの？\u003c/h2\u003e\n\n\u003cp\u003eというわけで、これまでC++ではフラグ用のクラスを作ってそこにstatic const定数を作ってきました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eVS2013のios_baseの実装\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_Dummy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_Iosb\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// define templatized bitmask/enumerated types, instantiate on demand\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// constants for stream states\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Statmask\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x17\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e \u003cspan class=\"n\"\u003egoodbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e \u003cspan class=\"n\"\u003eeofbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e \u003cspan class=\"n\"\u003efailbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e \u003cspan class=\"n\"\u003ebadbit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e \u003cspan class=\"n\"\u003e_Hardfail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n \u003cspan class=\"cp\"\u003e#define _BITMASK(Enum, Ty) typedef int Ty\n\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_CRTIMP2_PURE\u003c/span\u003e \u003cspan class=\"n\"\u003eios_base\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003e_Iosb\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// base class for ios\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_BITMASK\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Iostate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiostate\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eちなみにC++11では\u003ccode\u003estatic constexpr\u003c/code\u003eにするようになっています。\u003cbr\u003e\n\u003ca href=\"http://en.cppreference.com/w/cpp/io/ios_base/iostate\" rel=\"nofollow noopener\" target=\"_blank\"\u003estd::ios_base::iostate - cppreference.com\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"static-const式の問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#static-const%E5%BC%8F%E3%81%AE%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estatic const式の問題\u003c/h2\u003e\n\n\u003cp\u003eフラグの型がintとかの整数型になってしまうのでフラグ同士混ぜられる\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OKおおっと！？\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OKおおっと！？\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag2::b);//NG:no matching function for call to 'g'\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag1::a | Flag1::b);//NGおおっと！？:no known conversion from 'int' to 'Flag1::type' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag1::a | Flag2::b);//NG:no known conversion from 'int' to 'Flag1::type' for 1st argument\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/L3IKKsKuToOsT5re\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/L3IKKsKuToOsT5re\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"c11にはenum-classがある\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c11%E3%81%AB%E3%81%AFenum-class%E3%81%8C%E3%81%82%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eC++11にはenum classがある\u003c/h2\u003e\n\n\u003cp\u003eそこで\u003ccode\u003eenum class\u003c/code\u003eの出番です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag2\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a | Flag1::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag1')\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag1::a | Flag1::b);//NGおおっと！？:invalid operands to binary expression ('Flag1' and 'Flag1')\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/JDSzJ4So6ZH09Bpz\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/JDSzJ4So6ZH09Bpz\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eenum class\u003c/code\u003eは基底型に暗黙変換できませんし、同じ基底型のべつの\u003ccode\u003eenum class\u003c/code\u003eからの変換ももちろんできません。\u003c/p\u003e\n\n\u003cp\u003eしかしこれでは同じ\u003ccode\u003eenum class\u003c/code\u003e同士のOR演算もできません。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"operator-overloadしよう\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#operator-overload%E3%81%97%E3%82%88%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eoperator overloadしよう\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag2\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a | Flag1::b);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/MoXC6w73gQNgxUgu\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/MoXC6w73gQNgxUgu\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"機械的にoperator-overloadを書くなんてあなた怠惰ですね\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%A9%9F%E6%A2%B0%E7%9A%84%E3%81%ABoperator-overload%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%AA%E3%82%93%E3%81%A6%E3%81%82%E3%81%AA%E3%81%9F%E6%80%A0%E6%83%B0%E3%81%A7%E3%81%99%E3%81%AD\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e機械的にoperator overloadを書くなんて\u003ca href=\"http://dic.nicovideo.jp/a/%E3%83%9A%E3%83%86%E3%83%AB%E3%82%AE%E3%82%A6%E3%82%B9%E3%83%BB%E3%83%AD%E3%83%9E%E3%83%8D%E3%82%B3%E3%83%B3%E3%83%86%E3%82%A3\" rel=\"nofollow noopener\" target=\"_blank\"\u003eあなた、怠惰ですね～。\u003c/a\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eこの方法の問題点は、各\u003ccode\u003eenum class\u003c/code\u003eごとにoperator overloadしないといけない点です。\u003cbr\u003e\nしかもOR演算だけでなくて、\u003ccode\u003e\u0026amp; \u0026amp;= |=\u003c/code\u003eぐらい、場合によっては\u003ccode\u003e~ ^ ^=\u003c/code\u003eも使えてほしいと思うので、\u003ccode\u003e7*[enum classの個数]\u003c/code\u003e分のoperator overloadを書く羽目に・・・。\u003cbr\u003e\n\u003cstrong\u003e絶対イヤだ\u003c/strong\u003e。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"そこでconcept的なoperator-overloadですよ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%81%93%E3%81%A7concept%E7%9A%84%E3%81%AAoperator-overload%E3%81%A7%E3%81%99%E3%82%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそこでconcept的なoperator overloadですよ\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"まずはconceptもどきをでっち上げる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AFconcept%E3%82%82%E3%81%A9%E3%81%8D%E3%82%92%E3%81%A7%E3%81%A3%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまずはconceptもどきをでっち上げる\u003c/h3\u003e\n\n\u003cp\u003eこれが肝です。それぞれの\u003ccode\u003eenum class\u003c/code\u003eが持つ性質というかインターフェースというかこの場合もっと言ってしまえば「どんなoperatorが使えるのか」を宣言するものと言う意味で私はconceptと言っています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;type_traits\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efalse_type\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003ehas_and_or_operators\u003c/code\u003eが\u003ccode\u003ehas_bitwise_operators\u003c/code\u003eを継承しているのは、AND/OR演算がその他Bit演算に含まれるので、\u003ccode\u003ehas_bitwise_operators\u003c/code\u003eを満たす\u003ccode\u003eenum class\u003c/code\u003eは当然\u003ccode\u003ehas_and_or_operators\u003c/code\u003eを満たしますね。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"いつものあれを書く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%84%E3%81%A4%E3%82%82%E3%81%AE%E3%81%82%E3%82%8C%E3%82%92%E6%9B%B8%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eいつものあれを書く\u003c/h3\u003e\n\n\u003cp\u003eいつものあれ、で通じる人どのくらいいるんだろうか。\u003cbr\u003e\n\u003ca href=\"http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462\" id=\"reference-d877b981f5ddbfc6673f\"\u003estd::enable_ifを使ってオーバーロードする時、enablerを使う？\u003c/a\u003e\u003cbr\u003e\nこれです。次の項でSFINAEするのに使います\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003econ\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eenable_if\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003econ\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enullptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eunderlying_type_t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_type\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//C++11にはない\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"sfinaeしつつoperator-overloadを書く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#sfinae%E3%81%97%E3%81%A4%E3%81%A4operator-overload%E3%82%92%E6%9B%B8%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSFINAEしつつoperator overloadを書く\u003c/h3\u003e\n\n\u003cp\u003eあんま解説することもないけど一応。\u003cbr\u003e\nまず、\u003ccode\u003eenum\u003c/code\u003eにしろ\u003ccode\u003eenum class\u003c/code\u003eにしろ、基底型というものが存在します。\u003ccode\u003eenum class\u003c/code\u003eは基底型に明示変換できます。基底型は整数型なので、これからorverload しようとしているoperatorはすでに持っています。基底型は\u003ccode\u003estd::underlying_type\u003c/code\u003eで取得できます\u003c/p\u003e\n\n\u003cp\u003eよって各operator overloadの実装戦略としては\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e引数を基底型に\u003ccode\u003estatic_cast\u003c/code\u003eする\u003c/li\u003e\n\u003cli\u003e演算する\u003c/li\u003e\n\u003cli\u003eもとの型に\u003ccode\u003estatic_cast\u003c/code\u003eする\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eと言うものになります。\u003c/p\u003e\n\n\u003cp\u003eただ\u003ccode\u003estatic_cast\u0026lt;underlying_type_t\u0026lt;T\u0026gt;\u0026gt;\u003c/code\u003eと書くのはだるい\u0026amp;可読性下がる\u0026amp;typoしやすくなると、３拍子揃ってやるべきではないので、\u003ccode\u003eunderlying_cast\u003c/code\u003eというのをでっち上げています。\u003ca href=\"http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef#33-peel\" id=\"reference-2c32fb2eeb62b368068f\"\u003e積極的に怠けていこうな！\u003c/a\u003e。まあ\u003ccode\u003estd::underlying_type\u003c/code\u003eのtemplate第一引数にenumじゃない型を渡せないからSFINAEしておきたい、という話もありますが。C++が\u003ca href=\"https://cpplover.blogspot.jp/2016/03/c-p0174r0-p0189r0.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eどんな問題でももう一段階のラッパーをかますことで解決できる。ただし、ラッパーが多すぎるという問題を除いては。\u003c/a\u003eという言語だとよくわかりますね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eis_enum\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eunderlying_type_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_type_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e|=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e^\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etype_traits\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003econcept_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;::\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eunderlying_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e));}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"対象となるenum-classを定義\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%AA%E3%82%8Benum-class%E3%82%92%E5%AE%9A%E7%BE%A9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e対象となるenum classを定義\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eFlag2\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"conceptもどきのクラスのtemplate特殊化を書く\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#concept%E3%82%82%E3%81%A9%E3%81%8D%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AEtemplate%E7%89%B9%E6%AE%8A%E5%8C%96%E3%82%92%E6%9B%B8%E3%81%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003econceptもどきのクラスのtemplate特殊化を書く\u003c/h3\u003e\n\n\u003cp\u003e今回は\u003ccode\u003eFlag1\u003c/code\u003eは\u003ccode\u003e\u0026amp; \u0026amp;= | |= ^ ^= ~\u003c/code\u003e、\u003ccode\u003eFlag2\u003c/code\u003eは\u003ccode\u003e\u0026amp; \u0026amp;= | |=\u003c/code\u003eの演算ができるようにしてみます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003eenum_concept\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_bitwise_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003etrue_type\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ehas_and_or_operators\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003etrue_type\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eさきほど、\u003ccode\u003ehas_bitwise_operators\u003c/code\u003eや\u003ccode\u003ehas_and_or_operators\u003c/code\u003eはoperator overloadのSFINAEの条件に使っていました。ここで許可するtemplate特殊化を書くことでoperator overloadが有効になりますね。元記事の \u003ca href=\"/akinomyoga\" class=\"user-mention js-hovercard\" title=\"akinomyoga\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"akinomyoga\"\u003e@akinomyoga\u003c/a\u003e さんのコメントに書かれたコードではunderlying_type との演算や他のenum classとの演算を有効にする手段も提供していますが、一体どうやったらそんなものが必要なのか理解できないので(それくらいキャスト書け)今回は省略しています。\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"使ってみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使ってみる\u003c/h3\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"p\"\u003e){}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag1\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eFlag2\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(Flag2::a ^ Flag2::b);//invalid operands to binary expression ('Flag2' and 'Flag2')\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//g(~Flag2::a);//invalid argument type 'Flag2' to unary expression\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/A6XI2lDkeXfHQrJ8\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/A6XI2lDkeXfHQrJ8\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n\u003cspan id=\"注意点\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e注意点\u003c/h3\u003e\n\n\u003cp\u003e今回はC++11の範囲で書きましたが、代入もする演算子はC++14じゃないとconstexprにできません。なおVisual Studio 2013ではconstexprは使えませんが、上のコードからconstexprを置換して取り除けば多分動くと思います。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"得られたもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BE%97%E3%82%89%E3%82%8C%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e得られたもの\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eフラグ指定する時の凡ミスが減らせるようになった\u003c/li\u003e\n\u003cli\u003eenum classに希望が持てた\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"失ったもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%A4%B1%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e失ったもの\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eこの記事を読むのに費やした時間\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"それにしても\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%9D%E3%82%8C%E3%81%AB%E3%81%97%E3%81%A6%E3%82%82\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eそれにしても\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003econceptがない世界はいややー！来世はconceptがある世界に産まれさせてくださーい！\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eC++11のconceptとC++17に提案されていたconceptについては\u003cbr\u003e\n\u003ca href=\"http://ezoeryou.github.io/boost-benkyokai-oosaka-16/#/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e帰ってきたコンセプト | Boost勉強会 #16 大阪\u003c/a\u003e\u003cbr\u003e\nを見てください。まあC++17にconceptが入らないことが確定したけどな！\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"余談\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%99%E8%AB%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e余談\u003c/h2\u003e\n\n\u003cp\u003e凄まじくどうでもいい話ですが、冒頭の雑コラ、最初3枚はシーン的には映画最後のシーンで(三葉と瀧がタイムスリップしてる絵だけど)、2021年12月という設定らしいのでC++17とC++20は出てますね。C++23に向けて標準化委員会にまたconceptとかが提案されていることでしょう。\u003cbr\u003e\n4枚目は2013年9月ごろのはずなので、C++11にconceptが入らないことになり間もなくC++14がでるけどやっぱりなんでconceptないんや！という時期ですね。C++17に提案されていてまたもrejectを喰らったConcept Liteの作業が始まったのが\u003ca href=\"https://github.com/cplusplus/concepts-ts/commit/e0b420cefa63bc0fdf03dbe01dd189ee9c4ab64f\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2014/2/17らしいので\u003c/a\u003eまだ三葉は再提案の話は知らないはずですね。\u003c/p\u003e\n\n\u003cp\u003ecf.)\u003cbr\u003e\n\u003ca href=\"http://france-chebunbun.com/2016/08/29/post-7566/2/\" rel=\"nofollow noopener\" target=\"_blank\"\u003e【ネタバレ解説】｢君の名は。｣読者と共に読解入れ替わり時系列、図解で解説!｢転校生｣どころじゃなかった…チェ・ブンブンのティーマ - Part 2\u003c/a\u003e\u003c/p\u003e\n","body":"![https://qiita-image-store.s3.amazonaws.com/0/94177/bad14252-5d04-b289-a3c3-8de401452c91.png](https://qiita-image-store.s3.amazonaws.com/0/94177/7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/d0cf1077-71ed-51ed-b8b0-c114eb6afe90.png](https://qiita-image-store.s3.amazonaws.com/0/94177/8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/af75d6ef-1c6d-70f8-1d00-e77932af499d.png](https://qiita-image-store.s3.amazonaws.com/0/94177/d527307f-92fa-d4de-e5f2-06afc1eea59e.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/64174025-1492-17f2-9fa2-15087830ed08.png](https://qiita-image-store.s3.amazonaws.com/0/94177/659619e8-fea6-a9bd-db28-5bf569227a2c.png)\n\nはい、雑コラすみません。きっと\n[君の名は・・YARN！](http://qiita.com/endam/items/c77396705e2a158f1952)\nなんてものを見たせいです(責任転嫁)。\n\nまだ映画上映していますから見に行きましょう。原作小説も絶賛発売中なので**買いましょう**(宣伝は基本)。\n\n[映画『君の名は。』公式サイト](http://www.kiminona.com/index.html)\n\n# Re:C++のscoped enumで関数のフラグ指定をしたい\n\n改めましてみなさま、ナマステ。この記事は\n[C++のscoped enumで関数のフラグ指定をしたい](http://qiita.com/prickle/items/c4de8cc23556c6a3d93b)\nへの返信記事です。\n同時に\n[Re2: C++のscoped enumで関数のフラグ指定をしたい \u0026 君の名は・・・enum class](http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef)\nから返信されています。\n\n見てわかるように、「君の名は。」と「Re:ゼロから始める異世界生活」とC++の加重平均をとったような記事です。\n\n---\n\nなんか自分で作りたくなる人がいるようで2つほどこの記事が参照されています(が圧倒的akinomyoga氏の記事の影響力。そんなに異なるenum class同士の演算を定義したいか？)\n\n- [自分なりのscoped enumビットフラグヘルパー](https://qiita.com/LNSEAB/items/6d92635b17b65be2ca64#_reference-7328c523e59b347df26c)\n- [enum class 同士の計算を僕も実装してみた](https://qiita.com/leico/items/d137399e9b926678af44#_reference-823dcd50b29ea2b5a67d)\n\n## 注意\n\nこの記事はSFINAEについてそこはかとなく理解していることが求められます。これを満たさない人は先に各自ググってから読み進んでください。\n\n## そもそもフラグ定数とは\n\n例えばWin32APIでレジストリの値を読み取るとき、\n\n```cpp\nHKEY key\nconst TCHAR* sub_key_root = _T(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders\")\nif (ERROR_SUCCESS != RegOpenKeyEx(HKEY_CURRENT_USER, sub_key_root, 0, KEY_READ | KEY_WOW64_64KEY, \u0026key))\n\tthrow std::runtime_error(\"error\");\nDWORD dwType = REG_SZ;\nDWORD dwByte = 32;\nif (ERROR_SUCCESS != RegQueryValueEx(key, _T(\"Personal\"), 0, \u0026dwType, nullptr, \u0026dwByte) || REG_SZ != dwType)\n\tthrow std::runtime_error(\"error\");\nstd::basic_string\u003cTCHAR\u003e buf;\nbuf.resize(dwByte);\nRegQueryValueEx(key, _T(\"Personal\"), 0, nullptr, (LPBYTE)\u0026buf[0], \u0026dwByte);\nbuf.resize(std::char_traits\u003cTCAHR\u003e::length(buf.c_str()));\n```\n\n``KEY_READ | KEY_WOW64``みたいに指定するわけですが、これがいわゆるフラグ定数ですね。\n\n## C++なのにマクロをつかうの？\n\nというわけで、これまでC++ではフラグ用のクラスを作ってそこにstatic const定数を作ってきました。\n\n```cpp:VS2013のios_baseの実装\ntemplate\u003cclass _Dummy\u003e\n\tclass _Iosb\n\t{\t// define templatized bitmask/enumerated types, instantiate on demand\npublic:\n\tenum _Iostate\n\t\t{\t// constants for stream states\n\t\t_Statmask = 0x17};\n\n\tstatic const _Iostate goodbit = (_Iostate)0x0;\n\tstatic const _Iostate eofbit = (_Iostate)0x1;\n\tstatic const _Iostate failbit = (_Iostate)0x2;\n\tstatic const _Iostate badbit = (_Iostate)0x4;\n\tstatic const _Iostate _Hardfail = (_Iostate)0x10;\n};\n #define _BITMASK(Enum, Ty)\ttypedef int Ty\n class _CRTIMP2_PURE ios_base\n\t: public _Iosb\u003cint\u003e\n\t{\t// base class for ios\npublic:\n\t_BITMASK(_Iostate, iostate);\n}:\n```\n\nちなみにC++11では``static constexpr``にするようになっています。\n[std::ios_base::iostate - cppreference.com](http://en.cppreference.com/w/cpp/io/ios_base/iostate)\n\n## static const式の問題\n\nフラグの型がintとかの整数型になってしまうのでフラグ同士混ぜられる\n\n```cpp\nstruct Flag1{\n    enum type {};\n    static constexpr type a = (type)1;\n    static constexpr type b = (type)2;\n};\nstruct Flag2{\n    enum type {};\n    static constexpr type a = (type)4;\n    static constexpr type b = (type)8;\n};\n\nvoid f(int){}\nvoid g(Flag1::type){}\nint main()\n{\n    f(Flag1::a);//OK\n    f(Flag2::b);//OKおおっと！？\n    f(Flag1::a | Flag1::b);//OK\n    f(Flag1::a | Flag2::b);//OKおおっと！？\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no matching function for call to 'g'\n    //g(Flag1::a | Flag1::b);//NGおおっと！？:no known conversion from 'int' to 'Flag1::type' for 1st argument\n    //g(Flag1::a | Flag2::b);//NG:no known conversion from 'int' to 'Flag1::type' for 1st argument\n}\n```\n\nhttp://melpon.org/wandbox/permlink/L3IKKsKuToOsT5re\n\n## C++11にはenum classがある\n\nそこで``enum class``の出番です。\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    //g(Flag1::a | Flag1::b);//NGおおっと！？:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n```\n\nhttp://melpon.org/wandbox/permlink/JDSzJ4So6ZH09Bpz\n\n``enum class``は基底型に暗黙変換できませんし、同じ基底型のべつの``enum class``からの変換ももちろんできません。\n\nしかしこれでは同じ``enum class``同士のOR演算もできません。\n\n## operator overloadしよう\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nconstexpr Flag1 operator|(Flag1 l, Flag1 r){\n    return static_cast\u003cFlag1\u003e(static_cast\u003cint\u003e(l) | static_cast\u003cint\u003e(r));\n}\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    g(Flag1::a | Flag1::b);//OK\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n```\n\nhttp://melpon.org/wandbox/permlink/MoXC6w73gQNgxUgu\n\n## 機械的にoperator overloadを書くなんて[あなた、怠惰ですね～。](http://dic.nicovideo.jp/a/%E3%83%9A%E3%83%86%E3%83%AB%E3%82%AE%E3%82%A6%E3%82%B9%E3%83%BB%E3%83%AD%E3%83%9E%E3%83%8D%E3%82%B3%E3%83%B3%E3%83%86%E3%82%A3)\n\nこの方法の問題点は、各``enum class``ごとにoperator overloadしないといけない点です。\nしかもOR演算だけでなくて、``\u0026 \u0026= |=``ぐらい、場合によっては``~ ^ ^=``も使えてほしいと思うので、``7*[enum classの個数]``分のoperator overloadを書く羽目に・・・。\n**絶対イヤだ**。\n\n## そこでconcept的なoperator overloadですよ\n\n### まずはconceptもどきをでっち上げる\n\nこれが肝です。それぞれの``enum class``が持つ性質というかインターフェースというかこの場合もっと言ってしまえば「どんなoperatorが使えるのか」を宣言するものと言う意味で私はconceptと言っています。\n\n```cpp\n#include \u003ctype_traits\u003e\nnamespace enum_concept{\n    template\u003ctypename T\u003e\n    struct has_bitwise_operators : std::false_type {};\n    template\u003ctypename T\u003e\n    struct has_and_or_operators : has_bitwise_operators\u003cT\u003e {};\n}\n```\n\n``has_and_or_operators ``が``has_bitwise_operators``を継承しているのは、AND/OR演算がその他Bit演算に含まれるので、``has_bitwise_operators``を満たす``enum class``は当然``has_and_or_operators``を満たしますね。\n\n### いつものあれを書く\n\nいつものあれ、で通じる人どのくらいいるんだろうか。\n[std::enable_ifを使ってオーバーロードする時、enablerを使う？](http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462)\nこれです。次の項でSFINAEするのに使います\n\n```cpp\nnamespace type_traits{\n    template\u003cbool con\u003e using concept_t = typename std::enable_if\u003ccon, std::nullptr_t\u003e::type;\n    template\u003ctypename T\u003e using underlying_type_t = typename std::underlying_type\u003cT\u003e::type;//C++11にはない\n}\n```\n\n### SFINAEしつつoperator overloadを書く\n\nあんま解説することもないけど一応。\nまず、``enum``にしろ``enum class``にしろ、基底型というものが存在します。``enum class``は基底型に明示変換できます。基底型は整数型なので、これからorverload しようとしているoperatorはすでに持っています。基底型は``std::underlying_type``で取得できます\n\nよって各operator overloadの実装戦略としては\n\n1. 引数を基底型に``static_cast``する\n2. 演算する\n3. もとの型に``static_cast``する\n\nと言うものになります。\n\nただ``static_cast\u003cunderlying_type_t\u003cT\u003e\u003e``と書くのはだるい\u0026可読性下がる\u0026typoしやすくなると、３拍子揃ってやるべきではないので、``underlying_cast``というのをでっち上げています。[積極的に怠けていこうな！](http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef#33-peel)。まあ``std::underlying_type``のtemplate第一引数にenumじゃない型を渡せないからSFINAEしておきたい、という話もありますが。C++が[どんな問題でももう一段階のラッパーをかますことで解決できる。ただし、ラッパーが多すぎるという問題を除いては。](https://cpplover.blogspot.jp/2016/03/c-p0174r0-p0189r0.html)という言語だとよくわかりますね。\n\n```cpp\nnamespace detail{\n    using namespace type_traits;\n    template\u003ctypename T, concept_t\u003cstd::is_enum\u003cT\u003e::value\u003e = nullptr\u003e\n    constexpr underlying_type_t\u003cT\u003e underlying_cast(T e) { return static_cast\u003cunderlying_type_t\u003cT\u003e\u003e(e); }\n}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_and_or_operators\u003cT\u003e::value\u003e = nullptr\u003e\nconstexpr T operator\u0026(T l, T r) {return static_cast\u003cT\u003e(detail::underlying_cast(l) \u0026 detail::underlying_cast(r));}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_and_or_operators\u003cT\u003e::value\u003e = nullptr\u003e\nT\u0026 operator\u0026=(T\u0026 l, T r) {\n    l = static_cast\u003cT\u003e(detail::underlying_cast(l) \u0026 detail::underlying_cast(r));\n    return l;\n}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_and_or_operators\u003cT\u003e::value\u003e = nullptr\u003e\nconstexpr T operator|(T l, T r) {return static_cast\u003cT\u003e(detail::underlying_cast(l) | detail::underlying_cast(r));}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_and_or_operators\u003cT\u003e::value\u003e = nullptr\u003e\nT\u0026 operator|=(T\u0026 l, T r) {\n    l = static_cast\u003cT\u003e(detail::underlying_cast(l) | detail::underlying_cast(r));\n    return l;\n}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_bitwise_operators\u003cT\u003e::value\u003e = nullptr\u003e\nconstexpr T operator^(T l, T r) {return static_cast\u003cT\u003e(detail::underlying_cast(l) ^ detail::underlying_cast(r));}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_bitwise_operators\u003cT\u003e::value\u003e = nullptr\u003e\nT\u0026 operator^=(T\u0026 l, T r) {\n    l = static_cast\u003cT\u003e(detail::underlying_cast(l) ^ detail::underlying_cast(r));\n    return l;\n}\ntemplate\u003ctypename T, type_traits::concept_t\u003cenum_concept::has_bitwise_operators\u003cT\u003e::value\u003e = nullptr\u003e\nconstexpr T operator~(T op) {return static_cast\u003cT\u003e(~detail::underlying_cast(op));}\n```\n\n### 対象となるenum classを定義\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\n```\n\n### conceptもどきのクラスのtemplate特殊化を書く\n\n今回は``Flag1``は``\u0026 \u0026= | |= ^ ^= ~``、``Flag2``は``\u0026 \u0026= | |=``の演算ができるようにしてみます。\n\n```cpp\nnamespace enum_concept{\n    template\u003c\u003e struct has_bitwise_operators\u003cFlag1\u003e : std::true_type {};\n    template\u003c\u003e struct has_and_or_operators\u003cFlag2\u003e : std::true_type {};\n}\n```\n\nさきほど、``has_bitwise_operators``や``has_and_or_operators``はoperator overloadのSFINAEの条件に使っていました。ここで許可するtemplate特殊化を書くことでoperator overloadが有効になりますね。元記事の @akinomyoga さんのコメントに書かれたコードではunderlying_type との演算や他のenum classとの演算を有効にする手段も提供していますが、一体どうやったらそんなものが必要なのか理解できないので(それくらいキャスト書け)今回は省略しています。\n\n### 使ってみる\n\n```cpp\nvoid f(Flag1){}\nvoid g(Flag2){}\nint main()\n{\n    f(Flag1::a | Flag1::b);\n    f(Flag1::a \u0026 Flag1::b);\n    f(Flag1::a ^ Flag1::b);\n    f(~Flag1::a);\n    g(Flag2::a | Flag2::b);\n    g(Flag2::a \u0026 Flag2::b);\n    //g(Flag2::a ^ Flag2::b);//invalid operands to binary expression ('Flag2' and 'Flag2')\n    //g(~Flag2::a);//invalid argument type 'Flag2' to unary expression\n}\n```\n\nhttp://melpon.org/wandbox/permlink/A6XI2lDkeXfHQrJ8\n\n### 注意点\n\n今回はC++11の範囲で書きましたが、代入もする演算子はC++14じゃないとconstexprにできません。なおVisual Studio 2013ではconstexprは使えませんが、上のコードからconstexprを置換して取り除けば多分動くと思います。\n\n## 得られたもの\n\n- フラグ指定する時の凡ミスが減らせるようになった\n- enum classに希望が持てた\n\n## 失ったもの\n\n- この記事を読むのに費やした時間\n\n## それにしても\n\n**conceptがない世界はいややー！来世はconceptがある世界に産まれさせてくださーい！**\n\nC++11のconceptとC++17に提案されていたconceptについては\n[帰ってきたコンセプト | Boost勉強会 #16 大阪](http://ezoeryou.github.io/boost-benkyokai-oosaka-16/#/)\nを見てください。まあC++17にconceptが入らないことが確定したけどな！\n\n## 余談\n\n凄まじくどうでもいい話ですが、冒頭の雑コラ、最初3枚はシーン的には映画最後のシーンで(三葉と瀧がタイムスリップしてる絵だけど)、2021年12月という設定らしいのでC++17とC++20は出てますね。C++23に向けて標準化委員会にまたconceptとかが提案されていることでしょう。\n4枚目は2013年9月ごろのはずなので、C++11にconceptが入らないことになり間もなくC++14がでるけどやっぱりなんでconceptないんや！という時期ですね。C++17に提案されていてまたもrejectを喰らったConcept Liteの作業が始まったのが[2014/2/17らしいので](https://github.com/cplusplus/concepts-ts/commit/e0b420cefa63bc0fdf03dbe01dd189ee9c4ab64f)まだ三葉は再提案の話は知らないはずですね。\n\ncf.)\n[【ネタバレ解説】｢君の名は。｣読者と共に読解入れ替わり時系列、図解で解説!｢転校生｣どころじゃなかった…チェ・ブンブンのティーマ - Part 2](http://france-chebunbun.com/2016/08/29/post-7566/2/)\n","coediting":false,"comments_count":1,"created_at":"2016-10-20T17:42:36+09:00","group":null,"id":"6f7b5c3714b821fe0196","likes_count":30,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]}],"title":"君の名は・・・enum class","updated_at":"2018-08-04T13:35:43+09:00","url":"https://qiita.com/yumetodo/items/6f7b5c3714b821fe0196","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eVisual Studio も最近はだいぶC++標準への準拠が進んでいて、Visual Studio \"15\" Preview 5ではC++14のconstexprも使えるそうですね。\u003c/p\u003e\n\n\u003cp\u003eしかしまだVisual Studio 2013のサポートは切れない、というプロジェクトも多いハズ。\u003c/p\u003e\n\n\u003cp\u003eところで、C++11で\u003ca href=\"http://cpprefjp.github.io/reference/system_error/error_code.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::error_code\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://cpprefjp.github.io/reference/system_error/error_category.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::error_category\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://cpprefjp.github.io/reference/system_error/system_category.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::system_category()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"http://cpprefjp.github.io/reference/system_error/system_error.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e\u003ccode\u003estd::system_error\u003c/code\u003e\u003c/a\u003eといったクラス・関数が追加され、Win32APIのエラーコードの文字列化に\u003ccode\u003eFormatMessage\u003c/code\u003eを自力で呼び出さなくて良くなりました。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eFormatMessageを呼ばなくていい素晴らしい世界\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eer\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRegOpenKeyEx\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparent_key_handle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esub_key_root\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eERROR_SUCCESS\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eer\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()),\u003c/span\u003e \u003cspan class=\"s\"\u003e\"RegOpenKeyEx:(\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eto_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eer\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"でもねそれvs2013では使えないんだ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%A7%E3%82%82%E3%81%AD%E3%81%9D%E3%82%8Cvs2013%E3%81%A7%E3%81%AF%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84%E3%82%93%E3%81%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eでもね、それVS2013では使えないんだ\u003c/h1\u003e\n\n\u003cp\u003e残念ながらVS2013では実装が途中で使い物になりません。\u003c/p\u003e\n\n\u003cp\u003eいや、まあVS2015でもぶっ壊れてるじゃねーか！という話もありますが\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/a184d70a18d4d9a9beea\" id=\"reference-3b75c7846a729ef9607d\"\u003eVS2015のstd::error_categoryが奇想天外な件について\u003c/a\u003e\u003cbr\u003e\n規格に沿っていないというだけで動作的には期待したものですしお寿司。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"じゃあ自作しよう\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%98%E3%82%83%E3%81%82%E8%87%AA%E4%BD%9C%E3%81%97%E3%82%88%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eじゃあ自作しよう\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;Windows.h\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;stdexcept\u0026gt;\n#include \u0026lt;system_error\u0026gt;\n#if defined(_MSC_VER) \u0026amp;\u0026amp; _MSC_VER \u0026lt; 1900\n\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"nf\"\u003eformat_message\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003elasterr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFormatMessageA\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eFORMAT_MESSAGE_ALLOCATE_BUFFER\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFORMAT_MESSAGE_FROM_SYSTEM\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eFORMAT_MESSAGE_ARGUMENT_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elasterr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eLANG_NEUTRAL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eLPSTR\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eDWORD\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'\\r'\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'\\n'\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'\\0'\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//改行文字削除\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sc\"\u003e'\\0'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//エラーメッセージをコピー\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e\u003cspan class=\"p\"\u003e(...){\u003c/span\u003e\u003cspan class=\"c1\"\u003e//ここで例外を投げるよりはエラーメッセージなしのほうが良いので握りつぶす\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLocalFree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//FormatMessageAでFORMAT_MESSAGE_ALLOCATE_BUFFERを指定したので必ず開放\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003esystem_error_category_c\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// categorize an operating system error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error_category_c\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"system\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eformat_message\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"p\"\u003e(...)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"unknown error\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003etypename\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eput_on_static_storage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estorage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edetail\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eput_on_static_storage\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_error_category_c\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003esystem_error\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eec_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\": \"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e \u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerct\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eec_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e \u003cspan class=\"n\"\u003eec_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#else\n\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"使用例\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e使用例\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/windows_registry_manager/blob/master/src/registry_key.cpp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/windows_registry_manager/blob/master/src/registry_key.cpp\u003c/a\u003e\u003c/p\u003e\n","body":"# はじめに\n\nVisual Studio も最近はだいぶC++標準への準拠が進んでいて、Visual Studio \"15\" Preview 5ではC++14のconstexprも使えるそうですね。\n\nしかしまだVisual Studio 2013のサポートは切れない、というプロジェクトも多いハズ。\n\nところで、C++11で[``std::error_code``](http://cpprefjp.github.io/reference/system_error/error_code.html), [``std::error_category``](http://cpprefjp.github.io/reference/system_error/error_category.html), [``std::system_category()``](http://cpprefjp.github.io/reference/system_error/system_category.html), [``std::system_error``](http://cpprefjp.github.io/reference/system_error/system_error.html)といったクラス・関数が追加され、Win32APIのエラーコードの文字列化に``FormatMessage``を自力で呼び出さなくて良くなりました。\n\n```cpp:FormatMessageを呼ばなくていい素晴らしい世界\nusing std::system_category;\nusing std::system_error;\nconst auto er = RegOpenKeyEx(parent_key_handle, sub_key_root, 0, r, \u0026this-\u003ekey);\nif (ERROR_SUCCESS != er) {\n\tthrow system_error(std::error_code(er, system_category()), \"RegOpenKeyEx:(\" + std::to_string(er) + ')');\n}\n```\n\n# でもね、それVS2013では使えないんだ\n\n残念ながらVS2013では実装が途中で使い物になりません。\n\nいや、まあVS2015でもぶっ壊れてるじゃねーか！という話もありますが\n[VS2015のstd::error_categoryが奇想天外な件について](http://qiita.com/yumetodo/items/a184d70a18d4d9a9beea)\n規格に沿っていないというだけで動作的には期待したものですしお寿司。\n\n# じゃあ自作しよう\n\n```cpp\n#include \u003cWindows.h\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n#include \u003csystem_error\u003e\n#if defined(_MSC_VER) \u0026\u0026 _MSC_VER \u003c 1900\nstd::string format_message(DWORD lasterr) {\n    char* buf = nullptr;\n    const DWORD len = FormatMessageA(\n        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY,\n        nullptr,\n        lasterr,\n        LANG_NEUTRAL,\n        reinterpret_cast\u003cLPSTR\u003e(\u0026buf),\n        0,\n        nullptr\n    );\n    DWORD i = (len \u003c 3) ? 0 : len - 3;\n    for (; '\\r' != buf[i] \u0026\u0026 '\\n' != buf[i] \u0026\u0026 '\\0' != buf[i]; i++);//改行文字削除\n    buf[i] = '\\0';\n    std::string ret;\n    try{\n        ret = buf;//エラーメッセージをコピー\n    }\n    catch(...){//ここで例外を投げるよりはエラーメッセージなしのほうが良いので握りつぶす\n    }\n    LocalFree(buf);//FormatMessageAでFORMAT_MESSAGE_ALLOCATE_BUFFERを指定したので必ず開放\n    return ret;\n}\nusing std::error_category;\nclass system_error_category_c : public error_category {\t// categorize an operating system error\npublic:\n    system_error_category_c() : error_category() {}\n    virtual const char *name() const { return \"system\"; }\n    virtual std::string message(int ec) const\n    {\n        try {\n            return format_message(ec);\n        }\n        catch (...) {\n            return \"unknown error\";\n        }\n    }\n};\nnamespace detail {\n    template\u003ctypename T\u003e T\u0026 put_on_static_storage() {\n        static T storage;\n        return storage;\n    }\n}\nerror_category\u0026 system_category() {\n    return detail::put_on_static_storage\u003csystem_error_category_c\u003e();\n}\nusing std::runtime_error;\nclass system_error : public runtime_error\n{\npublic:\n    system_error(std::error_code ec, const std::string\u0026 m)\n        : ec_(ec), runtime_error((m.empty()) ? ec.message() : m + \": \" + ec.message())\n    {}\n    system_error(std::error_code ec) : system_error(ec, \"\") {}\n    system_error(std::error_code ec, const char *m) : system_error(ec, std::string(m)) {}\n    system_error(int e, const error_category\u0026 erct) : system_error(e, erct, \"\") {}\n    system_error(int e, const error_category\u0026 erct, const std::string\u0026 m) : system_error(std::error_code(e, erct), m) {}\n    system_error(int e, const error_category\u0026 erct, const char *m) : system_error(e, erct, std::string(m)) {}\n    const std::error_code\u0026 code() const { return ec_; }\nprivate:\n    std::error_code ec_;\n};\n#else\nusing std::system_category;\nusing std::system_error;\n#endif\n```\n\n# 使用例\n\nhttps://github.com/yumetodo/windows_registry_manager/blob/master/src/registry_key.cpp\n\n","coediting":false,"comments_count":0,"created_at":"2016-10-14T12:57:51+09:00","group":null,"id":"7bb24ab09ab197caadb7","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"VisualStudio2013","versions":[]}],"title":"VS2013でもstd::error_codeとかstd::system_category()を使いたい","updated_at":"2016-10-14T13:02:05+09:00","url":"https://qiita.com/yumetodo/items/7bb24ab09ab197caadb7","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eふと思い立ってcppcheckをmsys2でも使おうと思った。というわけで\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://srz-zumix.blogspot.jp/2012/03/cppcheck.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eブログズミ: Cppcheck を使ってみた\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを見ながら\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"shell-session\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003ecppcheck \u003cspan class=\"nt\"\u003e--enable\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eall \u003cspan class=\"nt\"\u003e--std\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ec99 \u003cspan class=\"nt\"\u003e-x\u003c/span\u003e c \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e io.c\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとかおもむろにコマンドを打ったらですね\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ecppcheck: Failed to load library configuration file 'std.cfg'. File not found\ncppcheck: Failed to load library configuration file 'windows.cfg'. File not found\n(information) Failed to load std.cfg. Your Cppcheck installation is broken, please re-install. The Cppcheck binary was compiled with CFGDIR set to \"C:/building/msys64/mingw32/share/cppcheck/cfg\" and will therefore search for std.cfg in that path.\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eと怒られました。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe20a4996-7f3f-781b-4ee5-81d212cce526.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=5c173b0bfd17f35c69bcbf15aa845e15\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe20a4996-7f3f-781b-4ee5-81d212cce526.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=5c173b0bfd17f35c69bcbf15aa845e15\" alt=\"1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/e20a4996-7f3f-781b-4ee5-81d212cce526.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe20a4996-7f3f-781b-4ee5-81d212cce526.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7755747771964d0ad3fa2e6767bc4ef7 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"環境\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%92%B0%E5%A2%83\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e環境\u003c/h1\u003e\n\n\u003cp\u003eWindows10 x64 msys2\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e$pacman -Sl | grep pacman\nmsys pacman 5.0.1-1 [インストール済み]\nmsys pacman-mirrors 20160112-1 [インストール済み]\n$pacman -Sl | grep cppcheck\nmingw32 mingw-w64-i686-cppcheck 1.74-1 [インストール済み]\nmingw64 mingw-w64-x86_64-cppcheck 1.74-1 [インストール済み]\n$cppcheck --version\nCppcheck 1.74\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"原因\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8E%9F%E5%9B%A0\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e原因\u003c/h1\u003e\n\n\u003cp\u003ecppcheckには\u003cbr\u003e\n\u003ca href=\"http://srz-zumix.blogspot.jp/2014/02/cppcheck-cfg.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eブログズミ: [Cppcheck] cfg ファイル設定\u003c/a\u003e\u003cbr\u003e\nに紹介のあるように\u003ccode\u003e.cfg\u003c/code\u003eファイルが有ります。\u003c/p\u003e\n\n\u003cp\u003emsys2のパッケージビルドするときに、デフォルトのconfigファイルのパスを指定するらしいのですが、これが絶対パスしか受け付けないようで、\u003ccode\u003eC:/building/msys64/mingw32/share/cppcheck/cfg\u003c/code\u003eに固定されてしまったものが\u003ccode\u003epacman\u003c/code\u003eで落ちてくるっぽいです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"対処法\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%AF%BE%E5%87%A6%E6%B3%95\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e対処法\u003c/h1\u003e\n\n\u003cp\u003e実行ファイルをバイナリエディタで書き換える\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff42292a8-538b-7eca-733d-97dbd02c3d3c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=11d0e2e897ed2964326a4bbc8680fdfc\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff42292a8-538b-7eca-733d-97dbd02c3d3c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=11d0e2e897ed2964326a4bbc8680fdfc\" alt=\"2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/f42292a8-538b-7eca-733d-97dbd02c3d3c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ff42292a8-538b-7eca-733d-97dbd02c3d3c.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=cba6292d08a1bb54b6bb626b2791fff9 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eまずは\u003ccode\u003e./msys64/mingw[32か64]/bin\u003c/code\u003eにある\u003ccode\u003ecppcheck.exe\u003c/code\u003eを適当なバイナリエディタで開きます\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfcb1879-f08b-60a6-aa6e-12da07ed3351.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b116b8b5e7012b24b4c4c0156ad4d635\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfcb1879-f08b-60a6-aa6e-12da07ed3351.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=b116b8b5e7012b24b4c4c0156ad4d635\" alt=\"3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/cfcb1879-f08b-60a6-aa6e-12da07ed3351.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fcfcb1879-f08b-60a6-aa6e-12da07ed3351.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7e6e55e0a6d8003e8065777d19a2b3dc 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eshare/cppcheck/cfg\u003c/code\u003eで検索すると、エラーメッセージ用とそうでない方の2箇所ヒットしますが、\u003cstrong\u003eそうでない方\u003c/strong\u003eを探して\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe3b7cfee-2406-4fe0-4fa0-0e7cd7f89ed1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=548a34bad33677425b25bcca7285fe0b\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe3b7cfee-2406-4fe0-4fa0-0e7cd7f89ed1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=548a34bad33677425b25bcca7285fe0b\" alt=\"4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/e3b7cfee-2406-4fe0-4fa0-0e7cd7f89ed1.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Fe3b7cfee-2406-4fe0-4fa0-0e7cd7f89ed1.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=bfbd0ebcf7221424ed2395223b4b6b2c 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e書き換えます。文字列は必ずNULL文字で終わらないといけないのがCの仕様なので、ここでも\u003cstrong\u003e\u003ccode\u003e00\u003c/code\u003eで終わるようにします\u003c/strong\u003e。\u003cbr\u003e\n当たり前ですが、\u003cstrong\u003eそれ以降のアドレスがずれないように、長さが増減したらその数に合わせて\u003ccode\u003e00\u003c/code\u003eのbyte数を調整してください。\u003c/strong\u003eじゃないと色々壊れます。いや、以降のアドレスを参照する部分を全部書き換えればいいんですが、それくらいならリビルドするほうが早いです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結果\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E6%9E%9C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結果\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F43b0eaf3-fae6-0a9d-a6a5-35136ab01c0b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f7e10b83294ca7f0dc03084be5eeff0b\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F43b0eaf3-fae6-0a9d-a6a5-35136ab01c0b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=f7e10b83294ca7f0dc03084be5eeff0b\" alt=\"5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/43b0eaf3-fae6-0a9d-a6a5-35136ab01c0b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F43b0eaf3-fae6-0a9d-a6a5-35136ab01c0b.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=51c16b89416fc3bb72d56f791767f847 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eやったぜ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"感想\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%84%9F%E6%83%B3\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e感想\u003c/h1\u003e\n\n\u003cp\u003emsys2の中の人、相対パスにできるようにパッチ当ててください\u003c/p\u003e\n","body":"\n# はじめに\nふと思い立ってcppcheckをmsys2でも使おうと思った。というわけで\n\n[ブログズミ: Cppcheck を使ってみた](http://srz-zumix.blogspot.jp/2012/03/cppcheck.html)\n\nを見ながら\n\n```shell-session\n$cppcheck --enable=all --std=c99 -x c -v io.c\n```\n\nとかおもむろにコマンドを打ったらですね\n\n```\ncppcheck: Failed to load library configuration file 'std.cfg'. File not found\ncppcheck: Failed to load library configuration file 'windows.cfg'. File not found\n(information) Failed to load std.cfg. Your Cppcheck installation is broken, please re-install. The Cppcheck binary was compiled with CFGDIR set to \"C:/building/msys64/mingw32/share/cppcheck/cfg\" and will therefore search for std.cfg in that path.\n```\n\nと怒られました。\n\n![1.png](https://qiita-image-store.s3.amazonaws.com/0/94177/e20a4996-7f3f-781b-4ee5-81d212cce526.png)\n\n# 環境\n\nWindows10 x64 msys2\n\n```\n$pacman -Sl | grep pacman\nmsys pacman 5.0.1-1 [インストール済み]\nmsys pacman-mirrors 20160112-1 [インストール済み]\n$pacman -Sl | grep cppcheck\nmingw32 mingw-w64-i686-cppcheck 1.74-1 [インストール済み]\nmingw64 mingw-w64-x86_64-cppcheck 1.74-1 [インストール済み]\n$cppcheck --version\nCppcheck 1.74\n```\n\n# 原因\n\ncppcheckには\n[ブログズミ: [Cppcheck] cfg ファイル設定](http://srz-zumix.blogspot.jp/2014/02/cppcheck-cfg.html)\nに紹介のあるように``.cfg``ファイルが有ります。\n\nmsys2のパッケージビルドするときに、デフォルトのconfigファイルのパスを指定するらしいのですが、これが絶対パスしか受け付けないようで、``C:/building/msys64/mingw32/share/cppcheck/cfg``に固定されてしまったものが``pacman``で落ちてくるっぽいです。\n\n# 対処法\n\n実行ファイルをバイナリエディタで書き換える\n\n![2.png](https://qiita-image-store.s3.amazonaws.com/0/94177/f42292a8-538b-7eca-733d-97dbd02c3d3c.png)\n\nまずは``./msys64/mingw[32か64]/bin``にある``cppcheck.exe``を適当なバイナリエディタで開きます\n\n![3.png](https://qiita-image-store.s3.amazonaws.com/0/94177/cfcb1879-f08b-60a6-aa6e-12da07ed3351.png)\n\n``share/cppcheck/cfg``で検索すると、エラーメッセージ用とそうでない方の2箇所ヒットしますが、**そうでない方**を探して\n\n![4.png](https://qiita-image-store.s3.amazonaws.com/0/94177/e3b7cfee-2406-4fe0-4fa0-0e7cd7f89ed1.png)\n\n書き換えます。文字列は必ずNULL文字で終わらないといけないのがCの仕様なので、ここでも**``00``で終わるようにします**。\n当たり前ですが、**それ以降のアドレスがずれないように、長さが増減したらその数に合わせて``00``のbyte数を調整してください。**じゃないと色々壊れます。いや、以降のアドレスを参照する部分を全部書き換えればいいんですが、それくらいならリビルドするほうが早いです。\n\n# 結果\n\n![5.png](https://qiita-image-store.s3.amazonaws.com/0/94177/43b0eaf3-fae6-0a9d-a6a5-35136ab01c0b.png)\n\nやったぜ。\n\n# 感想\n\nmsys2の中の人、相対パスにできるようにパッチ当ててください\n","coediting":false,"comments_count":2,"created_at":"2016-09-29T17:39:58+09:00","group":null,"id":"0a998dc7c696742754f8","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"msys2","versions":[]},{"name":"Cppcheck","versions":[]}],"title":"msys2でcppcheckを使おうとしたらlibrary configurationがないと怒られるのは嫌だ","updated_at":"2016-09-29T17:39:58+09:00","url":"https://qiita.com/yumetodo/items/0a998dc7c696742754f8","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"はじめに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eはじめに\u003c/h1\u003e\n\n\u003cp\u003eタイトルが中二病ですみません。みなさま、\u003ca href=\"http://www.nicovideo.jp/user/37896001\" rel=\"nofollow noopener\" target=\"_blank\"\u003eナマステ\u003c/a\u003e。さて、この記事のタイトルを見て、「時代・・・サトウキビ・・・\u003ca href=\"http://www.nicovideo.jp/user/5006073\" rel=\"nofollow noopener\" target=\"_blank\"\u003e忍者\u003c/a\u003e・・・うぅ、頭が」となった人は私と趣味が似ています・・・って話はどうでもいいか。\u003c/p\u003e\n\n\u003cp\u003e駆け抜けるシリーズ第二弾です。第一弾は\u003ca href=\"http://qiita.com/yumetodo/items/e49a673afd9a3ecb81a8\" id=\"reference-268132cd2ad646c13506\"\u003eC99からC++14を駆け抜けるC++講座\u003c/a\u003eという、超速度で情報が押し寄せる疾走感あふれる記事でしたが、今回はのんびりまったりを目指します。\u003c/p\u003e\n\n\u003cp\u003e今回のテーマは関数です。CでもC++でも(他の言語でも)ありますが、\u003ca href=\"http://re-zero-anime.jp/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eRe:ゼロから始める異世界生活\u003c/a\u003eじゃない、Re:ゼロから始める関数講座をやっていきます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"ありきたりな世界\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%82%E3%82%8A%E3%81%8D%E3%81%9F%E3%82%8A%E3%81%AA%E4%B8%96%E7%95%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eありきたりな世界\u003c/h1\u003e\n\n\u003cp\u003eまあみなさん、一度はありきたりな世界を標準出力に出力するプログラムを書いたことがあると思います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"arikitari_na_world!\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/3JRG4BnvINThrqpP\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/3JRG4BnvINThrqpP\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"arikitari_na_world!\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/eQFQiAtolc1ucUCs\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/eQFQiAtolc1ucUCs\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e復習ですが、CでもC++でも\u003ccode\u003emain\u003c/code\u003e関数からプログラムは始まるのでした(freestanding environmentを除く)。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の宣言と定義\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%A3%E8%A8%80%E3%81%A8%E5%AE%9A%E7%BE%A9\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の宣言と定義\u003c/h1\u003e\n\n\u003cp\u003eとりあえず、int型の値を受け取り、2で割った値をint型で返す関数fを考えましょう。\u003c/p\u003e\n\n\u003cp\u003eまずプロトタイプ宣言があります\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//int f(int n);//どっちでもいい\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eここで関数の型が\u003ccode\u003eint (int)\u003c/code\u003eだとわかります。\u003ccode\u003e()\u003c/code\u003eの中は仮引数です。\u003c/p\u003e\n\n\u003cp\u003e次に定義します\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eちなみにヘッダーファイルなど、複数の翻訳単位でincludeされるファイルに宣言と定義を書くときは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003estatic\u003c/code\u003eとC99で導入された\u003ccode\u003einline\u003c/code\u003eをつけましょう。それを忘れると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"sh\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003emake\nScanning dependencies of target Main\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 33%] Building C object CMakeFiles/Main.dir/main.c.obj\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e 66%] Building C object CMakeFiles/Main.dir/b.c.obj\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e100%] Linking C executable Main.exe\nCMakeFiles/Main.dir/objects.a\u003cspan class=\"o\"\u003e(\u003c/span\u003eb.c.obj\u003cspan class=\"o\"\u003e)\u003c/span\u003e:b.c:\u003cspan class=\"o\"\u003e(\u003c/span\u003e.text+0x0\u003cspan class=\"o\"\u003e)\u003c/span\u003e: multiple definition of \u003cspan class=\"sb\"\u003e`\u003c/span\u003ef\u003cspan class=\"s1\"\u003e'\nCMakeFiles/Main.dir/objects.a(main.c.obj):main.c:(.text+0x0): first defined here\ncollect2.exe: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/Main.dir/build.make:122: Main.exe] エラー 1\nmake[1]: *** [CMakeFiles/Makefile2:68: CMakeFiles/Main.dir/all] エラー 2\nmake: *** [Makefile:84: all] エラー 2\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003emultiple definition of `f'\u003c/code\u003eと怒られます。\u003ccode\u003estatic\u003c/code\u003eをつけて内部リンゲージにしましょう。\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eGCCの\u003ccode\u003e-std=gnu89\u003c/code\u003eで追加されるinlineがなかった頃の独自拡張のinlineについて語ってはいけない。\u003ccode\u003eextern inline\u003c/code\u003eしないと行けないんだぜ\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003ecf.)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://d.hatena.ne.jp/kabakiyo/20130304/1362369064\" rel=\"nofollow noopener\" target=\"_blank\"\u003eヘッダーファイルで関数の定義 - 遅咲きのエンジニア\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://qiita.com/kktk-KO/items/075ce9a784d5d8296d53\" id=\"reference-b45efad2144050b2d4fd\"\u003e[C++]そのinline、大丈夫？\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の呼び出し\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の呼び出し\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e例えばこんな例を考えましょう。\u003c/p\u003e\n\n\u003cp\u003e関数名のあとに\u003ccode\u003e()\u003c/code\u003eを書き、その中に実引数を書くことで関数を呼び出せるのでした。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の戻り値を無視するとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E6%88%BB%E3%82%8A%E5%80%A4%E3%82%92%E7%84%A1%E8%A6%96%E3%81%99%E3%82%8B%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の戻り値を無視するとは\u003c/h1\u003e\n\n\u003cp\u003eまあ余談ですが。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//関数fの戻り値を利用している\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//関数fの戻り値を使って変数aを初期化している\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//関数gの戻り値を変数aに代入している\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//関数fの戻り値を無視している\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d, %d\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//関数fの戻り値をprintf関数の第2引数に渡している\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/KH421VKlOvm8RuFX\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/KH421VKlOvm8RuFX\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e関数\u003ccode\u003ef\u003c/code\u003eや関数\u003ccode\u003eg\u003c/code\u003eは定義から明らかなように戻り値を返しますが、関数の呼び出し側で利用しないことももちろんできます。\u003c/p\u003e\n\n\u003cp\u003eなおC++17では、\u003ccode\u003enodiscard attribute\u003c/code\u003eというものが導入されまして\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++17\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"n\"\u003enodiscard\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003efn\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efn\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// warning\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e戻り値を無視するとコンパイラに怒られるようにできるようになりました。ライブラリ側が、エラー処理の関係などで戻り値を無視してほしくない時に使います。\u003c/p\u003e\n\n\u003cp\u003ecf.) \u003ca href=\"http://qiita.com/kazatsuyu/items/1d46b85f08c6e9a8bcaf#nodiscard\" id=\"reference-526553a0d732d784895b\"\u003e久々なのでC++17の情報を集めてみる\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の型とは何かを関数の呼び出し機構を見ながら\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E5%9E%8B%E3%81%A8%E3%81%AF%E4%BD%95%E3%81%8B%E3%82%92%E9%96%A2%E6%95%B0%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E6%A9%9F%E6%A7%8B%E3%82%92%E8%A6%8B%E3%81%AA%E3%81%8C%E3%82%89\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の型とは何かを関数の呼び出し機構を見ながら\u003c/h1\u003e\n\n\u003cp\u003e先ほど\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eここで関数の型が\u003ccode\u003eint (int)\u003c/code\u003eだとわかります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとあっさり書きましたが、関数の型とはなんでしょうか？\u003c/p\u003e\n\n\u003cp\u003eその前に変数の型を考えましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこの記事の読者なら、変数\u003ccode\u003en\u003c/code\u003eの型が\u003ccode\u003eint\u003c/code\u003e型だとすぐに分かるはずです。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e型の役割は、語弊を恐れずに言えば、メモリー上にどのようにデータを配置するかです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eこの場合は自動変数領域にint型ひとつ分のメモリーを確保し、そこに\u003ccode\u003en\u003c/code\u003eという名前をつけたわけです。\u003c/p\u003e\n\n\u003cp\u003eでは関数の型はどうかを見ていきましょう。\u003c/p\u003e\n\n\u003cp\u003eで、普通自動変数領域はスタックというデータ構造を使うので、(規格書にはそんなことは書いていないけど)以下その仮定で話を進めます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eもう一度確認すると関数\u003ccode\u003ef\u003c/code\u003eの型は\u003ccode\u003eint(int)\u003c/code\u003e型です。main関数内で\u003ccode\u003ef(4)\u003c/code\u003eとありますが、これはまず\u003ccode\u003ef()\u003c/code\u003eから関数呼び出しだとわかり、\u003ccode\u003e4\u003c/code\u003eとあるので引数は一つで型はint型です。\u003cbr\u003e\nなので\u003ccode\u003estatic int f(int n){ return n / 2; }\u003c/code\u003eが見つかります。\u003c/p\u003e\n\n\u003cp\u003eさて関数を呼び出しましょう。もっと実際には複雑ですがそれは後述するとします。\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e戻り値の型はint型ですからstackに戻り値を書き込むためのint型ひとつ分のメモリーを確保します(x86アーキテクチャだとレジスタを使うらしいです)\u003c/li\u003e\n\u003cli\u003e引数を後ろからスタックに積んでいきます。今回は引数は一つでint型なのでint型ひとつ分のメモリーを確保し、4を代入します。\u003c/li\u003e\n\u003cli\u003e関数f内に処理が移ります\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ereturn n / 2\u003c/code\u003eとあるので、\u003ccode\u003en / 2\u003c/code\u003eの演算結果を1で確保したメモリー領域に代入します\u003c/li\u003e\n\u003cli\u003emain関数に処理が戻ります。\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e大事な事があります。\u003cstrong\u003e関数を呼び出すときは呼び出し元のスタックに戻り値を保存する無名の一時的な変数が作られるということです。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数の型に含まれる情報\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%AE%E5%9E%8B%E3%81%AB%E5%90%AB%E3%81%BE%E3%82%8C%E3%82%8B%E6%83%85%E5%A0%B1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数の型に含まれる情報\u003c/h1\u003e\n\n\u003cp\u003eさて、なんとなく関数の方の役割がわかったのではないでしょうか？\u003c/p\u003e\n\n\u003cp\u003e関数の型に含まれる情報は\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e戻り値の型\u003c/li\u003e\n\u003cli\u003e引数の個数と型\u003c/li\u003e\n\u003cli\u003e関数呼び出し規約\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eが含まれていて、関数を呼び出すのに不可欠なものです。\u003cbr\u003e\n(関数呼び出し規約は後述します)\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"lvalueとrvalue\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#lvalue%E3%81%A8rvalue\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003elvalueとrvalue\u003c/h1\u003e\n\n\u003cp\u003e左辺値とか右辺値とかいう言葉を聞いたことがあるかもしれませんが忘れましょう。Cではいいんですが、C++をやるときに理解を妨げます。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.jp/2009/11/rvalue-reference_23.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003ervalue reference 完全解説 | 本の虫\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e誤解を恐れずにいえば、lvalueとは、明示的に実体のある、名前付きのオブジェクトであり、rvalueとは、一時的に生成される無名のオブジェクトである。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eX\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// lvalue\u003c/span\u003e\n    \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// rvalue\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eX\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e     \u003cspan class=\"c1\"\u003e// lvalue\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eX\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// rvalue\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// rvalue\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e上記のコードを読めば、lvalueとrvalueの違いが、なんとなく分かってくれる事と思う。lvalueはrvalueに変換できるが、その逆、rvalueをlvalueに変換することは出来ない。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e先ほど、関数を呼び出すときは呼び出し元のスタックに戻り値を保存する\u003cstrong\u003e無名の一時的な\u003c/strong\u003e変数が作られる、と言いましたが、これはrvalueに分類できますね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"creferenceとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#creference%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++]Referenceとは\u003c/h1\u003e\n\n\u003cp\u003e参照、と言ったほうが聞いたことがあるかもしれません。\u003cstrong\u003eReferenceとはすでにある値に対し別名をつける機能です。\u003c/strong\u003e\u003cbr\u003e\nで、Referenceですが、大きくわけてlvalue referenceとrvalue referenceがあります。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003elvalue_referenceの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea_r\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//a_rはaの別名\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e','\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea_r\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3,3\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/W3VSr1JBS6uTdVcG\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/W3VSr1JBS6uTdVcG\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eで、この2つにどんな差があるのか、ですが、参照できるものの型を除けば\u003cstrong\u003eなにも違いはありません\u003c/strong\u003e。よくrvalue referenceはlvalue referenceと全く異なる、と考えて違いを考えすぎるあまり、わけわかめになる人がいますが、Referenceには違いないのです。\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e種類\u003c/th\u003e\n\u003cth\u003e参照できるもの\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003elvalue reference(T\u0026amp;)\u003c/td\u003e\n\u003ctd\u003elvalue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econst lvalue rederence(const T\u0026amp;)\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eなんでも\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ervalue reference (T\u0026amp;\u0026amp;)\u003c/td\u003e\n\u003ctd\u003ervalue\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003econst rvalue reference(const T\u0026amp;\u0026amp;)\u003c/td\u003e\n\u003ctd\u003econst rvalue\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eReferenceの例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e \u003cspan class=\"nf\"\u003emake_Test\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTest\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea_lr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea_clr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//int\u0026amp; b_lr = b;//NG:暗黙にconstは外せない\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb_clr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003et_lr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003et_rr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003et_clr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003et_crr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emake_Test\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eTest\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003et_clr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emake_Test\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eという感じで、\u003ccode\u003econst lvalue reference\u003c/code\u003eが無双というか最強なので、rvalue referenceはあまり出番がありません。\u003c/p\u003e\n\n\u003cp\u003eもちろん関数の引数にも使えますし、戻り値にも使えます\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003elvalue_referenceの例2\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en_r\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e','\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en_r\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 4,4\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/AXxoaNG6Duc8ACz1\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/AXxoaNG6Duc8ACz1\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ecf.)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://stlalv.la.coocan.jp/Reference.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++マニアック,リファレンス＝参照の使い方,how to use reference,C++入門,C++言語講座\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://fimbul.hateblo.jp/entry/2013/12/22/015912\" rel=\"nofollow noopener\" target=\"_blank\"\u003econst rvalue referenceは何に使えばいいのか - ここは匣\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"演算子を関数のように解釈してみよう\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%BC%94%E7%AE%97%E5%AD%90%E3%82%92%E9%96%A2%E6%95%B0%E3%81%AE%E3%82%88%E3%81%86%E3%81%AB%E8%A7%A3%E9%87%88%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e演算子を関数のように解釈してみよう\u003c/h1\u003e\n\n\u003cp\u003eこれをやると純粋なC使いの皆さんから「C++を持ち込むんじゃねー」とまさかりを投げられるのですが、まあやってみましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"前置の単項演算子\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E7%BD%AE%E3%81%AE%E5%8D%98%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前置の単項演算子\u003c/h2\u003e\n\n\u003cp\u003e前置の単項演算子といえば前置のoperator++ですね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e用例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e前置の単項演算子は引数が一つの関数と考えることができます。\u003c/p\u003e\n\n\u003cp\u003e試しにC++のoperator overload風味に書いてみましょう。言うまでもなくコンパイルは通らない擬似コードです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e擬似コード\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e第一引数は\u003ccode\u003eint\u0026amp;\u003c/code\u003e型ですから、\u003ccode\u003en\u003c/code\u003eは先の用例で言えば変数\u003ccode\u003ea\u003c/code\u003eの別名です。\u003ccode\u003en = n + 1\u003c/code\u003eによって\u003ccode\u003en\u003c/code\u003eが1加算され、その実体である\u003ccode\u003ea\u003c/code\u003eも1加算されています。\u003c/p\u003e\n\n\u003cp\u003e戻り値の型も\u003ccode\u003eint\u0026amp;\u003c/code\u003e型ですから、戻り値は変数\u003ccode\u003en\u003c/code\u003eの別名つまり変数\u003ccode\u003ea\u003c/code\u003eの別名です。\u003c/p\u003e\n\n\u003cp\u003e今回の場合、この演算子の呼出し場所では\u003ccode\u003e++a\u003c/code\u003eとしているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"後置の単項演算子\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%BE%8C%E7%BD%AE%E3%81%AE%E5%8D%98%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e後置の単項演算子\u003c/h2\u003e\n\n\u003cp\u003e後置の単項演算子といえば後置のoperator++か後置のoperator--しかないですね。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e用例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e後置の単項演算子は\u003cstrong\u003e事実上\u003c/strong\u003e引数が一つの関数と考えることができます。というのはC++のoperator overloadの文法上、2つ目の引数がありますが、その情報は使わないからです。\u003c/p\u003e\n\n\u003cp\u003eこれも試しにC++のoperator overload風味に書いてみましょう。念の為に言いますが、コンパイルは通らない擬似コードです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e擬似コード\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*前置のopeartorと区別するためのただのフラグ*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e第一引数は\u003ccode\u003eint\u0026amp;\u003c/code\u003e型ですから、\u003ccode\u003en\u003c/code\u003eは先の用例で言えば変数\u003ccode\u003ea\u003c/code\u003eの別名です。\u003ccode\u003en = n + 1\u003c/code\u003eによって\u003ccode\u003en\u003c/code\u003eが1加算され、その実体である\u003ccode\u003ea\u003c/code\u003eも1加算されています。\u003c/p\u003e\n\n\u003cp\u003e戻り値の型は\u003ccode\u003econst int\u003c/code\u003e型ですから、戻り値は変数\u003ccode\u003en\u003c/code\u003eつまり変数\u003ccode\u003ea\u003c/code\u003eをコピーしたものです。\u003c/p\u003e\n\n\u003cp\u003e今回の場合、この演算子の呼出し場所では\u003ccode\u003ea++\u003c/code\u003eとしているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"二項演算子\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BA%8C%E9%A0%85%E6%BC%94%E7%AE%97%E5%AD%90\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e二項演算子\u003c/h2\u003e\n\n\u003cp\u003e二項演算子といえば\u003ccode\u003eoperator+=\u003c/code\u003eでしょうか。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e用例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e演算子の左辺が第一引数、右辺が第二引数になります。\u003c/p\u003e\n\n\u003cp\u003eこれも試しにC++のoperator overload風味に書いてみましょう。念の為に言いますが、コンパイルは通らない擬似コードです。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e擬似コード\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e第一引数は\u003ccode\u003eint\u0026amp;\u003c/code\u003e型ですから、\u003ccode\u003en\u003c/code\u003eは先の用例で言えば変数\u003ccode\u003ea\u003c/code\u003eの別名です。\u003ccode\u003en = n + 1\u003c/code\u003eによって\u003ccode\u003en\u003c/code\u003eが1加算され、その実体である\u003ccode\u003ea\u003c/code\u003eも1加算されています。\u003c/p\u003e\n\n\u003cp\u003e戻り値の型も\u003ccode\u003eint\u0026amp;\u003c/code\u003e型ですから、戻り値は変数\u003ccode\u003el\u003c/code\u003eの別名つまり変数\u003ccode\u003ea\u003c/code\u003eの別名です。\u003c/p\u003e\n\n\u003cp\u003e今回の場合、この演算子の呼出し場所では\u003ccode\u003ea++\u003c/code\u003eとしているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"前置後置のoperatoroperator--\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%89%8D%E7%BD%AE%E5%BE%8C%E7%BD%AE%E3%81%AEoperatoroperator--\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e前置/後置のoperator++/operator--\u003c/h2\u003e\n\n\u003cp\u003eどんな入門書にも載っている話ですが、operator++/operator--が前置と後置で挙動が変わる時があります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e結論から言うと、挙動が変わるのは演算子の戻り値を無視しなかった場合です\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/Iruyan_Zak\" class=\"user-mention js-hovercard\" title=\"Iruyan_Zak\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Iruyan_Zak\"\u003e@Iruyan_Zak\u003c/a\u003e 氏提供のコードを見てみましょう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include\u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d \"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// =\u0026gt; 10 11 12 13 14 15 16 17 18 19 \u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003ea = %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; a = 20\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d \"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// =\u0026gt; 11 12 13 14 15 16 17 18 19 20 \u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003ea = %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; a = 20\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d \"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// =\u0026gt; 10 11 12 13 14 15 16 17 18 19 \u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003ea = %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; a = 20\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d \"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// =\u0026gt; 11 12 13 14 15 16 17 18 19 20 \u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003ea = %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; a = 20\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/PW7zy2vtGO4F0ceY\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/PW7zy2vtGO4F0ceY\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003efor文のインクリメントを前置(1つ目と2つ目のfor文)後置(3つ目と4つ目のfor文)の2パターンありますが、出力結果が変わっていないことからもわかるように差は出ません。これは演算子の戻り値を利用していないからです。\u003c/p\u003e\n\n\u003cp\u003e一方、1・3つ目のfor文と2・4つ目のfor文では出力結果が違います。この時演算子の戻り値をprintf関数の第2引数に渡しています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e擬似コード\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e//前置\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//後置\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"cm\"\u003e/*前置のopeartorと区別するためのただのフラグ*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこのため挙動が変わりました。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数ポインタを学ぶためにポインタを復習する\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E5%AD%A6%E3%81%B6%E3%81%9F%E3%82%81%E3%81%AB%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%92%E5%BE%A9%E7%BF%92%E3%81%99%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数ポインタを学ぶためにポインタを復習する\u003c/h1\u003e\n\n\u003cp\u003eポインタがなんとなくわかっている前提で以下話が進みます。\u003c/p\u003e\n\n\u003cp\u003eC言語のポインタといえば\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eいいや、その文法はおかしい\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//p2の型はint型！\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eに代表されるように変態的な文法を持ち初見殺しで有名です。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#define __STDC_FORMAT_MACROS\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;stdint.h\u0026gt;\n#include \u0026lt;inttypes.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003en_p\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003en_p\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%d, %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003en_p\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 4, 4\u003c/span\u003e\n    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4u\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"%\"\u003c/span\u003e\u003cspan class=\"n\"\u003ePRIu64\u003c/span\u003e\u003cspan class=\"s\"\u003e\",\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// =\u0026gt; 4,16,128,5461,7455630,11117283739380,131881619452552216,1047648503559532041,2037216899616901002,953656708591683993,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eputchar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sc\"\u003e'\\n'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/xSA3XWgSDYvXc8tW\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/xSA3XWgSDYvXc8tW\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ecallocの戻り値をなんでキャストしてないんだ？と思う人はあなたの脳内コンパイラがC89で止まっています。C99からvoid*型は他のポインタ型に暗黙変換されるようになりました。言うまでもなくC++では許容されません。\u003c/p\u003e\n\n\u003cp\u003e上の例では、ポインタ変数\u003ccode\u003en_p\u003c/code\u003eは変数\u003ccode\u003en\u003c/code\u003eを指し示しています。\u003cbr\u003e\nポインタ変数\u003ccode\u003ep\u003c/code\u003eは\u003ccode\u003ecalloc\u003c/code\u003e関数によって確保されたメモリー領域の先頭を指し示しています。\u003c/p\u003e\n\n\u003cp\u003e型を考えてみます。\u003cbr\u003e\nポインタ変数\u003ccode\u003en_p\u003c/code\u003eの型は\u003ccode\u003eint*\u003c/code\u003e型です。\u003ccode\u003eint\u003c/code\u003e型のメモリー領域を指しているのだから当たり前ですね。基本型が\u003ccode\u003eint\u003c/code\u003eでそこから派生するから\u003ccode\u003eint*\u003c/code\u003eになります。\u003cbr\u003e\nポインタ変数\u003ccode\u003ep\u003c/code\u003eの型は\u003ccode\u003euint64_t*\u003c/code\u003e型です。基本型が\u003ccode\u003euint64_t\u003c/code\u003eでそこから派生するから\u003ccode\u003euint64_t*\u003c/code\u003eになります。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eポインタは常に基本型から派生してできるわけですね。\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eポインタの型はポインタ演算をするのに必要になります。御存知の通り、\u003ccode\u003ep[i]\u003c/code\u003eは\u003ccode\u003e*(p + i)\u003c/code\u003eと等価ですが、\u003ccode\u003ep + i\u003c/code\u003eをするために必要な情報は何でしょうか？\u003cbr\u003e\n今回の場合、\u003ccode\u003ecalloc\u003c/code\u003eで確保したメモリー領域を\u003ccode\u003esizeof(uint64_t)\u003c/code\u003eずつに区切って認識します。なので例えば\u003ccode\u003ep + 1\u003c/code\u003eは\u003ccode\u003ep\u003c/code\u003eが指す場所から\u003ccode\u003esizeof(uint64_t)\u003c/code\u003eバイトずらした場所を返します。\u003cbr\u003e\nつまり、\u003cstrong\u003eポインタ演算をするためのメモリー領域の区切り単位を知るために型が必要なわけです\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eよく箱が連なった絵で説明されますが、あの箱の大きさを決めるわけですね。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"改めまして関数について\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%94%B9%E3%82%81%E3%81%BE%E3%81%97%E3%81%A6%E9%96%A2%E6%95%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e改めまして関数について\u003c/h1\u003e\n\n\u003cp\u003e前にざっくりと説明しましたが、もうすこし説明します。\u003cbr\u003e\n関数とは、処理の集合です。C/C++では、すべてのプログラムは必ず1つ以上の関数が含まれています。\u003cbr\u003e\nこれまで見てきたmain関数も関数の一つです。C言語においてとにかく大事なものです。そのくせ独習Cの説明は十分とは言えません、あれで説明してるつもりなんですかね。 \u003c/p\u003e\n\n\u003cp\u003e関数の一般的な書き方は\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"err\"\u003e戻り値の型\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e関数呼び出し規約\u003c/span\u003e\u003cspan class=\"n\"\u003eopt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"err\"\u003e関数名\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e仮引数リスト\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//処理\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eです。戻り値の型がvoid以外の時は、必ず戻り値を返さなければなりません。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e//これは誤り\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//do something\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//これは正しい\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//do something\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e関数の呼び出し規約は省略することが多いですが(その場合\u003ccode\u003e__cdecl\u003c/code\u003eになる)、Win32APIを使うならお世話になるだろし、C++のクラスのメンバー関数は呼び出し規約が更に異なります。\u003cbr\u003e\n詳しくは\u003ca href=\"http://vanya.jp.net/os/x86call/#section-8\" rel=\"nofollow noopener\" target=\"_blank\"\u003ex86アセンブリ言語での関数コール\u003c/a\u003eを参照してみてください。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003ecalc_volume\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003esi\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003es3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003evertical\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//縦\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ehorizontal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//横\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e//高さ\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecalc_volume\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evertical\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehorizontal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"体積は%fです\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003ecalc_volume\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003es3\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/2YLcbAs2zrhlcalv\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/2YLcbAs2zrhlcalv\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこのコードを例に、関数の呼びだし前後のスタックの様子について解説します。もちろんスタックなんて言葉はC規格書に出てきませんが、抽象的な話ばかりしても仕方ないので。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8f8d0e14df0cfc15597516898df50dd7\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8f8d0e14df0cfc15597516898df50dd7\" alt=\"stack_area.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/71901816-3666-9ed2-097d-18fe5cb9a37e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=269b4a0633dce69b0db3fb5bd3672258 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e関数呼び出しは関数呼び出し規約にもよりますが、C/C++で一般的な\u003ccode\u003e__cdecl\u003c/code\u003eやC++のクラスメンバー関数で使われる\u003ccode\u003e__thiscall\u003c/code\u003eやWin32APIでよく見る\u003ccode\u003e__stdcall\u003c/code\u003eでは\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003emain関数が呼ばれるとき、スタック領域を確保する\u003c/li\u003e\n\u003cli\u003e引数を後ろから順に書き込む\u003c/li\u003e\n\u003cli\u003e復帰情報(リターンアドレスなど)を書き込む\u003c/li\u003e\n\u003cli\u003e関数の処理が始まって、変数が確保されたりする\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eのように処理が行われます。\u003c/p\u003e\n\n\u003cp\u003eさて、リターンアドレスとは何でしょうか。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数だってメモリー上にあるんだからポインタもあるでしょ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%81%A0%E3%81%A3%E3%81%A6%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%BC%E4%B8%8A%E3%81%AB%E3%81%82%E3%82%8B%E3%82%93%E3%81%A0%E3%81%8B%E3%82%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%82%E3%81%82%E3%82%8B%E3%81%A7%E3%81%97%E3%82%87\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数だってメモリー上にあるんだからポインタもあるでしょ\u003c/h1\u003e\n\n\u003cp\u003eさて、そもそもどうやってプログラムは実行されるのかというお話があります。\u003c/p\u003e\n\n\u003cp\u003eコンピュータが出た当初は、回路を組み替えて動作を変えていました。ハードウェアでプログラミングするんですね。\u003c/p\u003e\n\n\u003cp\u003eその後、幾つかの基本的な\u003cstrong\u003e命令\u003c/strong\u003eの並び順で動作を変えるという現代よく見るものが出てきました。この時この命令の順序はメモリーからloadするようになりました。\u003c/p\u003e\n\n\u003cp\u003eつまりですね、\u003cstrong\u003eプログラムの実体はメモリー上にあるわけです。メモリー上にあるんだから、普通の変数と何ら変わることなくポインタを取れます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffc9b46b8-a27f-6296-c6d5-2ee730a12ade.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4ae48d81a4285b008a9889dbfe5940a3\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffc9b46b8-a27f-6296-c6d5-2ee730a12ade.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=4ae48d81a4285b008a9889dbfe5940a3\" alt=\"memory_map.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/fc9b46b8-a27f-6296-c6d5-2ee730a12ade.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Ffc9b46b8-a27f-6296-c6d5-2ee730a12ade.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=7c958af2a076992c51be5465a6e5c045 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eこれは一般的な処理系のメモリーの様子を表したものです。メモリーの様子といっても「プログラムから見える」メモリーです。実際にはOSとCPUが連携してL1～L3キャッシュ、RAM、ページファイルに分散しています。 \u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e \u003cspan class=\"n\"\u003ea1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e \u003cspan class=\"n\"\u003ea2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e \u003cspan class=\"n\"\u003ea3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ea4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAnimal\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"a1:%p, a2:%p, a3:%p, a4:%p, a:%p, b:%p\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ea4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"puts:%p\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/SryVguuDFHq5nSx0\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/SryVguuDFHq5nSx0\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"plain\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e実行例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003ea1:0x601068, a2:0x601050, a3:0x7ffce6a823e0, a4:0x7ff010, a:0x7ffce6a823dc, b:0x400860\nputs:0x400530\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e関数ポインタの\u003ccode\u003evoid*\u003c/code\u003eへのキャストはエラーになる環境もあるかもしれません(言語仕様上は関数ポインタは\u003ccode\u003evoid*\u003c/code\u003eよりも大きい幅である可能性がある)。\u003c/p\u003e\n\n\u003cp\u003e関数ポインタが指し示すのはプログラムの実体があるメモリー領域です。\u003c/p\u003e\n\n\u003cp\u003eここで抑えておかないといけないことがあります。\u003cbr\u003e\n関数、つまりその処理の手順ももちろんメモリー上にあるのですが、処理過程でつかう変数とは明確にべつの領域にあります。\u003cbr\u003e\nもう一度言います、コードとデータは別です。 \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8f8d0e14df0cfc15597516898df50dd7\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=8f8d0e14df0cfc15597516898df50dd7\" alt=\"stack_area.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/71901816-3666-9ed2-097d-18fe5cb9a37e.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2F71901816-3666-9ed2-097d-18fe5cb9a37e.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=269b4a0633dce69b0db3fb5bd3672258 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eここで思い出して欲しいのがこの図です。\u003c/p\u003e\n\n\u003cp\u003e関数を呼ぶときは、引数、returnアドレス、ebpがスタックに積まれ、そのあと関数が実行され適宜関数内の自動変数がスタックに積まれるのでした。\u003c/p\u003e\n\n\u003cp\u003ereturnアドレスとは他でもなくコード領域へのポインタです。もう少し言うと関数を呼び出し実行が終わったあと実行する命令があるコード領域のアドレスです。\u003c/p\u003e\n\n\u003cp\u003ecf.)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.ipa.go.jp/security/awareness/vendor/programmingv1/b06_01.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e6-1. バッファオーバーラン　その１「こうして起こる」 | IPA ISEC セキュアプログラミング講座\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://hack.ninja-web.net/academy003-060.htm\" rel=\"nofollow noopener\" target=\"_blank\"\u003eスタック領域の構成 | 分かりやす～いコンピュータ技術情報\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"関数ポインタ\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E9%96%A2%E6%95%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e関数ポインタ\u003c/h1\u003e\n\n\u003cp\u003e極めて変態的な文法の理解が必要な関数ポインタですが、C++11の力を借りればいくらかわかりやすくなります。\u003c/p\u003e\n\n\u003cp\u003eまず\u003cstrong\u003e関数ポインタは関数型から派生してできるので当然関数ポインタにも型があります\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eC標準関数である\u003ccode\u003eputs\u003c/code\u003e関数を見てみましょう。\u003cbr\u003e\n\u003ccode\u003eputs\u003c/code\u003e関数のプロトタイプ宣言は\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eputs\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eです。型は\u003ccode\u003eint(const char*)\u003c/code\u003eですね。さてそれへのポインタ型なので\u003ccode\u003eint(*)(const char*)\u003c/code\u003eになります。\u003ccode\u003eint*(const char*)\u003c/code\u003eではないですよ？それは\u003ccode\u003econst char*\u003c/code\u003eを受け取り\u003ccode\u003eint*\u003c/code\u003eを返す関数型ですからね。では利便性のためにtypedefしましょう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003etypedefしてみた\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"nf\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eputs_t\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまるでわからん。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++11でalias_declarationを使ってみた\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eputs_t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eわかりやすい。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e//int puts ( const char * str );//型はint(const char*)\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"nf\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eputs_t1\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003eputs_t2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//C++11:alias declaration\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eputs_t1\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eputs_t2\u003c/span\u003e \u003cspan class=\"n\"\u003ef3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eputs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"f1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"f2\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ef3\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"f3\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/aTTSo4orMwg6OiMi\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/aTTSo4orMwg6OiMi\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"あなたはこの型を答えられるか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%82%E3%81%AA%E3%81%9F%E3%81%AF%E3%81%93%E3%81%AE%E5%9E%8B%E3%82%92%E7%AD%94%E3%81%88%E3%82%89%E3%82%8C%E3%82%8B%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eあなたはこの型を答えられるか\u003c/h1\u003e\n\n\u003cp\u003eさて、なんとなくわかってきたところで、ちょっとクイズをしましょう。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"第一問\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%AC%AC%E4%B8%80%E5%95%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e第一問\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e第1引数が\u003ccode\u003evoid*\u003c/code\u003e型、第2引数が\u003ccode\u003ebool\u003c/code\u003e型で\u003ccode\u003evoid*\u003c/code\u003e型を返す呼び出し規約が\u003ccode\u003e__stdcall\u003c/code\u003eの関数へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eC++11のalias declarationで答えを書くと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003e__stdcall\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとなります。ちなみにtypedefで書くと\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003e__stdcall\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eうーむ。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"第二問\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%AC%AC%E4%BA%8C%E5%95%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e第二問\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e第1引数が\u003ccode\u003econst char*\u003c/code\u003e型、第2引数が\u003ccode\u003esize_t\u003c/code\u003e型、第3引数が、第一引数\u003ccode\u003echar\u003c/code\u003e型、第2引数に\u003ccode\u003esize_t\u003c/code\u003e型を受け取り\u003ccode\u003ebool\u003c/code\u003e型を返す関数へのポインタ型で、\u003ccode\u003econst char*\u003c/code\u003e型を返す関数へのポインタ型の要素数3の配列の要素数2の配列型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eC++11のalias declarationを使いながらちょっと解釈していきましょう。\u003c/p\u003e\n\n\u003cp\u003eまず、\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e第一引数\u003ccode\u003echar\u003c/code\u003e型、第2引数に\u003ccode\u003esize_t\u003c/code\u003e型を受け取り\u003ccode\u003ebool\u003c/code\u003e型を返す関数へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこうですね。次に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e第1引数が\u003ccode\u003econst char*\u003c/code\u003e型、第2引数が\u003ccode\u003esize_t\u003c/code\u003e型、第3引数が、第一引数\u003ccode\u003echar\u003c/code\u003e型、第2引数に\u003ccode\u003esize_t\u003c/code\u003e型を受け取り\u003ccode\u003ebool\u003c/code\u003e型を返す関数へのポインタ型で、\u003ccode\u003econst char*\u003c/code\u003e型を返す関数へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。最後に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e第1引数が\u003ccode\u003econst char*\u003c/code\u003e型、第2引数が\u003ccode\u003esize_t\u003c/code\u003e型、第3引数が、第一引数\u003ccode\u003echar\u003c/code\u003e型、第2引数に\u003ccode\u003esize_t\u003c/code\u003e型を受け取り\u003ccode\u003ebool\u003c/code\u003e型を返す関数へのポインタ型で、\u003ccode\u003econst char*\u003c/code\u003e型を返す関数へのポインタ型の要素数3の配列の要素数2の配列型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ea1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef2\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。さて、alias declarationを使わないで表せそうですか？\u003c/p\u003e\n\n\u003cp\u003e答えは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e答え\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e])(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eでした。まあそこまで難しくはないですね。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/DZESins3ZM6xxdaX\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/DZESins3ZM6xxdaX\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"第三問\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%AC%AC%E4%B8%89%E5%95%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e第三問\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://togetter.com/li/262116\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://togetter.com/li/262116\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eより。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eC++11のalias declarationを使いながらちょっと解釈していきましょう。\u003c/p\u003e\n\n\u003cp\u003eまず\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eint を引数に取り、char を返す関数へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。次に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。最後に\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型へのポインタ型\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eですね。さて、alias declarationを使わないで表せそうですか？\u003c/p\u003e\n\n\u003cp\u003e答えは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e])(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eでした。えげつねぇ。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/B3pyUAPjMnaYv3sF\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/B3pyUAPjMnaYv3sF\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"clockwisespiral-ruleで型を読む\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#clockwisespiral-rule%E3%81%A7%E5%9E%8B%E3%82%92%E8%AA%AD%E3%82%80\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eClockwise/Spiral Ruleで型を読む\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita.com/pgm_nemui/items/b7d14ff6203565f9e35f\" id=\"reference-94081926bfda99c3814e\"\u003e\"Clockwise/Spiral Rule''を使ってC言語の「例の宣言」に挑む\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという記事で詳しく解説されています。これを使えば\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"c\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e[])())();\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのような宣言も読み解けますね！\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c3つ実は2つある関数の仲間\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c3%E3%81%A4%E5%AE%9F%E3%81%AF2%E3%81%A4%E3%81%82%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E4%BB%B2%E9%96%93\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++]3つ(実は2つ)ある関数の仲間\u003c/h1\u003e\n\n\u003cp\u003e関数の引数に関数を渡したいということはままあるわけですが、Cではそういう時関数ポインタを使いました。\u003ccode\u003eqsort\u003c/code\u003e関数が有名ではないでしょうか。\u003c/p\u003e\n\n\u003cp\u003eC++においては選択肢が3つになります\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e関数ポインタ\u003c/li\u003e\n\u003cli\u003e関数オブジェクト(function-like class)\u003c/li\u003e\n\u003cli\u003elambda\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e実はlambdaは関数オブジェクトとほぼ同じだったりするんですが一応分けておきます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c関数オブジェクトとは\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E9%96%A2%E6%95%B0%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%A8%E3%81%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++]関数オブジェクトとは\u003c/h1\u003e\n\n\u003cp\u003eご存知の通りC++にはクラスがあり、またoperator overlaodがあるわけですが、こんなクラスを考えてみましょう\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eこれは\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"c1\"\u003e// int型\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e','\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eF\u003c/span\u003e\u003cspan class=\"p\"\u003e{}()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3,3\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eのように使用します。\u003c/p\u003e\n\n\u003cp\u003e上で\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e関数名のあとに\u003ccode\u003e()\u003c/code\u003eを書き、その中に実引数を書くことで関数を呼び出せるのでした。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eと書きましたが、\u003ccode\u003eopoerator()\u003c/code\u003eはこれを実現できるものです。おなじ書き方で\u003ccode\u003eopoerator()\u003c/code\u003eを呼ぶことができるので関数オブジェクトないし、function-like classと呼ばれます。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003e使用例_マイナンバーのcheck_digitを求める\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;utility\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;numeric\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;stdexcept\u0026gt;\n#include \u0026lt;cstdint\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eaccumulate_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"nf\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"n.digit must be 11\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"sc\"\u003e'9'\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"in function calc_check_digit_yumetodo : iregal charactor detect.(\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eaccumulate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erbegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"n\"\u003eaccumulate_impl\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"12345678901\"\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/r6keQwuWYS5pbhpW\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/r6keQwuWYS5pbhpW\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c11lambda式\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c11lambda%E5%BC%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++11]lambda式\u003c/h1\u003e\n\n\u003cp\u003e他の言語でも最近lambda式と言われるものを導入するのが流行りらしいですが、\u003cstrong\u003eC++におけるlambda式とは\u003c/strong\u003e、先ほど紹介した\u003cstrong\u003e関数オブジェクトを自動生成させるシンタックスシュガーです\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++11lambda\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;utility\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;numeric\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;stdexcept\u0026gt;\n#include \u0026lt;cstdint\u0026gt;\n\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"nf\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"n.digit must be 11\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"sc\"\u003e'9'\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"in function calc_check_digit_yumetodo : iregal charactor detect.(\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eaccumulate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erbegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"12345678901\"\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/g4uKUnbPjiw33rYW\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/g4uKUnbPjiw33rYW\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eC++14lambda\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;utility\u0026gt;\n#include \u0026lt;iostream\u0026gt;\n#include \u0026lt;numeric\u0026gt;\n#include \u0026lt;string\u0026gt;\n#include \u0026lt;stdexcept\u0026gt;\n#include \u0026lt;cstdint\u0026gt;\n\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"nf\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"n.digit must be 11\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"sc\"\u003e'9'\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eruntime_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"in function calc_check_digit_yumetodo : iregal charactor detect.(\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"sc\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"kt\"\u003euint8_t\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eaccumulate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erbegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e \u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"sc\"\u003e'0'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecalc_check_digit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"12345678901\"\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 8\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/50FYzl1kiUvgXC1X\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/50FYzl1kiUvgXC1X\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estd::accumulate\u003c/code\u003eの第4引数に渡しているのがlambdaです。関数オブジェクトの処理内容を別の場所に書く必要がなくなるため、処理の流れの一覧性があがり、可読性が向上します。\u003c/p\u003e\n\n\u003cp\u003eその詳細は、C++界隈では有名な江添さんががっつり記事を書いているので\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2009/11/lambda.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003elambda 完全解説 | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2009/12/lambda.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eシンタックスシュガーとしてのlambdaの解説 | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2014/09/c14-lambda_30.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++14の新機能: ジェネリックlambda | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2014/09/c14-lambda.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++14の新機能: 初期化lambdaキャプチャー | 本の虫\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eを全部読んでいただくとして、簡単に触れます。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://cpplover.blogspot.jp/2009/11/lambda.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003elambda 完全解説 | 本の虫\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003elambdaの文法解説\u003cbr\u003e\nでは、詳しい解説をして行きたいと思う。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[]\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//  [ lambda-capture ]\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e()\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//  ( parameter-declaration-clause )\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//  compound-statement\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e()\u003c/span\u003e  \u003cspan class=\"c1\"\u003e//  Function call expression\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eまず、一番始めの[]は、lambda-introducerという。[]のなかには、lambda-captureを記述できる。これについては、後に解説する。\u003cbr\u003e\n二番目は、関数の引数の定義である。通常の関数で、void f(int a, int b) などと書く引数と、まったく同じである。\u003cbr\u003e\n三番目は、関数の本体である。通常の関数と同じく、実際のコードはこの中に書く。\u003cbr\u003e\n四番目は、関数呼び出しである。これも、通常の関数とまったく変わらない。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e先程も言ったようにlambdaは関数オブジェクトを自動生成させるシンタックスシュガーに過ぎないので、\u003cstrong\u003elambda式が書かれているスコープで有効な自動変数\u003c/strong\u003eはそのままではlambda式内では使えません。逆に言えば関数の外で有効な変数、例えば関数の外で宣言・定義されているstatic変数とかは使えるわけですが。\u003c/p\u003e\n\n\u003cp\u003eで、lambda式が書かれているスコープで有効な自動変数をlambda式内で使うためには、\u003ccode\u003elambda-capture\u003c/code\u003eというものを使います。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e//struct F1{ int operator()(){ return a; } };//error:aは未定義\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()(){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprivate:\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eref\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eref\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()(){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eF2\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e()(){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//int r1_1 = F1{}();//error\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e//int r1_2 = [](){ return a; }();//error:aは未定義\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er2_1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_copy\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er2_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e](){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK:copy caputure\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er3_1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eF1_ref\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er3_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e](){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK:reference caputure\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e](){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK:自動変数のうち、odr-usedになったもの全てがcopy caputureされる\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e](){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK:自動変数のうち、odr-usedになったもの全てがreference caputureされる\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er6_1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[](){\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK:captureは不要\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er6_2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eF2\u003c/span\u003e\u003cspan class=\"p\"\u003e{}();\u003c/span\u003e\u003cspan class=\"c1\"\u003e//OK\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"a:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"b:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"c:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 4\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r2_1:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er2_1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r2_2:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er2_2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r3_1:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er3_1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r3_2:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er3_2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r4  :\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er4\u003c/span\u003e   \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r5  :\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er5\u003c/span\u003e   \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 3\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r6_1:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er6_1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 2\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\"r6_2:\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er6_2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"c1\"\u003e// =\u0026gt; 2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/46VrZo6LkM1GQgXL\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/46VrZo6LkM1GQgXL\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003elambda-capture\u003c/code\u003eにはよく使うものとして参照キャプチャとコピーキャプチャがありますが、上の例で違いはわかっていただけるかなと思います。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[=]\u003c/code\u003eや\u003ccode\u003e[\u0026amp;]\u003c/code\u003eは自動変数のうち、\u003ccode\u003eodr-used\u003c/code\u003eになったもの全てを対象とするキャプチャですが、そもそも\u003ccode\u003eodr-used\u003c/code\u003eの説明が面倒な上に、個人的にlamdaでキャプチャしている自動変数は明示したほうが可読性が上がると思っているので、私は一個一個\u003ccode\u003elambda-capture\u003c/code\u003eに書くようにしています。\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eodr-used\u003c/code\u003eについては\u003cbr\u003e\n\u003ca href=\"http://fimbul.hateblo.jp/entry/2014/12/11/000123\" rel=\"nofollow noopener\" target=\"_blank\"\u003eリンク時に関連するルールの話 - ここは匣\u003c/a\u003e\u003cbr\u003e\nを見てください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cなぜcerは関数ポインタではなく関数オブジェクトを使うか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c%E3%81%AA%E3%81%9Ccer%E3%81%AF%E9%96%A2%E6%95%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8F%E9%96%A2%E6%95%B0%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%BF%E3%81%86%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++]なぜC++erは関数ポインタではなく関数オブジェクトを使うか\u003c/h1\u003e\n\n\u003cp\u003e結論から言うと関数ポインタは重いからです。\u003c/p\u003e\n\n\u003cp\u003e関数ポインタは関数の命令開始位置のアドレスを保持するものでしたが、このアドレスは\u003cstrong\u003e実行時にしかわかりません\u003c/strong\u003e。コンパイル時にどの関数を使うか見抜き、関数をinline展開する最適化をするのは、極めて難易度が高く、現存する殆どのコンパイラはほとんどの関数ポインタをinline展開しません。\u003c/p\u003e\n\n\u003cp\u003eこれに対して関数オブジェクトは一つ一つが別のクラスです。lambdaの場合も一つ一つすべて固有の名前のクラスになります。なのでその関数オブジェクトかの区別は\u003cstrong\u003e型レベルでわかるので、コンパイル時にわかります\u003c/strong\u003e。つまりコンパイラは関数オブジェクトをinline展開しやすくなります。\u003c/p\u003e\n\n\u003cp\u003e前にも見たように\u003cstrong\u003e関数を呼び出すというのは\u003c/strong\u003eいろいろな手順を経て呼び出されるので\u003cstrong\u003e時間がかかります\u003c/strong\u003e。inline展開するかはコンパイラが実行速度と実行ファイルの大きさのトレードオフで決定しますが、\u003cstrong\u003einline展開されれば一般にその分高速化できます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003e故にC++erは関数ポインタより関数オブジェクトを好むわけです。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"cstdfunctionはなぜあまり使われないか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#cstdfunction%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%82%E3%81%BE%E3%82%8A%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%AA%E3%81%84%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++]std::functionはなぜあまり使われないか\u003c/h1\u003e\n\n\u003cp\u003eC++で関数といえば\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e関数ポインタ\u003c/li\u003e\n\u003cli\u003e関数オブジェクト(function-like class)\u003c/li\u003e\n\u003cli\u003elambda\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eの3つ(実は2つ)あると話しましたが、これを統一的に扱いたいことがあります。そこで登場するのが\u003ccode\u003estd::function\u003c/code\u003eです。\u003c/p\u003e\n\n\u003cp\u003e使い方はただでさえ長いこの記事をこれ以上肥大化させても仕方ないので\u003cbr\u003e\n\u003ca href=\"http://cpprefjp.github.io/reference/functional/function.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003efunction - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://torini.hateblo.jp/entry/2015/03/22/%E9%96%A2%E6%95%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%88%E3%82%8A%E3%82%82std%3A%3Afunction%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\" rel=\"nofollow noopener\" target=\"_blank\"\u003e関数ポインタよりもstd::functionを使おう - ぷろみん\u003c/a\u003e\u003cbr\u003e\nにまるなげします。\u003c/p\u003e\n\n\u003cp\u003eで、こいつ重いです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.ngc.is.ritsumei.ac.jp/%7Ehossy/2015/07/c11-auto%E3%81%AFstdfunction%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F/\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++11 autoはstd::functionより高速 – Hossy\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eなぜかというと、統一的に扱うために内部でキャストを多用して型消去しているからです。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://faithandbrave.hateblo.jp/entry/20080220/1203498818\" rel=\"nofollow noopener\" target=\"_blank\"\u003eBoost.Functionの実装技術(1) - Type Erasure - Faith and Brave - C++で遊ぼう\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://faithandbrave.hateblo.jp/entry/20080221/1203593091\" rel=\"nofollow noopener\" target=\"_blank\"\u003eBoost.Functionの実装技術(2) - タグディスパッチ - Faith and Brave - C++で遊ぼう\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eに実装例が出ていますが、なんかすごいですね(小並感)。\u003c/p\u003e\n\n\u003cp\u003e前節で解説したとおり、関数オブジェクトは\u003cstrong\u003e型レベルで関数を区別していたのでコンパイル時にどの関数かわかり\u003c/strong\u003eコンパイラはinline展開しやすかったので高速化に繋がるのでした。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e型消去してしまってはその利点は消え去ってしまいます\u003c/strong\u003e。\u003c/p\u003e\n\n\u003cp\u003eで、そんな\u003ccode\u003estd::function\u003c/code\u003eですが、出番が無いかというとそんなことはなく、例えば関数の配列を作るようなときは、まあ\u003ccode\u003estd::tuple\u003c/code\u003eでもしかしたら頑張れるのかもしれませんが、こいつを使うほうがはるかに楽に可読性も高く実装できます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c11constexpr関数は市民の義務です\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c11constexpr%E9%96%A2%E6%95%B0%E3%81%AF%E5%B8%82%E6%B0%91%E3%81%AE%E7%BE%A9%E5%8B%99%E3%81%A7%E3%81%99\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++11]constexpr関数は市民の義務です\u003c/h1\u003e\n\n\u003cp\u003eというタイトルで書こうと思ったんですが、constexpr関数の解説なんて私にできるわけもない。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e解説には\u003ca href=\"https://twitter.com/bolero_MURAKAMI\" rel=\"nofollow noopener\" target=\"_blank\"\u003e岡山の陶芸家(中３女子)\u003c/a\u003eが必要やろ！\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eというわけで参考リンクだけ貼っておきます\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://cpprefjp.github.io/lang/cpp11/constexpr.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003econstexpr - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003econstexprの制限緩和 - cpprefjp C++日本語リファレンス\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.slideshare.net/GenyaMurakami/onstexprcpu\" rel=\"nofollow noopener\" target=\"_blank\"\u003eｃonstexpr関数はコンパイル時処理。これはいい。実行時が霞んで見える。cpuの嬌声が聞こえてきそうだ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cpplover.blogspot.jp/2013/04/constexpr.html\" rel=\"nofollow noopener\" target=\"_blank\"\u003e本の虫: 最新のconstexpr\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://boleros.hateblo.jp/entry/20130718/1374155184\" rel=\"nofollow noopener\" target=\"_blank\"\u003eリテラル型クラスの条件、および「中３女子でもわかる constexpr」の訂正 - ボレロ村上 - ENiyGmaA Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://boleros.hateblo.jp/entry/20130604/1370364968\" rel=\"nofollow noopener\" target=\"_blank\"\u003eC++11の糞仕様と戦ってアクセッサをconstexprにする - ボレロ村上 - ENiyGmaA Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://boleros.hateblo.jp/entry/2014/12/24/065155\" rel=\"nofollow noopener\" target=\"_blank\"\u003eコンパイル時Brainfuckコンパイラ ――C++14 constexpr の進歩と限界―― - ボレロ村上 - ENiyGmaA Code\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"終わりに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e終わりに\u003c/h1\u003e\n\n\u003cp\u003eはじめはC言語初心者向けに記事を書いていたのだが、そもそも関数は初心者向けの機能ではなかったことを思い出し、初心者向けに書くのを諦めた。\u003c/p\u003e\n\n\u003cp\u003e結果どういうわけかすごく長い記事になった。\u003c/p\u003e\n\n\u003cp\u003eここでこの記事の冒頭を見よう\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e今回はのんびりまったりを目指します。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e無理でした。途中まではまったり書いていたけど途中から指数関数的に疾走する記事になりました。\u003c/p\u003e\n\n\u003cp\u003eこの記事を書くきっかけをくれた\u003ca href=\"https://twitter.com/stoneriver213p\" rel=\"nofollow noopener\" target=\"_blank\"\u003eリーマ氏\u003c/a\u003eと\u003ca href=\"https://twitter.com/Iruyan_Zak\" rel=\"nofollow noopener\" target=\"_blank\"\u003eいるやん氏\u003c/a\u003eに感謝しつつこの記事を終わることにする。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"反響\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%8F%8D%E9%9F%BF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e反響\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e引数の後ろからスタックに積んでいくあたりでマサカリに手が伸びたが、標準でレジスタ渡しな環境がーとか言ってると収集付かなくなるのは分かってるのでそっと戻し。\u003c/p\u003e— yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/774518357731094528\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年9月10日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eうん、まあね、抽象的なことばっか言っても始まらんしね。\u003c/p\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e深淵までって書いてあるからHaskellとかScalaとかElixirとかに話が飛ぶかと思ったけどC++までだった \u003ca href=\"https://t.co/s4S3PyFBb4\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/s4S3PyFBb4\u003c/a\u003e\u003c/p\u003e— 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/774530809743028224\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年9月10日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHaskellについては\u003cbr\u003e\n\u003ca href=\"http://qiita.com/kazatsuyu/items/d1c9b97d92af89c4cca0\" id=\"reference-82d08f2b65637a7da3a1\"\u003e自称C++中級者がHaskell初心者になってみる話\u003c/a\u003e\u003cbr\u003e\nへどうぞ\u003c/p\u003e\n","body":"# はじめに\n\nタイトルが中二病ですみません。みなさま、[ナマステ](http://www.nicovideo.jp/user/37896001)。さて、この記事のタイトルを見て、「時代・・・サトウキビ・・・[忍者](http://www.nicovideo.jp/user/5006073)・・・うぅ、頭が」となった人は私と趣味が似ています・・・って話はどうでもいいか。\n\n駆け抜けるシリーズ第二弾です。第一弾は[C99からC++14を駆け抜けるC++講座](http://qiita.com/yumetodo/items/e49a673afd9a3ecb81a8)という、超速度で情報が押し寄せる疾走感あふれる記事でしたが、今回はのんびりまったりを目指します。\n\n今回のテーマは関数です。CでもC++でも(他の言語でも)ありますが、[Re:ゼロから始める異世界生活](http://re-zero-anime.jp/)じゃない、Re:ゼロから始める関数講座をやっていきます。\n\n# ありきたりな世界\n\nまあみなさん、一度はありきたりな世界を標準出力に出力するプログラムを書いたことがあると思います。\n\n```c:C\n#include \u003cstdio.h\u003e\nint main(void)\n{\n    puts(\"arikitari_na_world!\");\n    return 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/3JRG4BnvINThrqpP\n\n```cpp:C++\n#include \u003ciostream\u003e\nint main()\n{\n    std::cout \u003c\u003c \"arikitari_na_world!\" \u003c\u003c std::endl;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/eQFQiAtolc1ucUCs\n\n復習ですが、CでもC++でも``main``関数からプログラムは始まるのでした(freestanding environmentを除く)。\n\n# 関数の宣言と定義\n\nとりあえず、int型の値を受け取り、2で割った値をint型で返す関数fを考えましょう。\n\nまずプロトタイプ宣言があります\n\n```c\nint f(int);\n//int f(int n);//どっちでもいい\n```\n\nここで関数の型が``int (int)``だとわかります。``()``の中は仮引数です。\n\n次に定義します\n\n```c\nint f(int n)\n{\n    return n / 2;\n}\n```\n\nちなみにヘッダーファイルなど、複数の翻訳単位でincludeされるファイルに宣言と定義を書くときは\n\n```c\nstatic inline int f(int n)\n{\n    return n / 2;\n}\n```\n\n``static``とC99で導入された``inline``をつけましょう。それを忘れると\n\n```sh\n$ make\nScanning dependencies of target Main\n[ 33%] Building C object CMakeFiles/Main.dir/main.c.obj\n[ 66%] Building C object CMakeFiles/Main.dir/b.c.obj\n[100%] Linking C executable Main.exe\nCMakeFiles/Main.dir/objects.a(b.c.obj):b.c:(.text+0x0): multiple definition of `f'\nCMakeFiles/Main.dir/objects.a(main.c.obj):main.c:(.text+0x0): first defined here\ncollect2.exe: error: ld returned 1 exit status\nmake[2]: *** [CMakeFiles/Main.dir/build.make:122: Main.exe] エラー 1\nmake[1]: *** [CMakeFiles/Makefile2:68: CMakeFiles/Main.dir/all] エラー 2\nmake: *** [Makefile:84: all] エラー 2\n```\n\n``multiple definition of `f'``と怒られます。``static``をつけて内部リンゲージにしましょう。\n\n~~GCCの``-std=gnu89``で追加されるinlineがなかった頃の独自拡張のinlineについて語ってはいけない。``extern inline``しないと行けないんだぜ~~\n\ncf.)\n\n- [ヘッダーファイルで関数の定義 - 遅咲きのエンジニア](http://d.hatena.ne.jp/kabakiyo/20130304/1362369064)\n- [[C++]そのinline、大丈夫？](http://qiita.com/kktk-KO/items/075ce9a784d5d8296d53)\n\n# 関数の呼び出し\n\n```c\nstatic int f(int n){ return n / 2; }\nint main(void)\n{\n    f(4);\n    return 0;\n}\n```\n\n例えばこんな例を考えましょう。\n\n関数名のあとに``()``を書き、その中に実引数を書くことで関数を呼び出せるのでした。\n\n# 関数の戻り値を無視するとは\n\nまあ余談ですが。\n\n```c\n#include \u003cstdio.h\u003e\nstatic int f(int n){ return n / 2; }\nstatic int g(int n)\n{\n    return f(n);//関数fの戻り値を利用している\n}\nint main(void)\n{\n    int a = f(7);//関数fの戻り値を使って変数aを初期化している\n    a = g(2);//関数gの戻り値を変数aに代入している\n    f(4);//関数fの戻り値を無視している\n    printf(\"%d, %d\", f(2), a);//関数fの戻り値をprintf関数の第2引数に渡している\n    return 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/KH421VKlOvm8RuFX\n\n関数``f``や関数``g``は定義から明らかなように戻り値を返しますが、関数の呼び出し側で利用しないことももちろんできます。\n\nなおC++17では、``nodiscard attribute``というものが導入されまして\n\n```cpp:C++17\n[[nodiscard]] int fn() { return 2; }\n\nint main() {\n    fn(); // warning\n}\n```\n\n戻り値を無視するとコンパイラに怒られるようにできるようになりました。ライブラリ側が、エラー処理の関係などで戻り値を無視してほしくない時に使います。\n\ncf.) [久々なのでC++17の情報を集めてみる](http://qiita.com/kazatsuyu/items/1d46b85f08c6e9a8bcaf#nodiscard)\n\n# 関数の型とは何かを関数の呼び出し機構を見ながら\n\n先ほど\n\n\u003eここで関数の型が``int (int)``だとわかります。\n\nとあっさり書きましたが、関数の型とはなんでしょうか？\n\nその前に変数の型を考えましょう。\n\n```c\nint main(void)\n{\n    int n;\n}\n```\n\nこの記事の読者なら、変数``n``の型が``int``型だとすぐに分かるはずです。\n\n**型の役割は、語弊を恐れずに言えば、メモリー上にどのようにデータを配置するかです。**\n\nこの場合は自動変数領域にint型ひとつ分のメモリーを確保し、そこに``n``という名前をつけたわけです。\n\nでは関数の型はどうかを見ていきましょう。\n\nで、普通自動変数領域はスタックというデータ構造を使うので、(規格書にはそんなことは書いていないけど)以下その仮定で話を進めます。\n\n```c\nstatic int f(int n){ return n / 2; }\nint main(void)\n{\n    f(4);\n    return 0;\n}\n```\n\nもう一度確認すると関数``f``の型は``int(int)``型です。main関数内で``f(4)``とありますが、これはまず``f()``から関数呼び出しだとわかり、``4``とあるので引数は一つで型はint型です。\nなので``static int f(int n){ return n / 2; }``が見つかります。\n\nさて関数を呼び出しましょう。もっと実際には複雑ですがそれは後述するとします。\n\n1. 戻り値の型はint型ですからstackに戻り値を書き込むためのint型ひとつ分のメモリーを確保します(x86アーキテクチャだとレジスタを使うらしいです)\n2. 引数を後ろからスタックに積んでいきます。今回は引数は一つでint型なのでint型ひとつ分のメモリーを確保し、4を代入します。\n3. 関数f内に処理が移ります\n4. ``return n / 2``とあるので、``n / 2``の演算結果を1で確保したメモリー領域に代入します\n5. main関数に処理が戻ります。\n\n大事な事があります。**関数を呼び出すときは呼び出し元のスタックに戻り値を保存する無名の一時的な変数が作られるということです。**\n\n# 関数の型に含まれる情報\n\nさて、なんとなく関数の方の役割がわかったのではないでしょうか？\n\n関数の型に含まれる情報は\n\n- 戻り値の型\n- 引数の個数と型\n- 関数呼び出し規約\n\nが含まれていて、関数を呼び出すのに不可欠なものです。\n(関数呼び出し規約は後述します)\n\n# lvalueとrvalue\n\n左辺値とか右辺値とかいう言葉を聞いたことがあるかもしれませんが忘れましょう。Cではいいんですが、C++をやるときに理解を妨げます。\n\n\u003e[rvalue reference 完全解説 | 本の虫](https://cpplover.blogspot.jp/2009/11/rvalue-reference_23.html)\n\n\u003e**誤解を恐れずにいえば、lvalueとは、明示的に実体のある、名前付きのオブジェクトであり、rvalueとは、一時的に生成される無名のオブジェクトである。**\n\n\u003e```cpp:C++\nstruct X{} ;\nint f() { return 0 ; }\nint main()\n{\n    int i = 0 ;\n    i ;     // lvalue\n    0 ;     // rvalue\n    X x ;\n    x ;     // lvalue\n    X() ;   // rvalue\n    f() ;   // rvalue\n}\n```\n\n\u003e上記のコードを読めば、lvalueとrvalueの違いが、なんとなく分かってくれる事と思う。lvalueはrvalueに変換できるが、その逆、rvalueをlvalueに変換することは出来ない。\n\n\n先ほど、関数を呼び出すときは呼び出し元のスタックに戻り値を保存する**無名の一時的な**変数が作られる、と言いましたが、これはrvalueに分類できますね。\n\n# [C++]Referenceとは\n\n参照、と言ったほうが聞いたことがあるかもしれません。**Referenceとはすでにある値に対し別名をつける機能です。**\nで、Referenceですが、大きくわけてlvalue referenceとrvalue referenceがあります。\n\n```cpp:lvalue_referenceの例\n#include \u003ciostream\u003e\nint main()\n{\n    int a = 3;\n    int\u0026 a_r = a;//a_rはaの別名\n    std::cout \u003c\u003c a \u003c\u003c ',' \u003c\u003c a_r \u003c\u003c std::endl;// =\u003e 3,3\n}\n```\n\nhttp://melpon.org/wandbox/permlink/W3VSr1JBS6uTdVcG\n\nで、この2つにどんな差があるのか、ですが、参照できるものの型を除けば**なにも違いはありません**。よくrvalue referenceはlvalue referenceと全く異なる、と考えて違いを考えすぎるあまり、わけわかめになる人がいますが、Referenceには違いないのです。\n\n| 種類                              | 参照できるもの |\n|-----------------------------------|----------------|\n| lvalue reference(T\u0026)              | lvalue         |\n| const lvalue rederence(const T\u0026)  | **なんでも**   |\n| rvalue reference (T\u0026\u0026)            | rvalue         |\n| const rvalue reference(const T\u0026\u0026) | const rvalue   |\n\n```cpp:Referenceの例\nstruct Test{\n\tint e;\n};\nconst Test make_Test(){ return Test(); }\nint main()\n{\n\tint a = 0;\n\tconst int b = 2;\n\tTest t;\n\tint\u0026 a_lr = a;\n\tconst int\u0026 a_clr = a;//OK\n\t//int\u0026 b_lr = b;//NG:暗黙にconstは外せない\n\tconst int\u0026 b_clr = b;//OK\n\tTest\u0026 t_lr = t;//OK\n\tTest\u0026\u0026 t_rr = Test();//OK\n\tconst Test\u0026 t_clr = Test();//OK\n\tconst Test\u0026\u0026 t_crr = make_Test();//OK\n\tconst Test\u0026 t_clr = make_Test();//OK\n\treturn 0;\n}\n```\n\nという感じで、``const lvalue reference``が無双というか最強なので、rvalue referenceはあまり出番がありません。\n\nもちろん関数の引数にも使えますし、戻り値にも使えます\n\n```cpp:lvalue_referenceの例2\n#include \u003ciostream\u003e\nint\u0026 f(int\u0026 n)\n{\n\t++n;\n\treturn n;\n}\nint main()\n{\n\tint n = 3;\n\tint n_r = f(n);\n\tstd::cout \u003c\u003c n \u003c\u003c ',' \u003c\u003c n_r \u003c\u003c std::endl;// =\u003e 4,4\n}\n```\n\nhttp://melpon.org/wandbox/permlink/AXxoaNG6Duc8ACz1\n\ncf.)\n\n- [C++マニアック,リファレンス＝参照の使い方,how to use reference,C++入門,C++言語講座](http://stlalv.la.coocan.jp/Reference.html)\n- [const rvalue referenceは何に使えばいいのか - ここは匣](http://fimbul.hateblo.jp/entry/2013/12/22/015912)\n\n# 演算子を関数のように解釈してみよう\n\nこれをやると純粋なC使いの皆さんから「C++を持ち込むんじゃねー」とまさかりを投げられるのですが、まあやってみましょう。\n\n## 前置の単項演算子\n\n前置の単項演算子といえば前置のoperator++ですね。\n\n```c:用例\nint a = 3;\n++a;\n```\n\n前置の単項演算子は引数が一つの関数と考えることができます。\n\n試しにC++のoperator overload風味に書いてみましょう。言うまでもなくコンパイルは通らない擬似コードです。\n\n```cpp:擬似コード\nint\u0026 operator++ (int\u0026 n)\n{\n    n = n + 1;\n    return n;\n}\n```\n\n第一引数は``int\u0026``型ですから、``n``は先の用例で言えば変数``a``の別名です。``n = n + 1``によって``n``が1加算され、その実体である``a``も1加算されています。\n\n戻り値の型も``int\u0026``型ですから、戻り値は変数``n``の別名つまり変数``a``の別名です。\n\n今回の場合、この演算子の呼出し場所では``++a``としているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\n\n\n\n## 後置の単項演算子\n\n後置の単項演算子といえば後置のoperator++か後置のoperator--しかないですね。\n\n```c:用例\nint a = 3;\na++;\n```\n\n後置の単項演算子は**事実上**引数が一つの関数と考えることができます。というのはC++のoperator overloadの文法上、2つ目の引数がありますが、その情報は使わないからです。\n\nこれも試しにC++のoperator overload風味に書いてみましょう。念の為に言いますが、コンパイルは通らない擬似コードです。\n\n```cpp:擬似コード\nconst int operator++ (int\u0026 n, int /*前置のopeartorと区別するためのただのフラグ*/)\n{\n    const int buf = n;\n    n = n + 1;\n    return buf;\n}\n```\n\n第一引数は``int\u0026``型ですから、``n``は先の用例で言えば変数``a``の別名です。``n = n + 1``によって``n``が1加算され、その実体である``a``も1加算されています。\n\n戻り値の型は``const int``型ですから、戻り値は変数``n``つまり変数``a``をコピーしたものです。\n\n今回の場合、この演算子の呼出し場所では``a++``としているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\n\n## 二項演算子\n\n二項演算子といえば``operator+=``でしょうか。\n\n```c:用例\nint a = 3;\na += 2;\n```\n\n演算子の左辺が第一引数、右辺が第二引数になります。\n\nこれも試しにC++のoperator overload風味に書いてみましょう。念の為に言いますが、コンパイルは通らない擬似コードです。\n\n```cpp:擬似コード\nint\u0026 operator+= (int\u0026 l, int r)\n{\n    l = l + r;\n    return l;\n}\n```\n\n第一引数は``int\u0026``型ですから、``n``は先の用例で言えば変数``a``の別名です。``n = n + 1``によって``n``が1加算され、その実体である``a``も1加算されています。\n\n戻り値の型も``int\u0026``型ですから、戻り値は変数``l``の別名つまり変数``a``の別名です。\n\n今回の場合、この演算子の呼出し場所では``a++``としているだけで、戻り値を利用していないので演算子の戻り値を無視していることになります。\n\n## 前置/後置のoperator++/operator--\n\nどんな入門書にも載っている話ですが、operator++/operator--が前置と後置で挙動が変わる時があります。\n\n**結論から言うと、挙動が変わるのは演算子の戻り値を無視しなかった場合です**\n\n@Iruyan_Zak 氏提供のコードを見てみましょう。\n\n```c\n#include\u003cstdio.h\u003e\n\nint main(void){\n    int i;\n    int a = 10;\n    for(i=0; i\u003c10; ++i){\n        printf(\"%d \", a++);\n    }\n    // =\u003e 10 11 12 13 14 15 16 17 18 19 \n    printf(\"\\na = %d\\n\", a);// =\u003e a = 20\n    a = 10;\n    for(i=0; i\u003c10; ++i){\n        printf(\"%d \", ++a);\n    }\n    // =\u003e 11 12 13 14 15 16 17 18 19 20 \n    printf(\"\\na = %d\\n\", a);// =\u003e a = 20\n    a = 10;\n    for(i=0; i\u003c10; i++){\n        printf(\"%d \", a++);\n    }\n    // =\u003e 10 11 12 13 14 15 16 17 18 19 \n    printf(\"\\na = %d\\n\", a);// =\u003e a = 20\n    a = 10;\n    for(i=0; i\u003c10; i++){\n        printf(\"%d \", ++a);\n    }\n    // =\u003e 11 12 13 14 15 16 17 18 19 20 \n    printf(\"\\na = %d\\n\", a);// =\u003e a = 20\n    \n    return 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/PW7zy2vtGO4F0ceY\n\nfor文のインクリメントを前置(1つ目と2つ目のfor文)後置(3つ目と4つ目のfor文)の2パターンありますが、出力結果が変わっていないことからもわかるように差は出ません。これは演算子の戻り値を利用していないからです。\n\n一方、1・3つ目のfor文と2・4つ目のfor文では出力結果が違います。この時演算子の戻り値をprintf関数の第2引数に渡しています。\n\n\n```cpp:擬似コード\n//前置\nint\u0026 operator++ (int\u0026 n)\n{\n    n = n + 1;\n    return n;\n}\n//後置\nconst int operator++ (int\u0026 n, int /*前置のopeartorと区別するためのただのフラグ*/)\n{\n    const int buf = n;\n    n = n + 1;\n    return buf;\n}\n```\n\nこのため挙動が変わりました。\n\n# 関数ポインタを学ぶためにポインタを復習する\n\nポインタがなんとなくわかっている前提で以下話が進みます。\n\nC言語のポインタといえば\n\n```c:いいや、その文法はおかしい\nint* p1, p2;//p2の型はint型！\n```\n\nに代表されるように変態的な文法を持ち初見殺しで有名です。\n\n```c\n#define __STDC_FORMAT_MACROS\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstdint.h\u003e\n#include \u003cinttypes.h\u003e\nint main(void)\n{\n\tint n = 3;\n\tint* n_p = \u0026n;\n\t++n_p[0];\n\tprintf(\"%d, %d\\n\", n, *n_p);// =\u003e 4, 4\n\tstatic const size_t size = 10;\n\tuint64_t* p = calloc(size, sizeof(uint64_t));\n\tp[0] = 4u;\n\tfor(size_t i = 1; i \u003c size; ++i){\n\t\tp[i] = p[i - 1] * p[i - 1] / i;\n\t}\n\tfor(size_t i = 0; i \u003c size; ++i) printf(\"%\"PRIu64\",\", p[i]);\n    // =\u003e 4,16,128,5461,7455630,11117283739380,131881619452552216,1047648503559532041,2037216899616901002,953656708591683993,\n\tputchar('\\n');\n\tfree(p);\n\treturn 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/xSA3XWgSDYvXc8tW\n\ncallocの戻り値をなんでキャストしてないんだ？と思う人はあなたの脳内コンパイラがC89で止まっています。C99からvoid*型は他のポインタ型に暗黙変換されるようになりました。言うまでもなくC++では許容されません。\n\n上の例では、ポインタ変数``n_p``は変数``n``を指し示しています。\nポインタ変数``p``は``calloc``関数によって確保されたメモリー領域の先頭を指し示しています。\n\n型を考えてみます。\nポインタ変数``n_p``の型は``int*``型です。``int``型のメモリー領域を指しているのだから当たり前ですね。基本型が``int``でそこから派生するから``int*``になります。\nポインタ変数``p``の型は``uint64_t*``型です。基本型が``uint64_t``でそこから派生するから``uint64_t*``になります。\n\n**ポインタは常に基本型から派生してできるわけですね。**\n\nポインタの型はポインタ演算をするのに必要になります。御存知の通り、``p[i]``は``*(p + i)``と等価ですが、``p + i``をするために必要な情報は何でしょうか？\n今回の場合、``calloc``で確保したメモリー領域を``sizeof(uint64_t)``ずつに区切って認識します。なので例えば``p + 1``は``p``が指す場所から``sizeof(uint64_t)``バイトずらした場所を返します。\nつまり、**ポインタ演算をするためのメモリー領域の区切り単位を知るために型が必要なわけです**。\n\nよく箱が連なった絵で説明されますが、あの箱の大きさを決めるわけですね。\n\n# 改めまして関数について\n\n前にざっくりと説明しましたが、もうすこし説明します。\n関数とは、処理の集合です。C/C++では、すべてのプログラムは必ず1つ以上の関数が含まれています。\nこれまで見てきたmain関数も関数の一つです。C言語においてとにかく大事なものです。そのくせ独習Cの説明は十分とは言えません、あれで説明してるつもりなんですかね。 \n\n関数の一般的な書き方は\n\n```c\n戻り値の型 (関数呼び出し規約opt) 関数名(仮引数リスト){\n    //処理\n}\n```\n\nです。戻り値の型がvoid以外の時は、必ず戻り値を返さなければなりません。\n\n```c\n//これは誤り\nint do_something(void){\n    //do something\n}\n//これは正しい\nint do_something2(void){\n    //do something\n    return 0;\n}\n```\n\n関数の呼び出し規約は省略することが多いですが(その場合``__cdecl``になる)、Win32APIを使うならお世話になるだろし、C++のクラスのメンバー関数は呼び出し規約が更に異なります。\n詳しくは[x86アセンブリ言語での関数コール](http://vanya.jp.net/os/x86call/#section-8)を参照してみてください。\n\n```c\n#include \u003cstdio.h\u003e\ndouble calc_volume(double si, double s2, double s3);\nint main(void){\n        const double vertical = 15.5;//縦\n        const double horizontal = 7.2;//横\n        const double height = 2.0;//高さ\n        const double result = calc_volume(vertical, horizontal, height);\n        printf(\"体積は%fです\", result);\n        return 0;\n}\ndouble calc_volume(const double s1, const double s2, const double s3){\n        return s1 * s2 * s3;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/2YLcbAs2zrhlcalv\n\nこのコードを例に、関数の呼びだし前後のスタックの様子について解説します。もちろんスタックなんて言葉はC規格書に出てきませんが、抽象的な話ばかりしても仕方ないので。\n\n![stack_area.png](https://qiita-image-store.s3.amazonaws.com/0/94177/71901816-3666-9ed2-097d-18fe5cb9a37e.png)\n\n関数呼び出しは関数呼び出し規約にもよりますが、C/C++で一般的な``__cdecl``やC++のクラスメンバー関数で使われる``__thiscall``やWin32APIでよく見る``__stdcall``では\n\n\n1. main関数が呼ばれるとき、スタック領域を確保する\n2. 引数を後ろから順に書き込む\n3. 復帰情報(リターンアドレスなど)を書き込む\n4. 関数の処理が始まって、変数が確保されたりする\n\nのように処理が行われます。\n\nさて、リターンアドレスとは何でしょうか。\n\n# 関数だってメモリー上にあるんだからポインタもあるでしょ\n\nさて、そもそもどうやってプログラムは実行されるのかというお話があります。\n\nコンピュータが出た当初は、回路を組み替えて動作を変えていました。ハードウェアでプログラミングするんですね。\n\nその後、幾つかの基本的な**命令**の並び順で動作を変えるという現代よく見るものが出てきました。この時この命令の順序はメモリーからloadするようになりました。\n\nつまりですね、**プログラムの実体はメモリー上にあるわけです。メモリー上にあるんだから、普通の変数と何ら変わることなくポインタを取れます**。\n\n![memory_map.png](https://qiita-image-store.s3.amazonaws.com/0/94177/fc9b46b8-a27f-6296-c6d5-2ee730a12ade.png)\n\nこれは一般的な処理系のメモリーの様子を表したものです。メモリーの様子といっても「プログラムから見える」メモリーです。実際にはOSとCPUが連携してL1～L3キャッシュ、RAM、ページファイルに分散しています。 \n\n```c\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\ntypedef struct {\n    char name[20];\n    int age;\n} Animal;\n \nstatic Animal a1 = { { 0 }, 0 };\nAnimal a2 = { { 0 }, 0 };\nstatic const int b = 33;\nint main(void){\n    Animal a3 = { { 0 }, 0 };\n    int a = 32;\n    Animal* a4 = malloc(1 * sizeof(Animal));\n    printf(\"a1:%p, a2:%p, a3:%p, a4:%p, a:%p, b:%p\\n\", \n        (void*)\u0026a1, (void*)\u0026a2, (void*)\u0026a3, (void*)a4, (void*)\u0026a, (void*)\u0026b\n    );\n    free(a4);\n    printf(\"puts:%p\\n\", puts);\n    return 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/SryVguuDFHq5nSx0\n\n```plain:実行例\na1:0x601068, a2:0x601050, a3:0x7ffce6a823e0, a4:0x7ff010, a:0x7ffce6a823dc, b:0x400860\nputs:0x400530\n```\n\n関数ポインタの``void*``へのキャストはエラーになる環境もあるかもしれません(言語仕様上は関数ポインタは`void*`よりも大きい幅である可能性がある)。\n\n関数ポインタが指し示すのはプログラムの実体があるメモリー領域です。\n\nここで抑えておかないといけないことがあります。\n関数、つまりその処理の手順ももちろんメモリー上にあるのですが、処理過程でつかう変数とは明確にべつの領域にあります。\nもう一度言います、コードとデータは別です。 \n\n\n![stack_area.png](https://qiita-image-store.s3.amazonaws.com/0/94177/71901816-3666-9ed2-097d-18fe5cb9a37e.png)\n\nここで思い出して欲しいのがこの図です。\n\n関数を呼ぶときは、引数、returnアドレス、ebpがスタックに積まれ、そのあと関数が実行され適宜関数内の自動変数がスタックに積まれるのでした。\n\nreturnアドレスとは他でもなくコード領域へのポインタです。もう少し言うと関数を呼び出し実行が終わったあと実行する命令があるコード領域のアドレスです。\n\ncf.)\n\n- [6-1. バッファオーバーラン　その１「こうして起こる」 | IPA ISEC セキュアプログラミング講座](http://www.ipa.go.jp/security/awareness/vendor/programmingv1/b06_01.html)\n- [スタック領域の構成 | 分かりやす～いコンピュータ技術情報](http://hack.ninja-web.net/academy003-060.htm)\n\n# 関数ポインタ\n\n極めて変態的な文法の理解が必要な関数ポインタですが、C++11の力を借りればいくらかわかりやすくなります。\n\nまず**関数ポインタは関数型から派生してできるので当然関数ポインタにも型があります**。\n\nC標準関数である``puts``関数を見てみましょう。\n``puts``関数のプロトタイプ宣言は\n\n```c\nint puts ( const char * str );\n```\n\nです。型は``int(const char*)``ですね。さてそれへのポインタ型なので``int(*)(const char*)``になります。``int*(const char*)``ではないですよ？それは``const char*``を受け取り``int*``を返す関数型ですからね。では利便性のためにtypedefしましょう\n\n```c:typedefしてみた\ntypedef int(*puts_t)(const char*);\n```\n\nまるでわからん。\n\n```cpp:C++11でalias_declarationを使ってみた\nusing puts_t = int(*)(const char*);\n```\n\nわかりやすい。\n\n```cpp:C++\n#include \u003cstdio.h\u003e\n//int puts ( const char * str );//型はint(const char*)\ntypedef int(*puts_t1)(const char*);\nusing puts_t2 = int(*)(const char*);//C++11:alias declaration\nint main(){\n    int (*f1)(const char*) = puts;\n    puts_t1 f2 = puts;\n    puts_t2 f3 = puts;\n \n    f1(\"f1\");\n    f2(\"f2\");\n    f3(\"f3\");\n    return 0;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/aTTSo4orMwg6OiMi\n\n# あなたはこの型を答えられるか\n\nさて、なんとなくわかってきたところで、ちょっとクイズをしましょう。\n\n## 第一問\n\n\u003e第1引数が``void*``型、第2引数が``bool``型で``void*``型を返す呼び出し規約が``__stdcall``の関数へのポインタ型\n\nC++11のalias declarationで答えを書くと\n\n```cpp\nusing f = void* (__stdcall *) (void*, bool);\n```\n\nとなります。ちなみにtypedefで書くと\n\n```c\ntypedef void* (__stdcall * f) (void*, bool);\n```\n\nうーむ。\n\n## 第二問\n\n\u003e第1引数が``const char*``型、第2引数が``size_t``型、第3引数が、第一引数``char``型、第2引数に``size_t``型を受け取り``bool``型を返す関数へのポインタ型で、``const char*``型を返す関数へのポインタ型の要素数3の配列の要素数2の配列型\n\nC++11のalias declarationを使いながらちょっと解釈していきましょう。\n\nまず、\n\n\u003e第一引数``char``型、第2引数に``size_t``型を受け取り``bool``型を返す関数へのポインタ型\n\nは\n\n```cpp\nusing f1 = bool (*)(char, size_t);\n```\n\nこうですね。次に\n\n\u003e第1引数が``const char*``型、第2引数が``size_t``型、第3引数が、第一引数``char``型、第2引数に``size_t``型を受け取り``bool``型を返す関数へのポインタ型で、``const char*``型を返す関数へのポインタ型\n\nは\n\n```cpp\nusing f1 = bool (*)(char, size_t);\nusing f2 = const char* (*)(const char*, size_t, f1);\n```\n\nですね。最後に\n\n\u003e第1引数が``const char*``型、第2引数が``size_t``型、第3引数が、第一引数``char``型、第2引数に``size_t``型を受け取り``bool``型を返す関数へのポインタ型で、``const char*``型を返す関数へのポインタ型の要素数3の配列の要素数2の配列型\n\nは\n\n```cpp\nusing f1 = bool (*)(char, size_t);\nusing f2 = const char* (*)(const char*, size_t, f1);\nusing a1 = f2[3][2];\n```\n\nですね。さて、alias declarationを使わないで表せそうですか？\n\n答えは\n\n```cpp:答え\nconst char* (*[3][2])(const char*, size_t, bool (*)(char, size_t))\n```\n\nでした。まあそこまで難しくはないですね。\n\nhttp://melpon.org/wandbox/permlink/DZESins3ZM6xxdaX\n\n## 第三問\n\nhttp://togetter.com/li/262116\n\nより。\n\n\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型へのポインタ型\n\nC++11のalias declarationを使いながらちょっと解釈していきましょう。\n\nまず\n\n\u003eint を引数に取り、char を返す関数へのポインタ型\n\nは\n\n```cpp\nusing f = char (*)(int);\n```\n\nですね。次に\n\n\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型\n\nは\n\n```cpp\nusing f = char (*)(int);\nusing a = f[3];\n```\n\nですね。最後に\n\n\u003eint を引数に取り、char を返す関数へのポインタ型の要素3の配列型へのポインタ型\n\nは\n\n```cpp\nusing f = char (*)(int);\nusing a = f[3];\nusing r = a*;\n```\n\nですね。さて、alias declarationを使わないで表せそうですか？\n\n答えは\n\n```cpp\nchar(*(*)[3])(int)\n```\n\nでした。えげつねぇ。\n\nhttp://melpon.org/wandbox/permlink/B3pyUAPjMnaYv3sF\n\n# Clockwise/Spiral Ruleで型を読む\n\n[\"Clockwise/Spiral Rule''を使ってC言語の「例の宣言」に挑む](https://qiita.com/pgm_nemui/items/b7d14ff6203565f9e35f)\n\nという記事で詳しく解説されています。これを使えば\n\n```c\nvoid (*(*f[])())();\n```\nのような宣言も読み解けますね！\n\n# [C++]3つ(実は2つ)ある関数の仲間\n\n関数の引数に関数を渡したいということはままあるわけですが、Cではそういう時関数ポインタを使いました。``qsort``関数が有名ではないでしょうか。\n\nC++においては選択肢が3つになります\n\n- 関数ポインタ\n- 関数オブジェクト(function-like class)\n- lambda\n\n実はlambdaは関数オブジェクトとほぼ同じだったりするんですが一応分けておきます。\n\n# [C++]関数オブジェクトとは\n\nご存知の通りC++にはクラスがあり、またoperator overlaodがあるわけですが、こんなクラスを考えてみましょう\n\n```cpp\nstruct F{\n    int operator()()\n    {\n        return 3;\n    }\n};\n```\n\nこれは\n\n```cpp\n#include \u003ciostream\u003e\nstruct F{\n    int operator()()\n    {\n        return 3;\n    }\n};\nint main()\n{\n    F f;\n    auto r = f();// int型\n    std::cout \u003c\u003c r \u003c\u003c ',' \u003c\u003c F{}() \u003c\u003c std::endl;// =\u003e 3,3\n}\n```\n\nのように使用します。\n\n上で\n\n\u003e関数名のあとに``()``を書き、その中に実引数を書くことで関数を呼び出せるのでした。\n\nと書きましたが、``opoerator()``はこれを実現できるものです。おなじ書き方で``opoerator()``を呼ぶことができるので関数オブジェクトないし、function-like classと呼ばれます。\n\n```cpp:使用例_マイナンバーのcheck_digitを求める\n#include \u003cutility\u003e\n#include \u003ciostream\u003e\n#include \u003cnumeric\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n#include \u003ccstdint\u003e\nstruct accumulate_impl{\n\tstd::pair\u003cint, int\u003e operator()(const std::pair\u003cint, int\u003e\u0026 s, const char\u0026 e)\n\t{\n        return {s.first + (e - '0') * ((5 \u003c s.second) ? s.second - 4 : s.second + 2), s.second + 1};\n\t}\n};\nstd::uint8_t calc_check_digit(const std::string\u0026 n) noexcept(false) {\n    if (11 != n.size()) throw std::runtime_error(\"n.digit must be 11\");\n    for(auto e : n) if(e \u003c '0' || '9' \u003c e) { throw std::runtime_error(\"in function calc_check_digit_yumetodo : iregal charactor detect.(\" + n + ')'); }\n    const std::uint8_t r = std::accumulate(n.rbegin(), n.rend(), std::pair\u003cint, int\u003e{}, accumulate_impl()).first % 11;\n    return (0 == r || 1 == r) ? 0 : 11 - r;\n}\nint main()\n{\n\tstd::cout \u003c\u003c static_cast\u003cint\u003e(calc_check_digit(\"12345678901\")) \u003c\u003c std::endl;// =\u003e 8\n}\n```\n\nhttp://melpon.org/wandbox/permlink/r6keQwuWYS5pbhpW\n\n# [C++11]lambda式\n\n他の言語でも最近lambda式と言われるものを導入するのが流行りらしいですが、**C++におけるlambda式とは**、先ほど紹介した**関数オブジェクトを自動生成させるシンタックスシュガーです**。\n\n```cpp:C++11lambda\n#include \u003cutility\u003e\n#include \u003ciostream\u003e\n#include \u003cnumeric\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n#include \u003ccstdint\u003e\nstd::uint8_t calc_check_digit(const std::string\u0026 n) noexcept(false) {\n    if (11 != n.size()) throw std::runtime_error(\"n.digit must be 11\");\n    for(auto e : n) if(e \u003c '0' || '9' \u003c e) { throw std::runtime_error(\"in function calc_check_digit_yumetodo : iregal charactor detect.(\" + n + ')'); }\n    const std::uint8_t r = std::accumulate(n.rbegin(), n.rend(), std::pair\u003cint, int\u003e{}, [](const std::pair\u003cint, int\u003e\u0026 s, const char\u0026 e) -\u003e std::pair\u003cint, int\u003e {\n        return {s.first + (e - '0') * ((5 \u003c s.second) ? s.second - 4 : s.second + 2), s.second + 1};\n    }).first % 11;\n    return (0 == r || 1 == r) ? 0 : 11 - r;\n}\nint main()\n{\n\tstd::cout \u003c\u003c static_cast\u003cint\u003e(calc_check_digit(\"12345678901\")) \u003c\u003c std::endl;// =\u003e 8\n}\n```\n\nhttp://melpon.org/wandbox/permlink/g4uKUnbPjiw33rYW\n\n```cpp:C++14lambda\n#include \u003cutility\u003e\n#include \u003ciostream\u003e\n#include \u003cnumeric\u003e\n#include \u003cstring\u003e\n#include \u003cstdexcept\u003e\n#include \u003ccstdint\u003e\nstd::uint8_t calc_check_digit(const std::string\u0026 n) noexcept(false) {\n    if (11 != n.size()) throw std::runtime_error(\"n.digit must be 11\");\n    for(auto e : n) if(e \u003c '0' || '9' \u003c e) { throw std::runtime_error(\"in function calc_check_digit_yumetodo : iregal charactor detect.(\" + n + ')'); }\n    const std::uint8_t r = std::accumulate(n.rbegin(), n.rend(), std::pair\u003cint, int\u003e{}, [](const auto\u0026 s, const char\u0026 e) -\u003e std::pair\u003cint, int\u003e {\n        return {s.first + (e - '0') * ((5 \u003c s.second) ? s.second - 4 : s.second + 2), s.second + 1};\n    }).first % 11;\n    return (0 == r || 1 == r) ? 0 : 11 - r;\n}\nint main()\n{\n\tstd::cout \u003c\u003c static_cast\u003cint\u003e(calc_check_digit(\"12345678901\")) \u003c\u003c std::endl;// =\u003e 8\n}\n```\n\nhttp://melpon.org/wandbox/permlink/50FYzl1kiUvgXC1X\n\n``std::accumulate``の第4引数に渡しているのがlambdaです。関数オブジェクトの処理内容を別の場所に書く必要がなくなるため、処理の流れの一覧性があがり、可読性が向上します。\n\nその詳細は、C++界隈では有名な江添さんががっつり記事を書いているので\n\n- [lambda 完全解説 | 本の虫](https://cpplover.blogspot.jp/2009/11/lambda.html)\n- [シンタックスシュガーとしてのlambdaの解説 | 本の虫](https://cpplover.blogspot.jp/2009/12/lambda.html)\n- [C++14の新機能: ジェネリックlambda | 本の虫](https://cpplover.blogspot.jp/2014/09/c14-lambda_30.html)\n- [C++14の新機能: 初期化lambdaキャプチャー | 本の虫](https://cpplover.blogspot.jp/2014/09/c14-lambda.html)\n\nを全部読んでいただくとして、簡単に触れます。\n\n\u003e[lambda 完全解説 | 本の虫](https://cpplover.blogspot.jp/2009/11/lambda.html)\n\n\u003elambdaの文法解説\nでは、詳しい解説をして行きたいと思う。\n\n\u003e\n```cpp\nint main()\n{\n    []  //  [ lambda-capture ]\n    ()  //  ( parameter-declaration-clause )\n    {}  //  compound-statement\n    ()  //  Function call expression\n    ;\n}\n```\n\n\u003eまず、一番始めの[]は、lambda-introducerという。[]のなかには、lambda-captureを記述できる。これについては、後に解説する。\n二番目は、関数の引数の定義である。通常の関数で、void f(int a, int b) などと書く引数と、まったく同じである。\n三番目は、関数の本体である。通常の関数と同じく、実際のコードはこの中に書く。\n四番目は、関数呼び出しである。これも、通常の関数とまったく変わらない。\n\n先程も言ったようにlambdaは関数オブジェクトを自動生成させるシンタックスシュガーに過ぎないので、**lambda式が書かれているスコープで有効な自動変数**はそのままではlambda式内では使えません。逆に言えば関数の外で有効な変数、例えば関数の外で宣言・定義されているstatic変数とかは使えるわけですが。\n\n\nで、lambda式が書かれているスコープで有効な自動変数をlambda式内で使うためには、``lambda-capture``というものを使います。\n\n```cpp\n#include \u003ciostream\u003e\n//struct F1{ int operator()(){ return a; } };//error:aは未定義\nclass F1_copy{\nprivate:\n\tint a;\npublic:\n\tF1_copy() = delete;\n\tF1_copy(int copy) : a(copy) {}\n\tF1_copy(const F1_copy\u0026) = default;\n\tF1_copy(F1_copy\u0026\u0026) = default;\n\tF1_copy\u0026 operator=(const F1_copy\u0026) = delete;\n\tF1_copy\u0026 operator=(F1_copy\u0026\u0026) = delete;\n\tint operator()(){ return a; }\n};\nclass F1_ref{\nprivate:\n\tint\u0026 a;\npublic:\n\tF1_ref() = delete;\n\tF1_ref(int\u0026 ref) : a(ref) {}\n\tF1_ref(const F1_ref\u0026) = default;\n\tF1_ref(F1_ref\u0026\u0026) = default;\n\tF1_ref\u0026 operator=(const F1_ref\u0026) = delete;\n\tF1_ref\u0026 operator=(F1_ref\u0026\u0026) = delete;\n\tint operator()(){ return a; }\n};\nstatic int b = 2;\nstruct F2{ int operator()(){ return b; } };//OK\nint main()\n{\n\tint a = 3;\n\tint c = 4;\n\t//int r1_1 = F1{}();//error\n\t//int r1_2 = [](){ return a; }();//error:aは未定義\n\tint r2_1 = F1_copy{ a }();//OK\n\tint r2_2 = [a](){ return a; }();//OK:copy caputure\n\tint r3_1 = F1_ref{ a }();//OK\n\tint r3_2 = [\u0026a](){ return a; }();//OK:reference caputure\n\tint r4 = [=](){ return a; }();//OK:自動変数のうち、odr-usedになったもの全てがcopy caputureされる\n\tint r5 = [\u0026](){ return a; }();//OK:自動変数のうち、odr-usedになったもの全てがreference caputureされる\n\tint r6_1 = [](){ return b; }();//OK:captureは不要\n\tint r6_2 = F2{}();//OK\n\n\tusing std::endl;\n\tstd::cout\n\t\t\u003c\u003c \"a:\" \u003c\u003c a \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"b:\" \u003c\u003c b \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"c:\" \u003c\u003c c \u003c\u003c endl// =\u003e 4\n\t\t\u003c\u003c \"r2_1:\" \u003c\u003c r2_1 \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r2_2:\" \u003c\u003c r2_2 \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r3_1:\" \u003c\u003c r3_1 \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r3_2:\" \u003c\u003c r3_2 \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r4  :\" \u003c\u003c r4   \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r5  :\" \u003c\u003c r5   \u003c\u003c endl// =\u003e 3\n\t\t\u003c\u003c \"r6_1:\" \u003c\u003c r6_1 \u003c\u003c endl// =\u003e 2\n\t\t\u003c\u003c \"r6_2:\" \u003c\u003c r6_2 \u003c\u003c endl;// =\u003e 2\n}\n```\n\nhttp://melpon.org/wandbox/permlink/46VrZo6LkM1GQgXL\n\n``lambda-capture``にはよく使うものとして参照キャプチャとコピーキャプチャがありますが、上の例で違いはわかっていただけるかなと思います。\n\n``[=]``や``[\u0026]``は自動変数のうち、``odr-used``になったもの全てを対象とするキャプチャですが、そもそも``odr-used``の説明が面倒な上に、個人的にlamdaでキャプチャしている自動変数は明示したほうが可読性が上がると思っているので、私は一個一個``lambda-capture``に書くようにしています。\n\n``odr-used``については\n[リンク時に関連するルールの話 - ここは匣](http://fimbul.hateblo.jp/entry/2014/12/11/000123)\nを見てください。\n\n#[C++]なぜC++erは関数ポインタではなく関数オブジェクトを使うか\n\n結論から言うと関数ポインタは重いからです。\n\n関数ポインタは関数の命令開始位置のアドレスを保持するものでしたが、このアドレスは**実行時にしかわかりません**。コンパイル時にどの関数を使うか見抜き、関数をinline展開する最適化をするのは、極めて難易度が高く、現存する殆どのコンパイラはほとんどの関数ポインタをinline展開しません。\n\nこれに対して関数オブジェクトは一つ一つが別のクラスです。lambdaの場合も一つ一つすべて固有の名前のクラスになります。なのでその関数オブジェクトかの区別は**型レベルでわかるので、コンパイル時にわかります**。つまりコンパイラは関数オブジェクトをinline展開しやすくなります。\n\n前にも見たように**関数を呼び出すというのは**いろいろな手順を経て呼び出されるので**時間がかかります**。inline展開するかはコンパイラが実行速度と実行ファイルの大きさのトレードオフで決定しますが、**inline展開されれば一般にその分高速化できます**。\n\n故にC++erは関数ポインタより関数オブジェクトを好むわけです。\n\n#[C++]std::functionはなぜあまり使われないか\n\nC++で関数といえば\n\n- 関数ポインタ\n- 関数オブジェクト(function-like class)\n- lambda\n\nの3つ(実は2つ)あると話しましたが、これを統一的に扱いたいことがあります。そこで登場するのが``std::function``です。\n\n使い方はただでさえ長いこの記事をこれ以上肥大化させても仕方ないので\n[function - cpprefjp C++日本語リファレンス](http://cpprefjp.github.io/reference/functional/function.html)\n[関数ポインタよりもstd::functionを使おう - ぷろみん](http://torini.hateblo.jp/entry/2015/03/22/%E9%96%A2%E6%95%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%82%88%E3%82%8A%E3%82%82std%3A%3Afunction%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86)\nにまるなげします。\n\nで、こいつ重いです。\n\n[C++11 autoはstd::functionより高速 – Hossy](http://www.ngc.is.ritsumei.ac.jp/~hossy/2015/07/c11-auto%E3%81%AFstdfunction%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F/)\n\nなぜかというと、統一的に扱うために内部でキャストを多用して型消去しているからです。\n\n[Boost.Functionの実装技術(1) - Type Erasure - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20080220/1203498818)\n[Boost.Functionの実装技術(2) - タグディスパッチ - Faith and Brave - C++で遊ぼう](http://faithandbrave.hateblo.jp/entry/20080221/1203593091)\n\nに実装例が出ていますが、なんかすごいですね(小並感)。\n\n前節で解説したとおり、関数オブジェクトは**型レベルで関数を区別していたのでコンパイル時にどの関数かわかり**コンパイラはinline展開しやすかったので高速化に繋がるのでした。\n\n**型消去してしまってはその利点は消え去ってしまいます**。\n\nで、そんな``std::function``ですが、出番が無いかというとそんなことはなく、例えば関数の配列を作るようなときは、まあ``std::tuple``でもしかしたら頑張れるのかもしれませんが、こいつを使うほうがはるかに楽に可読性も高く実装できます。\n\n# [C++11]constexpr関数は市民の義務です\n\nというタイトルで書こうと思ったんですが、constexpr関数の解説なんて私にできるわけもない。\n\n**解説には[岡山の陶芸家(中３女子)](https://twitter.com/bolero_MURAKAMI)が必要やろ！**\n\nというわけで参考リンクだけ貼っておきます\n\n- [constexpr - cpprefjp C++日本語リファレンス](http://cpprefjp.github.io/lang/cpp11/constexpr.html)\n- [constexprの制限緩和 - cpprefjp C++日本語リファレンス](http://cpprefjp.github.io/lang/cpp14/relaxing_constraints_on_constexpr.html)\n- [ｃonstexpr関数はコンパイル時処理。これはいい。実行時が霞んで見える。cpuの嬌声が聞こえてきそうだ](http://www.slideshare.net/GenyaMurakami/onstexprcpu)\n- [本の虫: 最新のconstexpr](https://cpplover.blogspot.jp/2013/04/constexpr.html)\n- [リテラル型クラスの条件、および「中３女子でもわかる constexpr」の訂正 - ボレロ村上 - ENiyGmaA Code](http://boleros.hateblo.jp/entry/20130718/1374155184)\n- [C++11の糞仕様と戦ってアクセッサをconstexprにする - ボレロ村上 - ENiyGmaA Code](http://boleros.hateblo.jp/entry/20130604/1370364968)\n- [コンパイル時Brainfuckコンパイラ ――C++14 constexpr の進歩と限界―― - ボレロ村上 - ENiyGmaA Code](http://boleros.hateblo.jp/entry/2014/12/24/065155)\n\n# 終わりに\n\nはじめはC言語初心者向けに記事を書いていたのだが、そもそも関数は初心者向けの機能ではなかったことを思い出し、初心者向けに書くのを諦めた。\n\n結果どういうわけかすごく長い記事になった。\n\nここでこの記事の冒頭を見よう\n\n\u003e今回はのんびりまったりを目指します。\n\n無理でした。途中まではまったり書いていたけど途中から指数関数的に疾走する記事になりました。\n\nこの記事を書くきっかけをくれた[リーマ氏](https://twitter.com/stoneriver213p)と[いるやん氏](https://twitter.com/Iruyan_Zak)に感謝しつつこの記事を終わることにする。\n\n# 反響\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e引数の後ろからスタックに積んでいくあたりでマサカリに手が伸びたが、標準でレジスタ渡しな環境がーとか言ってると収集付かなくなるのは分かってるのでそっと戻し。\u003c/p\u003e\u0026mdash; yoh2 (@yoh2_sdj) \u003ca href=\"https://twitter.com/yoh2_sdj/status/774518357731094528\"\u003e2016年9月10日\u003c/a\u003e\u003c/blockquote\u003e\n\nうん、まあね、抽象的なことばっか言っても始まらんしね。\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e深淵までって書いてあるからHaskellとかScalaとかElixirとかに話が飛ぶかと思ったけどC++までだった \u003ca href=\"https://t.co/s4S3PyFBb4\"\u003ehttps://t.co/s4S3PyFBb4\u003c/a\u003e\u003c/p\u003e\u0026mdash; 白山風露 (@kazatsuyu) \u003ca href=\"https://twitter.com/kazatsuyu/status/774530809743028224\"\u003e2016年9月10日\u003c/a\u003e\u003c/blockquote\u003e\n\nHaskellについては\n[自称C++中級者がHaskell初心者になってみる話](http://qiita.com/kazatsuyu/items/d1c9b97d92af89c4cca0)\nへどうぞ\n","coediting":false,"comments_count":2,"created_at":"2016-09-10T16:52:02+09:00","group":null,"id":"cdfb41781d32d98be1b4","likes_count":66,"private":false,"reactions_count":0,"tags":[{"name":"C","versions":[]},{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"C++14","versions":[]}],"title":"関数の創世から深淵まで駆け抜ける関数とはなんぞや講座","updated_at":"2019-12-24T15:42:21+09:00","url":"https://qiita.com/yumetodo/items/cdfb41781d32d98be1b4","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cp\u003e皆さん御存知の通り、C++には\u003ccode\u003estd::error_category\u003c/code\u003eという物がある。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ewin32apiと一緒に使う例\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"cm\"\u003e/*なんか*/\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eGetLastError\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003e例えば\u003ccode\u003estd::system_category()\u003c/code\u003eは\u003ccode\u003estd::error_category\u003c/code\u003eから派生したクラス型のオブジェクトへの参照を返す。\u003c/p\u003e\n\n\u003cp\u003eおなじみcppjpの解説は\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://cpprefjp.github.io/reference/system_error/system_category.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://cpprefjp.github.io/reference/system_error/system_category.html\u003c/a\u003e\u003cbr\u003e\nerror_categoryクラスは、エラー情報を分類するための基本クラスである。\u003c/p\u003e\n\n\u003cp\u003eエラーコードから対応するエラーメッセージを取得する処理が異なる場合などで、error_categoryクラスを派生して環境固有のエラー情報を取得するためのクラスを定義できる。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eとなっている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"まずはデフォルトコンストラクタでも見てみるか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E3%81%A7%E3%82%82%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eまずはデフォルトコンストラクタでも見てみるか\u003c/h1\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"mingw-gcc610の場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#mingw-gcc610%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003emingw-gcc6.1.0の場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003emingw-gcc6.1.0の場合\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e \u003cspan class=\"nf\"\u003e_GLIBCXX_VISIBILITY\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_GLIBCXX_BEGIN_NAMESPACE_VERSION\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003e_V2\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econstexpr\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end inline namespace\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_GLIBCXX_END_NAMESPACE_VERSION\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// namespace\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eまあそうだよな。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"vs2013の場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vs2013%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVS2013の場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eVS2013の場合\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// default constructor\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eVS2013はconstexprに対応していないからまあそうなるわな。\u003c/p\u003e\n\n\u003ch2\u003e\n\u003cspan id=\"vs2015の場合\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vs2015%E3%81%AE%E5%A0%B4%E5%90%88\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVS2015の場合\u003c/h2\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eVS2015の場合\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* constexpr */\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// TRANSITION\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// default constructor\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eあれ、気がついたらいつの間にか開いていた規格書ではconstexprにしろと書いてあるんだけど、なってないな・・・。\u003cbr\u003e\n・・・ん？\u003cstrong\u003e\u003ccode\u003e_Addr\u003c/code\u003eってなんだ。\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"vs2015の実装を全部見てみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vs2015%E3%81%AE%E5%AE%9F%E8%A3%85%E3%82%92%E5%85%A8%E9%83%A8%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVS2015の実装を全部見てみる。\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eVS2015の場合\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* constexpr */\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// TRANSITION\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// default constructor\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// destroy the object\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_condition\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edefault_error_condition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eequivalent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_condition\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Cond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eequivalent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_code\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Code\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// compare categories for equality\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e!=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// compare categories for inequality\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// compare categories for order\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edelete\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nl\"\u003eprotected:\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e \u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// imaginary addresses for Standard error_category objects\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Future_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Generic_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Iostream_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_System_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eどうやら比較演算子で使われているらしい。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003eVS2015の実装から比較演算子を抜粋\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an error\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// compare categories for equality\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// compare categories for order\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Right\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eちょっとまって、規格書を見に行こう。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e§ 19.5.1.1\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"19511-class-error_category-overview-syserrerrcatoverview\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#19511-class-error_category-overview-syserrerrcatoverview\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e19.5.1.1 Class error_category overview [syserr.errcat.overview]\u003c/h4\u003e\n\n\u003col\u003e\n\u003cli\u003eThe class \u003ccode\u003eerror_category\u003c/code\u003e serves as a base class for types used to identify the source and encoding of a\nparticular category of error code. Classes may be derived from \u003ccode\u003eerror_category\u003c/code\u003e to support categories of\nerrors in addition to those defined in this International Standard. Such classes shall behave as specified in\nthis subclause. [ Note: \u003ccode\u003eerror_category\u003c/code\u003e objects are passed by reference, and \u003cstrong\u003etwo such objects are equal\nif they have the same address. This means that applications using custom error_category types should\ncreate a single object of each such type.\u003c/strong\u003e —end note ]\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e§ 19.5.1.3\u003c/p\u003e\n\n\u003cp\u003e2\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eReturns: \u003cstrong\u003e\u003ccode\u003ethis == \u0026amp;rhs\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e4\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eReturns: \u003cstrong\u003e\u003ccode\u003eless\u0026lt;const error_category*\u0026gt;()(this, \u0026amp;rhs)\u003c/code\u003e.\u003c/strong\u003e\u003cbr\u003e\n[ Note: less (20.9.6) provides a total ordering for pointers. —end note ]\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eデフォルトコンストラクタはthisポインタを保存しているみたいだけど・・・なんでそんなことを？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stdsystem_categoryを調べてみる\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stdsystem_category%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%82%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003estd::system_categoryを調べてみる\u003c/h1\u003e\n\n\u003cp\u003eこの謎をとくために、\u003ccode\u003estd::system_category\u003c/code\u003eという関数を見てみよう。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_Ty\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_Ty\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Immortalize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// return a reference to an object that will live forever\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* MAGIC */\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003e_Immortalizer\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_Ty\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003e_Static\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ereinterpret_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_Ty\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003e_Static\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_Storage\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// get system_category\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Immortalize\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003e_System_error_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e_Immortalize\u003c/code\u003eは規格書の要求を満たすためにstatic storageにクラスを構築するためのものなんだろう。(よく見たら微妙に違うみたいだけど)\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// CLASS _System_error_category\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_System_error_category\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an operating system error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003epublic:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_System_error_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// default constructor\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_System_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// get name of category\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"system\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errcode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// convert to name of error\u003c/span\u003e\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003e_Size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32767\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003e_Narrow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Size\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"sc\"\u003e'\\0'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003e_Val\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_Winerror_message\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n            \u003cspan class=\"k\"\u003estatic_cast\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Errcode\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003e_Narrow\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003e_Size\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Val\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"unknown error\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003e_Narrow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eresize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Val\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Narrow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eshrink_to_fit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Narrow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_condition\u003c/span\u003e\n        \u003cspan class=\"n\"\u003edefault_error_condition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// make error_condition for error code (generic if possible)\u003c/span\u003e\n        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003e_Posv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_Winerror_map\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Posv\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_condition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Posv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egeneric_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror_condition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_Errval\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esystem_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()));\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eん！？なんかデフォルトコンストラクタがおかしいぞ・・・？\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003e_System_error_category\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an operating system error\u003c/span\u003e\n    \u003cspan class=\"n\"\u003e_System_error_category\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003e_NOEXCEPT\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// default constructor\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_System_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003e_System_addr\u003c/code\u003eってなんだ？\u003c/p\u003e\n\n\u003cp\u003e・・・そういえば\u003ccode\u003estd::error_category\u003c/code\u003eの実装を載せた時にへんなenumがあったな\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003e_STD_BEGIN\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eerror_category\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// categorize an error\u003c/span\u003e\n\u003cspan class=\"nl\"\u003eprotected:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003euintptr_t\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e{\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// imaginary addresses for Standard error_category objects\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Future_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Generic_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_Iostream_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003e_System_addr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"n\"\u003e_STD_END\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eあった。ご丁寧にコメントが書いてある。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eimaginary addresses for Standard error_category objects\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eGoogle先生お願いします。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e標準error_categoryオブジェクトの架空のアドレス\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eほう・・・。つまり、\u003ccode\u003estd::error_category\u003c/code\u003eクラスの比較演算子は、このenumによって作られた仮想的なアドレスを比較していると。\u003cbr\u003e\n・・・いやそれってだめなんじゃ？もう一度規格書をみるよ。\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e§ 19.5.1.1\u003c/p\u003e\n\n\u003ch4\u003e\n\u003cspan id=\"19511-class-error_category-overview-syserrerrcatoverview-1\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#19511-class-error_category-overview-syserrerrcatoverview-1\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e19.5.1.1 Class error_category overview [syserr.errcat.overview]\u003c/h4\u003e\n\n\u003col\u003e\n\u003cli\u003eThe class \u003ccode\u003eerror_category\u003c/code\u003e serves as a base class for types used to identify the source and encoding of a\nparticular category of error code. Classes may be derived from \u003ccode\u003eerror_category\u003c/code\u003e to support categories of\nerrors in addition to those defined in this International Standard. Such classes shall behave as specified in\nthis subclause. [ Note: \u003ccode\u003eerror_category\u003c/code\u003e objects are passed by reference, and \u003cstrong\u003etwo such objects are equal\nif they have the same address. This means that applications using custom error_category types should\ncreate a single object of each such type.\u003c/strong\u003e —end note ]\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eここでいう\u003ccode\u003eaddress\u003c/code\u003eはつまるところポインタのことじゃないのか？\u003c/p\u003e\n\n\u003cp\u003ecppjpでの \u003ca href=\"/faithandbrave@github\" class=\"user-mention js-hovercard\" title=\"faithandbrave@github\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"faithandbrave@github\"\u003e@faithandbrave@github\u003c/a\u003e さんの解説も\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://cpprefjp.github.io/reference/system_error/error_category/op_less.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://cpprefjp.github.io/reference/system_error/error_category/op_less.html\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_category\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003erhs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003enoexcept\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eerror_categoryオブジェクトのポインタの小なり比較を行う。\u003c/p\u003e\n\n\u003cp\u003e自身のポインタがrhsオブジェクトへのポインタより小さい場合trueを返し、そうでなければfalseを返す。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eと書いている。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"結論\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%90%E8%AB%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e結論\u003c/h1\u003e\n\n\u003cp\u003eVS2015は、それが規格的にいいのかは知らんが、\u003ccode\u003estd::error_category\u003c/code\u003eの比較演算子の実装に仮想的なアドレスを使っている。\u003c/p\u003e\n\n\u003cp\u003eこのせいで自分で\u003ccode\u003estd::error_category\u003c/code\u003eの派生クラスを作るときに困る。\u003c/p\u003e\n\n\u003cp\u003e皆さんに聞きたい、この実装ってありなの？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"追記vs2015で仕様が変わった理由らしきもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%BF%BD%E8%A8%98vs2015%E3%81%A7%E4%BB%95%E6%A7%98%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E7%90%86%E7%94%B1%E3%82%89%E3%81%97%E3%81%8D%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e追記:VS2015で仕様が変わった理由らしきもの\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003e\u003ca href=\"https://t.co/MJo8E4d3yg\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/MJo8E4d3yg\u003c/a\u003e\u003cbr\u003eここの \u0026lt;system_error\u0026gt; Fixes の2番目かな\u003cbr\u003e  \u003ca href=\"https://t.co/MUzHX3H5zk\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/MUzHX3H5zk\u003c/a\u003e\u003c/p\u003e— おいがみ (@oigami013) \u003ca href=\"https://twitter.com/oigami013/status/770248522603954176\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月29日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eん！？\u003c/p\u003e\n\n\u003cblockquote\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"stl-fixes-in-vs-2015-part-2--visual-c-team-blog\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#stl-fixes-in-vs-2015-part-2--visual-c-team-blog\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eSTL Fixes In VS 2015, Part 2 | Visual C++ Team Blog\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2015/07/14/stl-fixes-in-vs-2015-part-2/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://blogs.msdn.microsoft.com/vcblog/2015/07/14/stl-fixes-in-vs-2015-part-2/\u003c/a\u003e\u003cbr\u003e\n* Error category objects didn’t behave properly across different DLLs/EXEs (DevDiv#666062, DevDiv#1095970/\u003ca href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1053790\" rel=\"nofollow noopener\" target=\"_blank\"\u003eConnect#1053790\u003c/a\u003e).  The tale of woe here was complicated.  Calling generic_category(), for example, is supposed to return a reference to a single unique object, regardless of where it’s called.  This is usually achieved by separate compilation into the STL’s DLL (or static LIB).  However, we can’t separately compile error_category machinery, because it has a virtual message() returning std::string, whose representation is affected by \u003cem\u003eITERATOR_DEBUG_LEVEL.  So, generic_category() is implemented header-only – but that means that different user DLLs end up with different instantiations and therefore different objects.  (It’s also possible for this to cause trouble between a user’s EXE and the STL’s DLL.)  We fixed this to achieve as much conformance as possible.  We’ve taught error_category, its derived classes, and its operator==()/operator!=() to consider all generic\u003c/em\u003ecategory() objects to be equal, even if they live at different addresses in different DLLs (and similarly for the other error category objects in the Standard).  This has been implemented so that user-defined error category objects will be unaffected.  The only thing we can’t fix is a direct comparison of error_category addresses (code should use operator==() instead). \u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"c-comparison-stderror_code-from-stdsystem_error-to-stderrc-enum-value-incorrect-when-using-dll-version-of-run-time-library\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#c-comparison-stderror_code-from-stdsystem_error-to-stderrc-enum-value-incorrect-when-using-dll-version-of-run-time-library\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e[C++] Comparison std::error_code from std::system_error to std::errc enum value incorrect when using DLL-version of run-time library\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://connect.microsoft.com/VisualStudio/feedback/details/1053790\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://connect.microsoft.com/VisualStudio/feedback/details/1053790\u003c/a\u003e\u003cbr\u003e\nA comparison of the error code from an std::system_error object thrown by std::thread to std::errc::resource_unavailable_try_again appears to produce an incorrect Boolean result when the application uses a DLL-specific version of the run-time library (compiler option \"/MD\" or \"MDd\").\u003c/p\u003e\n\n\u003cp\u003eThe issue can be reproduces by the attached file, \"MyTest.cpp\", or by the online C++ compiler at \u003ca href=\"http://rextester.com/EMVQXX20044\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://rextester.com/EMVQXX20044\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eChristopher Kohlhoff encouraged me to submit this bug report. He suggested that the issue might be caused by the fact that the implementation compares error categories by their address, and from MSVC\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eうーん、英語が得意じゃない私にはちときつい・・・。\u003cbr\u003e\ndllにしたところ、アドレスがdll使用側と一致しないぞい、ってこと？(あやふや)\u003c/p\u003e\n","body":"皆さん御存知の通り、C++には``std::error_category``という物がある。\n\n```cpp:win32apiと一緒に使う例\nif(/*なんか*/) throw std::system_error(std::error_code(GetLastError(), std::system_category()));\n```\n\n例えば``std::system_category()``は``std::error_category``から派生したクラス型のオブジェクトへの参照を返す。\n\nおなじみcppjpの解説は\n\n\u003ehttp://cpprefjp.github.io/reference/system_error/system_category.html\n\u003eerror_categoryクラスは、エラー情報を分類するための基本クラスである。\n\n\u003eエラーコードから対応するエラーメッセージを取得する処理が異なる場合などで、error_categoryクラスを派生して環境固有のエラー情報を取得するためのクラスを定義できる。\n\nとなっている。\n\n# まずはデフォルトコンストラクタでも見てみるか\n\n## mingw-gcc6.1.0の場合\n```cpp:mingw-gcc6.1.0の場合\nnamespace std _GLIBCXX_VISIBILITY(default)\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n  inline namespace _V2 {\n  class error_category\n  {\n  public:\n    constexpr error_category() noexcept = default;\n  };\n  } // end inline namespace\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace\n```\n\nまあそうだよな。\n\n## VS2013の場合\n```cpp:VS2013の場合\n_STD_BEGIN\nclass error_category\n\t{\t// categorize an error\npublic:\n\terror_category()\n\t\t{\t// default constructor\n\t\t}\n\t};\n_STD_END\n```\n\nVS2013はconstexprに対応していないからまあそうなるわな。\n\n## VS2015の場合\n\n```cpp:VS2015の場合\n_STD_BEGIN\nclass error_category\n\t{\t// categorize an error\npublic:\n\t/* constexpr */ error_category() _NOEXCEPT\t// TRANSITION\n\t\t{\t// default constructor\n\t\t_Addr = reinterpret_cast\u003cuintptr_t\u003e(this);\n\t\t}\n\t};\n_STD_END\n```\n\nあれ、気がついたらいつの間にか開いていた規格書ではconstexprにしろと書いてあるんだけど、なってないな・・・。\n・・・ん？**``_Addr``ってなんだ。**\n\n# VS2015の実装を全部見てみる。\n\n```cpp:VS2015の場合\n_STD_BEGIN\nclass error_category\n\t{\t// categorize an error\npublic:\n\t/* constexpr */ error_category() _NOEXCEPT\t// TRANSITION\n\t\t{\t// default constructor\n\t\t_Addr = reinterpret_cast\u003cuintptr_t\u003e(this);\n\t\t}\n\tvirtual ~error_category() _NOEXCEPT\n\t\t{\t// destroy the object\n\t\t}\n\n\tvirtual const char *name() const _NOEXCEPT = 0;\n\n\tvirtual string message(int _Errval) const = 0;\n\n\tvirtual error_condition\n\t\tdefault_error_condition(int _Errval) const _NOEXCEPT;\n\n\tvirtual bool equivalent(int _Errval,\n\t\tconst error_condition\u0026 _Cond) const _NOEXCEPT;\n\n\tvirtual bool equivalent(const error_code\u0026 _Code,\n\t\tint _Errval) const _NOEXCEPT;\n\n\tbool operator==(const error_category\u0026 _Right) const _NOEXCEPT\n\t\t{\t// compare categories for equality\n\t\treturn (_Addr == _Right._Addr);\n\t\t}\n\n\tbool operator!=(const error_category\u0026 _Right) const _NOEXCEPT\n\t\t{\t// compare categories for inequality\n\t\treturn (!(*this == _Right));\n\t\t}\n\n\tbool operator\u003c(const error_category\u0026 _Right) const _NOEXCEPT\n\t\t{\t// compare categories for order\n\t\treturn (_Addr \u003c _Right._Addr);\n\t\t}\n\n\terror_category(const error_category\u0026) = delete;\n\terror_category\u0026 operator=(const error_category\u0026) = delete;\n\nprotected:\n\tuintptr_t _Addr;\n\n\tenum : uintptr_t\n\t\t{\t// imaginary addresses for Standard error_category objects\n\t\t_Future_addr = 1,\n\t\t_Generic_addr = 3,\n\t\t_Iostream_addr = 5,\n\t\t_System_addr = 7\n\t\t};\n\t};\n_STD_END\n```\n\nどうやら比較演算子で使われているらしい。\n\n```cpp:VS2015の実装から比較演算子を抜粋\n_STD_BEGIN\nclass error_category\n\t{\t// categorize an error\n\tbool operator==(const error_category\u0026 _Right) const _NOEXCEPT\n\t\t{\t// compare categories for equality\n\t\treturn (_Addr == _Right._Addr);\n\t\t}\n\tbool operator\u003c(const error_category\u0026 _Right) const _NOEXCEPT\n\t\t{\t// compare categories for order\n\t\treturn (_Addr \u003c _Right._Addr);\n\t\t}\n\t};\n_STD_END\n```\n\nちょっとまって、規格書を見に行こう。\n\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4296.pdf\n\n\u003e§ 19.5.1.1\n#### 19.5.1.1 Class error_category overview [syserr.errcat.overview]\n\n\u003e\n1. The class ``error_category`` serves as a base class for types used to identify the source and encoding of a\nparticular category of error code. Classes may be derived from ``error_category`` to support categories of\nerrors in addition to those defined in this International Standard. Such classes shall behave as specified in\nthis subclause. [ Note: ``error_category`` objects are passed by reference, and **two such objects are equal\nif they have the same address. This means that applications using custom error_category types should\ncreate a single object of each such type.** —end note ]\n\n\u003e§ 19.5.1.3\n\n\u003e 2\n\u003e\n```cpp\nbool operator==(const error_category\u0026 rhs) const noexcept;\n```\nReturns: **``this == \u0026rhs``.**\n\n\u003e4\n\n\u003e\n```cpp\nbool operator\u003c(const error_category\u0026 rhs) const noexcept;\n```\n\n\u003eReturns: **``less\u003cconst error_category*\u003e()(this, \u0026rhs)``.**\n[ Note: less (20.9.6) provides a total ordering for pointers. —end note ]\n\n\nデフォルトコンストラクタはthisポインタを保存しているみたいだけど・・・なんでそんなことを？\n\n# std::system_categoryを調べてみる\n\nこの謎をとくために、``std::system_category``という関数を見てみよう。\n\n```cpp\n_STD_BEGIN\ntemplate\u003cclass _Ty\u003e inline\n\t_Ty\u0026 _Immortalize()\n\t{\t// return a reference to an object that will live forever\n\t/* MAGIC */ static _Immortalizer\u003c_Ty\u003e _Static;\n\treturn (*reinterpret_cast\u003c_Ty *\u003e(\u0026_Static._Storage));\n\t}\ninline const error_category\u0026 system_category() _NOEXCEPT\n\t{\t// get system_category\n\treturn (_Immortalize\u003c_System_error_category\u003e());\n\t}\n_STD_END\n```\n\n``_Immortalize``は規格書の要求を満たすためにstatic storageにクラスを構築するためのものなんだろう。(よく見たら微妙に違うみたいだけど)\n\n```cpp\n_STD_BEGIN\n\t\t// CLASS _System_error_category\nclass _System_error_category\n\t: public error_category\n\t{\t// categorize an operating system error\npublic:\n\t_System_error_category() _NOEXCEPT\n\t\t{\t// default constructor\n\t\t_Addr = _System_addr;\n\t\t}\n\n\tvirtual const char *name() const _NOEXCEPT\n\t\t{\t// get name of category\n\t\treturn (\"system\");\n\t\t}\n\n\tvirtual string message(int _Errcode) const\n\t\t{\t// convert to name of error\n\t\tconst unsigned long _Size = 32767;\n\t\tstring _Narrow(_Size, '\\0');\n\n\t\tconst unsigned long _Val = _Winerror_message(\n\t\t\tstatic_cast\u003cunsigned long\u003e(_Errcode), \u0026_Narrow[0], _Size);\n\n\t\tif (_Val == 0)\n\t\t\treturn (\"unknown error\");\n\n\t\t_Narrow.resize(_Val);\n\t\t_Narrow.shrink_to_fit();\n\t\treturn (_Narrow);\n\t\t}\n\n\tvirtual error_condition\n\t\tdefault_error_condition(int _Errval) const _NOEXCEPT\n\t\t{\t// make error_condition for error code (generic if possible)\n\t\tint _Posv = _Winerror_map(_Errval);\n\n\t\tif (_Posv != 0)\n\t\t\treturn (error_condition(_Posv, generic_category()));\n\t\telse\n\t\t\treturn (error_condition(_Errval, system_category()));\n\t\t}\n\t};\n_STD_END\n```\n\nん！？なんかデフォルトコンストラクタがおかしいぞ・・・？\n\n```cpp\n_STD_BEGIN\nclass _System_error_category\n\t: public error_category\n\t{\t// categorize an operating system error\n\t_System_error_category() _NOEXCEPT\n\t\t{\t// default constructor\n\t\t_Addr = _System_addr;\n\t\t}\n_STD_END\n```\n\n``_System_addr``ってなんだ？\n\n・・・そういえば``std::error_category``の実装を載せた時にへんなenumがあったな\n\n```cpp\n_STD_BEGIN\nclass error_category\n\t{\t// categorize an error\nprotected:\n\tenum : uintptr_t\n\t\t{\t// imaginary addresses for Standard error_category objects\n\t\t_Future_addr = 1,\n\t\t_Generic_addr = 3,\n\t\t_Iostream_addr = 5,\n\t\t_System_addr = 7\n\t\t};\n\t};\n_STD_END\n```\n\n\nあった。ご丁寧にコメントが書いてある。\n\n\u003eimaginary addresses for Standard error_category objects\n\nGoogle先生お願いします。\n\n\u003e標準error_categoryオブジェクトの架空のアドレス\n\nほう・・・。つまり、``std::error_category``クラスの比較演算子は、このenumによって作られた仮想的なアドレスを比較していると。\n・・・いやそれってだめなんじゃ？もう一度規格書をみるよ。\n\n\u003e§ 19.5.1.1\n#### 19.5.1.1 Class error_category overview [syserr.errcat.overview]\n\n\u003e\n1. The class ``error_category`` serves as a base class for types used to identify the source and encoding of a\nparticular category of error code. Classes may be derived from ``error_category`` to support categories of\nerrors in addition to those defined in this International Standard. Such classes shall behave as specified in\nthis subclause. [ Note: ``error_category`` objects are passed by reference, and **two such objects are equal\nif they have the same address. This means that applications using custom error_category types should\ncreate a single object of each such type.** —end note ]\n\nここでいう``address``はつまるところポインタのことじゃないのか？\n\ncppjpでの @faithandbrave@github さんの解説も\n\n\u003ehttp://cpprefjp.github.io/reference/system_error/error_category/op_less.html\n\n\u003e\n```cpp\nbool operator\u003c(const error_category\u0026 rhs) const noexcept;\n```\n\n\u003eerror_categoryオブジェクトのポインタの小なり比較を行う。\n\n\u003e自身のポインタがrhsオブジェクトへのポインタより小さい場合trueを返し、そうでなければfalseを返す。\n\nと書いている。\n\n# 結論\n\nVS2015は、それが規格的にいいのかは知らんが、``std::error_category``の比較演算子の実装に仮想的なアドレスを使っている。\n\nこのせいで自分で``std::error_category``の派生クラスを作るときに困る。\n\n皆さんに聞きたい、この実装ってありなの？\n\n# 追記:VS2015で仕様が変わった理由らしきもの\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://t.co/MJo8E4d3yg\"\u003ehttps://t.co/MJo8E4d3yg\u003c/a\u003e\u003cbr\u003eここの \u0026lt;system_error\u0026gt; Fixes の2番目かな\u003cbr\u003e  \u003ca href=\"https://t.co/MUzHX3H5zk\"\u003ehttps://t.co/MUzHX3H5zk\u003c/a\u003e\u003c/p\u003e\u0026mdash; おいがみ (@oigami013) \u003ca href=\"https://twitter.com/oigami013/status/770248522603954176\"\u003e2016年8月29日\u003c/a\u003e\u003c/blockquote\u003e\n\nん！？\n\n\u003e# STL Fixes In VS 2015, Part 2 | Visual C++ Team Blog\n\u003ehttps://blogs.msdn.microsoft.com/vcblog/2015/07/14/stl-fixes-in-vs-2015-part-2/\n\u003e* Error category objects didn’t behave properly across different DLLs/EXEs (DevDiv#666062, DevDiv#1095970/[Connect#1053790](https://connect.microsoft.com/VisualStudio/feedback/details/1053790)).  The tale of woe here was complicated.  Calling generic_category(), for example, is supposed to return a reference to a single unique object, regardless of where it’s called.  This is usually achieved by separate compilation into the STL’s DLL (or static LIB).  However, we can’t separately compile error_category machinery, because it has a virtual message() returning std::string, whose representation is affected by _ITERATOR_DEBUG_LEVEL.  So, generic_category() is implemented header-only – but that means that different user DLLs end up with different instantiations and therefore different objects.  (It’s also possible for this to cause trouble between a user’s EXE and the STL’s DLL.)  We fixed this to achieve as much conformance as possible.  We’ve taught error_category, its derived classes, and its operator==()/operator!=() to consider all generic_category() objects to be equal, even if they live at different addresses in different DLLs (and similarly for the other error category objects in the Standard).  This has been implemented so that user-defined error category objects will be unaffected.  The only thing we can’t fix is a direct comparison of error_category addresses (code should use operator==() instead). \n\n\u003e#[C++] Comparison std::error_code from std::system_error to std::errc enum value incorrect when using DLL-version of run-time library\n\u003ehttps://connect.microsoft.com/VisualStudio/feedback/details/1053790\n\u003eA comparison of the error code from an std::system_error object thrown by std::thread to std::errc::resource_unavailable_try_again appears to produce an incorrect Boolean result when the application uses a DLL-specific version of the run-time library (compiler option \"/MD\" or \"MDd\").\n\n\u003eThe issue can be reproduces by the attached file, \"MyTest.cpp\", or by the online C++ compiler at http://rextester.com/EMVQXX20044\n\n\u003eChristopher Kohlhoff encouraged me to submit this bug report. He suggested that the issue might be caused by the fact that the implementation compares error categories by their address, and from MSVC\n\nうーん、英語が得意じゃない私にはちときつい・・・。\ndllにしたところ、アドレスがdll使用側と一致しないぞい、ってこと？(あやふや)\n","coediting":false,"comments_count":3,"created_at":"2016-08-29T20:19:24+09:00","group":null,"id":"a184d70a18d4d9a9beea","likes_count":6,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"C++11","versions":[]},{"name":"C++14","versions":[]},{"name":"VisualStudio2015","versions":[]}],"title":"VS2015のstd::error_categoryが奇想天外な件について","updated_at":"2016-08-29T23:56:13+09:00","url":"https://qiita.com/yumetodo/items/a184d70a18d4d9a9beea","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"初めに\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E5%88%9D%E3%82%81%E3%81%AB\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e初めに\u003c/h1\u003e\n\n\u003cp\u003eみなさん、Clang with Microsoft CodeGenは使ってますか？\u003c/p\u003e\n\n\u003cp\u003eまだの方は半年前に投稿した記事ですが\u003c/p\u003e\n\n\u003cp\u003eClang with Microsoft CodeGenがでたので試す\u003cbr\u003e\n\u003ca href=\"http://qiita.com/yumetodo/items/bd41f31f39dd590e8c80\" class=\"autolink\" id=\"reference-e8f406db42c631e1b26b\"\u003ehttp://qiita.com/yumetodo/items/bd41f31f39dd590e8c80\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eを見ましょう。地味にこまめに更新してます。\u003c/p\u003e\n\n\u003cp\u003eどんどん使える子になってきてるのでどんどん使ってあげましょう。コンパイルエラーわかりやすいですし。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"かつて存在した問題\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%8B%E3%81%A4%E3%81%A6%E5%AD%98%E5%9C%A8%E3%81%97%E3%81%9F%E5%95%8F%E9%A1%8C\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eかつて存在した問題\u003c/h1\u003e\n\n\u003cp\u003eClang with Microsoft CodeGen(July 2016)では、Windows.hをincludeすると\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eC:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h(229,21): error : unknown type name 'IUnknown'\n          static_cast\u0026lt;IUnknown*\u0026gt;(*pp);    // make sure everyone derives from IUnknown\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとか怒られていました。\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e一体いつからかこれは修正されました(2016/12現在)\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"解決策\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e解決策\u003c/h1\u003e\n\n\u003cp\u003eというわけでClang with Microsoft CodeGen(July 2016)でもコンパイルが通るように\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#if defined(__c2__) \u0026amp;\u0026amp;  __clang_major__ == 3 \u0026amp;\u0026amp; __clang_minor__ == 8\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e//To avoid compile error\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h(229,21): error : unknown type name 'IUnknown'\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//          static_cast\u0026lt;IUnknown*\u0026gt;(*pp);    // make sure everyone derives from IUnknown\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003eIUnknown\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n#include \u0026lt;Windows.h\u0026gt;\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eとしましょう。COM周りを使わなければClang with Microsoft CodeGen(July 2016)でもコンパイルが通るし、それ以外のバージョンにも被害は出ません。おまじない代わりにいかがですか？\u003c/p\u003e\n","body":"# 初めに\nみなさん、Clang with Microsoft CodeGenは使ってますか？\n\nまだの方は半年前に投稿した記事ですが\n\nClang with Microsoft CodeGenがでたので試す\nhttp://qiita.com/yumetodo/items/bd41f31f39dd590e8c80\n\nを見ましょう。地味にこまめに更新してます。\n\nどんどん使える子になってきてるのでどんどん使ってあげましょう。コンパイルエラーわかりやすいですし。\n\n# かつて存在した問題\n\nClang with Microsoft CodeGen(July 2016)では、Windows.hをincludeすると\n\n```\nC:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h(229,21): error : unknown type name 'IUnknown'\n          static_cast\u003cIUnknown*\u003e(*pp);    // make sure everyone derives from IUnknown\n```\n\nとか怒られていました。\n\n**一体いつからかこれは修正されました(2016/12現在)**\n\n# 解決策\n\nというわけでClang with Microsoft CodeGen(July 2016)でもコンパイルが通るように\n\n```cpp\n#if defined(__c2__) \u0026\u0026  __clang_major__ == 3 \u0026\u0026 __clang_minor__ == 8\n//To avoid compile error\n//C:\\Program Files (x86)\\Windows Kits\\8.1\\Include\\um\\combaseapi.h(229,21): error : unknown type name 'IUnknown'\n//          static_cast\u003cIUnknown*\u003e(*pp);    // make sure everyone derives from IUnknown\nstruct IUnknown;\n#endif\n#include \u003cWindows.h\u003e\n```\n\nとしましょう。COM周りを使わなければClang with Microsoft CodeGen(July 2016)でもコンパイルが通るし、それ以外のバージョンにも被害は出ません。おまじない代わりにいかがですか？\n\n","coediting":false,"comments_count":4,"created_at":"2016-08-04T23:10:57+09:00","group":null,"id":"a8c408078766a5c81e31","likes_count":5,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"clang","versions":[]},{"name":"VisualStudio","versions":[]},{"name":"VisualStudio2015","versions":[]}],"title":"Clang with Microsoft CodeGen(2016/07版)でWindows.hを使うときに注意すべきこと","updated_at":"2016-12-15T13:34:10+09:00","url":"https://qiita.com/yumetodo/items/a8c408078766a5c81e31","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\u003cp\u003e次のコードは言うまでもなく違法なC++11のコードである。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"cpp\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eE\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earikitari\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoha\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enanndarouka\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\"arikitari\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"toha\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"nanndarouka\"\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earikitari\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003etoha\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estrings\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eE\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003enanndarouka\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eenum classはintegral promotionしないどころかそもそも暗黙の型変換しない。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"gccのコンパイルエラー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#gcc%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%82%A8%E3%83%A9%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eGCCのコンパイルエラー\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eprog.cc: In function 'int main()':\nprog.cc:10:32: error: array subscript is not an integer\n         \u0026lt;\u0026lt; strings[E::arikitari] \u0026lt;\u0026lt; std::endl\n                                ^\nprog.cc:11:27: error: array subscript is not an integer\n         \u0026lt;\u0026lt; strings[E::toha] \u0026lt;\u0026lt; std::endl\n                           ^\nprog.cc:12:34: error: array subscript is not an integer\n         \u0026lt;\u0026lt; strings[E::nanndarouka] \u0026lt;\u0026lt; std::endl;\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/HWUkcCJfEJv1zW0A\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/HWUkcCJfEJv1zW0A\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eそりゃそーだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"clangのコンパイルエラー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#clang%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%82%A8%E3%83%A9%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eClangのコンパイルエラー\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003eprog.cc:10:19: error: array subscript is not an integer\n        \u0026lt;\u0026lt; strings[E::arikitari] \u0026lt;\u0026lt; std::endl\n                  ^~~~~~~~~~~~~\nprog.cc:11:19: error: array subscript is not an integer\n        \u0026lt;\u0026lt; strings[E::toha] \u0026lt;\u0026lt; std::endl\n                  ^~~~~~~~\nprog.cc:12:19: error: array subscript is not an integer\n        \u0026lt;\u0026lt; strings[E::nanndarouka] \u0026lt;\u0026lt; std::endl;\n                  ^~~~~~~~~~~~~~~\n3 errors generated.\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"http://melpon.org/wandbox/permlink/hwVwMm3cmuCOic57\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://melpon.org/wandbox/permlink/hwVwMm3cmuCOic57\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e全く同じエラーだ。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"vsのコンパイルエラー\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#vs%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%82%A8%E3%83%A9%E3%83%BC\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eVSのコンパイルエラー\u003c/h1\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"text\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003esource.cpp(10): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\nsource.cpp(11): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\nsource.cpp(12): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\n\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n\n\u003cp\u003eは？\u003ccode\u003eoperator [\u003c/code\u003eってなんぞ！？\u003c/p\u003e\n\n\u003cp\u003e確かにC++の他の二項演算子はすべてオペランドの間にあるけど、\u003ccode\u003eoperator []\u003c/code\u003eだけは例外だから、解析の段階で特別扱いしてそうなものなのに、なんでこんなエラーになるのだろうか。\u003c/p\u003e\n\n\u003cp\u003eちなみにVS2013 update5とVS2015 update3で全く同じエラー吐きます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"これはバグか\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E3%81%93%E3%82%8C%E3%81%AF%E3%83%90%E3%82%B0%E3%81%8B\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003eこれはバグか？\u003c/h1\u003e\n\n\u003cp\u003eで、これはバグレポを投げるべきなんだろうか？\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"経緯\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E7%B5%8C%E7%B7%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e経緯\u003c/h1\u003e\n\n\u003cblockquote class=\"twitter-tweet\"\u003e\n\u003cp\u003eC++「うちもそうやで」 \u003ca href=\"https://t.co/bybbE6H0TY\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/bybbE6H0TY\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/760284143460556801\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e え、enumでキャストした記憶がないのですが……\u003c/p\u003e— YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760297577191473152\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/YSRKEN\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@YSRKEN\u003c/a\u003e えっ。\u003ca href=\"https://t.co/gEWU6Bclph\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://t.co/gEWU6Bclph\u003c/a\u003e\u003c/p\u003e— yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/760458220846604289\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e VSだと「error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません)」……\u003c/p\u003e— YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760459074525814785\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e とりあえず、「E::ナントカ」という変数は、直接[]の引数などには使えないものの、「intへの暗黙の型変換」はできず(明確にstatic_castすればセーフ)、先のwandboxでもE::の手前に(int)など付けてキャストすればセーフでした\u003c/p\u003e— YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760460446839083008\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\"\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/yumetodo\" rel=\"nofollow noopener\" target=\"_blank\"\u003e@yumetodo\u003c/a\u003e 要するに、VS的には「enum classなんだからそのまま引数なはずがない……ハッ！手前の'['がキャスト用の型では！？」といった解釈をしているのではないかと思われます\u003c/p\u003e— YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760460654469713920\" rel=\"nofollow noopener\" target=\"_blank\"\u003e2016年8月2日\u003c/a\u003e\n\u003c/blockquote\u003e\n","body":"次のコードは言うまでもなく違法なC++11のコードである。\n\n```cpp\n#include \u003ciostream\u003e\nenum class E : int {\n    arikitari = 0,\n    toha = 1,\n    nanndarouka = 2\n};\nstatic const char* strings[] = { \"arikitari\", \"toha\", \"nanndarouka\" };\nint main(){\n    std::cout\n        \u003c\u003c strings[E::arikitari] \u003c\u003c std::endl\n        \u003c\u003c strings[E::toha] \u003c\u003c std::endl\n        \u003c\u003c strings[E::nanndarouka] \u003c\u003c std::endl;\n    return 0;\n}\n```\n\nenum classはintegral promotionしないどころかそもそも暗黙の型変換しない。\n\n# GCCのコンパイルエラー\n\n```\nprog.cc: In function 'int main()':\nprog.cc:10:32: error: array subscript is not an integer\n         \u003c\u003c strings[E::arikitari] \u003c\u003c std::endl\n                                ^\nprog.cc:11:27: error: array subscript is not an integer\n         \u003c\u003c strings[E::toha] \u003c\u003c std::endl\n                           ^\nprog.cc:12:34: error: array subscript is not an integer\n         \u003c\u003c strings[E::nanndarouka] \u003c\u003c std::endl;\n```\n\nhttp://melpon.org/wandbox/permlink/HWUkcCJfEJv1zW0A\n\nそりゃそーだ。\n\n# Clangのコンパイルエラー\n\n```\nprog.cc:10:19: error: array subscript is not an integer\n        \u003c\u003c strings[E::arikitari] \u003c\u003c std::endl\n                  ^~~~~~~~~~~~~\nprog.cc:11:19: error: array subscript is not an integer\n        \u003c\u003c strings[E::toha] \u003c\u003c std::endl\n                  ^~~~~~~~\nprog.cc:12:19: error: array subscript is not an integer\n        \u003c\u003c strings[E::nanndarouka] \u003c\u003c std::endl;\n                  ^~~~~~~~~~~~~~~\n3 errors generated.\n```\n\nhttp://melpon.org/wandbox/permlink/hwVwMm3cmuCOic57\n\n全く同じエラーだ。\n\n# VSのコンパイルエラー\n\n```\nsource.cpp(10): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\nsource.cpp(11): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\nsource.cpp(12): error C2677: 二項演算子 '[' : 型 'E' を扱うグローバルな演算子が見つかりません (または変換できません) (新しい動作; ヘルプを参照)。\n```\n\nは？``operator [``ってなんぞ！？\n\n確かにC++の他の二項演算子はすべてオペランドの間にあるけど、``operator []``だけは例外だから、解析の段階で特別扱いしてそうなものなのに、なんでこんなエラーになるのだろうか。\n\nちなみにVS2013 update5とVS2015 update3で全く同じエラー吐きます。\n\n# これはバグか？\n\nで、これはバグレポを投げるべきなんだろうか？\n\n# 経緯\n\n\u003cblockquote class=\"twitter-tweet\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003eC++「うちもそうやで」 \u003ca href=\"https://t.co/bybbE6H0TY\"\u003ehttps://t.co/bybbE6H0TY\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/760284143460556801\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e え、enumでキャストした記憶がないのですが……\u003c/p\u003e\u0026mdash; YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760297577191473152\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/YSRKEN\"\u003e@YSRKEN\u003c/a\u003e えっ。\u003ca href=\"https://t.co/gEWU6Bclph\"\u003ehttps://t.co/gEWU6Bclph\u003c/a\u003e\u003c/p\u003e\u0026mdash; yumetodo-C++erだけど化学科 (@yumetodo) \u003ca href=\"https://twitter.com/yumetodo/status/760458220846604289\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e VSだと「error C2677: 二項演算子 \u0026#39;[\u0026#39; : 型 \u0026#39;E\u0026#39; を扱うグローバルな演算子が見つかりません (または変換できません)」……\u003c/p\u003e\u0026mdash; YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760459074525814785\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e とりあえず、「E::ナントカ」という変数は、直接[]の引数などには使えないものの、「intへの暗黙の型変換」はできず(明確にstatic_castすればセーフ)、先のwandboxでもE::の手前に(int)など付けてキャストすればセーフでした\u003c/p\u003e\u0026mdash; YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760460446839083008\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n\u003cblockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"\u003e\u003cp lang=\"ja\" dir=\"ltr\"\u003e\u003ca href=\"https://twitter.com/yumetodo\"\u003e@yumetodo\u003c/a\u003e 要するに、VS的には「enum classなんだからそのまま引数なはずがない……ハッ！手前の\u0026#39;[\u0026#39;がキャスト用の型では！？」といった解釈をしているのではないかと思われます\u003c/p\u003e\u0026mdash; YSR@WPF分かりません (@YSRKEN) \u003ca href=\"https://twitter.com/YSRKEN/status/760460654469713920\"\u003e2016年8月2日\u003c/a\u003e\u003c/blockquote\u003e\n","coediting":false,"comments_count":5,"created_at":"2016-08-03T12:34:15+09:00","group":null,"id":"0fb733c269257f310496","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"C++","versions":[]},{"name":"GCC","versions":[]},{"name":"clang","versions":[]},{"name":"VisualStudio","versions":[]},{"name":"C++11","versions":[]}],"title":"Visual StudioのC++コンパイラにはoperator[が存在するのではないかという疑惑","updated_at":"2016-08-03T12:34:15+09:00","url":"https://qiita.com/yumetodo/items/0fb733c269257f310496","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null},{"rendered_body":"\n\u003ch1\u003e\n\u003cspan id=\"注意\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E6%B3%A8%E6%84%8F\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e注意\u003c/h1\u003e\n\n\u003cp\u003e\u003cstrong\u003eGitBook version 3.2.2で修正されているようなので、この記事は無視してください\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003egitbook-plugin-markdown-parse-add-br\u003c/code\u003eをご利用の皆様は直ちにgitbookのバージョンを上げ、\u003ccode\u003epackage.json\u003c/code\u003eおよび\u003ccode\u003ebook.json\u003c/code\u003eからこのパッケージを除去してください。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"背景\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%83%8C%E6%99%AF\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e背景\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://blog.kengo-toda.jp/entry/2015/03/29/124356\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttp://blog.kengo-toda.jp/entry/2015/03/29/124356\u003c/a\u003e\u003cbr\u003e\n文中の改行が空白に変換されてしまうため、段落をすべて1行で書ききる必要があります。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eどういうわけか、GitBookのMarkdown parserは段落内改行、つまりスペース2つでの改行をさせてくれません。これは困ります。\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/KazuhiroKuwabara/gitbook-plugin-japanese-support\" rel=\"nofollow noopener\" target=\"_blank\"\u003egitbook-plugin-japanese-support\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eという改行を強制除去することで空白挿入を回避するプラグインもありますが、このプラグインはコードブロック内まで改行除去してくるので、\u003ca href=\"https://github.com/asciidwango/js-primer/issues/105\" rel=\"nofollow noopener\" target=\"_blank\"\u003e問題になることがあります\u003c/a\u003e。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"作ったもの\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e作ったもの\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/yumetodo/gitbook-plugin-markdown-parse-add-br/tree/master\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://github.com/yumetodo/gitbook-plugin-markdown-parse-add-br/tree/master\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.npmjs.com/package/gitbook-plugin-markdown-parse-add-br\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\"\u003ehttps://www.npmjs.com/package/gitbook-plugin-markdown-parse-add-br\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Faac3d270-f605-77b4-4bda-71924ea5d9aa.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=99b33d51a618d03c365fe2b5dfba1f9c\" target=\"_blank\" rel=\"nofollow noopener\"\u003e\u003cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Faac3d270-f605-77b4-4bda-71924ea5d9aa.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;s=99b33d51a618d03c365fe2b5dfba1f9c\" alt=\"無題4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/94177/aac3d270-f605-77b4-4bda-71924ea5d9aa.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F94177%2Faac3d270-f605-77b4-4bda-71924ea5d9aa.png?ixlib=rb-1.2.2\u0026amp;auto=format\u0026amp;gif-q=60\u0026amp;q=75\u0026amp;w=1400\u0026amp;fit=max\u0026amp;s=2ce65f02494f789de4db938a5b4bf5fd 1x\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n写真は昔読んでた某二次創作サイトの小説をとりあえずGitBookに変換してみたもの。\u003c/p\u003e\n\n\u003cp\u003eようは行末のスペース2つを\u003ccode\u003e\u0026lt;br\u0026gt;\u003c/code\u003eに置き換えればいいわけです。が、先程も言ったようにコードブロック内は無視してくれないと困るので、正規表現での置換ができず、\u003ccode\u003eString.prototype.indexOf\u003c/code\u003eをforで回すとかいう荒業を使っています。\u003c/p\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003epackage.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"devDependencies\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"gitbook-cli\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^2.1.2\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"gitbook-plugin-markdown-parse-add-br\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"^1.0.3\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"code-frame\" data-lang=\"json\"\u003e\n\u003cdiv class=\"code-lang\"\u003e\u003cspan class=\"bold\"\u003ebook.json\u003c/span\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"gitbook\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u0026gt;=3.0.0\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"plugins\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"markdown-parse-add-br\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cp\u003eこんな感じで書き足せば使えます。\u003c/p\u003e\n\n\u003ch1\u003e\n\u003cspan id=\"苦労したこと\" class=\"fragment\"\u003e\u003c/span\u003e\u003ca href=\"#%E8%8B%A6%E5%8A%B4%E3%81%97%E3%81%9F%E3%81%93%E3%81%A8\"\u003e\u003ci class=\"fa fa-link\"\u003e\u003c/i\u003e\u003c/a\u003e苦労したこと\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e普段C++erなもんで、\u003ca href=\"https://github.com/yumetodo/gitbook-plugin-markdown-parse-add-br/blob/master/C%2B%2B/parse.cpp\" rel=\"nofollow noopener\" target=\"_blank\"\u003eまずはC++で置換コード書いた\u003c/a\u003eんだけど、どうやってJavaScriptに移植しようかで5時間くらい悩んだ。あってよかった、\u003ccode\u003eString.prototype.indexOf\u003c/code\u003eと\u003cdel\u003e\u003ccode\u003eString.prototype.substr\u003c/code\u003e\u003c/del\u003e(追記:\u003ccode\u003eString.prototype.substr\u003c/code\u003eはAnnex Bだから\u003ccode\u003eString.prototype.substring\u003c/code\u003eを使うべきらしい)\u003c/li\u003e\n\u003cli\u003enpmのパッケージ作るのなんて初めてだから結構試行錯誤した。\u003cbr\u003e\n\u003ca href=\"http://qiita.com/TsutomuNakamura/items/f943e0490d509f128ae2\" id=\"reference-92be31980b2673c08da2\"\u003e初めてのnpm パッケージ公開\u003c/a\u003e\u003cbr\u003e\nに感謝\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epackage.json\u003c/code\u003eの\u003ccode\u003eengine\u003c/code\u003eにgitbookを書かないとエラーになることに気がつくのに時間かかった。\u003c/li\u003e\n\u003c/ul\u003e\n","body":"# 注意\n\n**GitBook version 3.2.2で修正されているようなので、この記事は無視してください**\n\n``gitbook-plugin-markdown-parse-add-br``をご利用の皆様は直ちにgitbookのバージョンを上げ、``package.json``および``book.json``からこのパッケージを除去してください。\n\n# 背景\n\n\u003ehttp://blog.kengo-toda.jp/entry/2015/03/29/124356\n\u003e文中の改行が空白に変換されてしまうため、段落をすべて1行で書ききる必要があります。\n\nどういうわけか、GitBookのMarkdown parserは段落内改行、つまりスペース2つでの改行をさせてくれません。これは困ります。\n\n[gitbook-plugin-japanese-support](https://github.com/KazuhiroKuwabara/gitbook-plugin-japanese-support)\n\nという改行を強制除去することで空白挿入を回避するプラグインもありますが、このプラグインはコードブロック内まで改行除去してくるので、[問題になることがあります](https://github.com/asciidwango/js-primer/issues/105)。\n\n# 作ったもの\n\nhttps://github.com/yumetodo/gitbook-plugin-markdown-parse-add-br/tree/master\nhttps://www.npmjs.com/package/gitbook-plugin-markdown-parse-add-br\n\n![無題4.png](https://qiita-image-store.s3.amazonaws.com/0/94177/aac3d270-f605-77b4-4bda-71924ea5d9aa.png)  \n写真は昔読んでた某二次創作サイトの小説をとりあえずGitBookに変換してみたもの。\n\n\nようは行末のスペース2つを``\u003cbr\u003e``に置き換えればいいわけです。が、先程も言ったようにコードブロック内は無視してくれないと困るので、正規表現での置換ができず、``String.prototype.indexOf``をforで回すとかいう荒業を使っています。\n\n```json:package.json\n{\n  \"devDependencies\": {\n    \"gitbook-cli\": \"^2.1.2\",\n    \"gitbook-plugin-markdown-parse-add-br\": \"^1.0.3\",\n  }\n}\n```\n\n```json:book.json\n{\n  \"gitbook\": \"\u003e=3.0.0\",\n  \"plugins\": [\n    \"markdown-parse-add-br\"\n  ]\n}\n```\n\nこんな感じで書き足せば使えます。\n\n# 苦労したこと\n\n- 普段C++erなもんで、[まずはC++で置換コード書いた](https://github.com/yumetodo/gitbook-plugin-markdown-parse-add-br/blob/master/C%2B%2B/parse.cpp)んだけど、どうやってJavaScriptに移植しようかで5時間くらい悩んだ。あってよかった、``String.prototype.indexOf``と~~``String.prototype.substr``~~(追記:``String.prototype.substr``はAnnex Bだから`String.prototype.substring`を使うべきらしい)\n- npmのパッケージ作るのなんて初めてだから結構試行錯誤した。  \n[初めてのnpm パッケージ公開](http://qiita.com/TsutomuNakamura/items/f943e0490d509f128ae2)  \nに感謝\n- ``package.json``の``engine``にgitbookを書かないとエラーになることに気がつくのに時間かかった。\n","coediting":false,"comments_count":0,"created_at":"2016-08-01T03:27:04+09:00","group":null,"id":"61feb68b44cece2b346f","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"JavaScript","versions":[]},{"name":"Markdown","versions":[]},{"name":"npm","versions":[]},{"name":"gitbook","versions":[]}],"title":"GitBookのMarkdownでも段落内改行したい！","updated_at":"2017-07-17T01:51:17+09:00","url":"https://qiita.com/yumetodo/items/61feb68b44cece2b346f","user":{"description":"ありきたりなC++erです。最近C++書いていません(あれっ","facebook_id":"","followees_count":32,"followers_count":236,"github_login_name":"yumetodo","id":"yumetodo","items_count":110,"linkedin_id":"","location":"Tokyo, Japan","name":"","organization":"","permanent_id":94177,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/94177/profile-images/1473706190","team_only":false,"twitter_screen_name":"yumetodo","website_url":"http://yumetodo.hateblo.jp/"},"page_views_count":null}]